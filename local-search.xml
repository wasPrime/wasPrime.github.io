<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>蓝桥杯校内模拟赛复盘</title>
    <link href="/2020/03/15/%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A0%A1%E5%86%85%E6%A8%A1%E6%8B%9F%E8%B5%9B%E5%A4%8D%E7%9B%98/"/>
    <url>/2020/03/15/%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A0%A1%E5%86%85%E6%A8%A1%E6%8B%9F%E8%B5%9B%E5%A4%8D%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>2020年3月15日蓝桥杯校内模拟赛，难度较为简单。</p></blockquote><a id="more"></a><h2 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h2><p>本人报的是 <code>C/C++</code> 类型的比赛，在填空题时为了快速得出结果采用的是 <code>Python</code>。</p><h3 id="1-1200000-有多少个约数？（只计算正约数）"><a href="#1-1200000-有多少个约数？（只计算正约数）" class="headerlink" title="1. 1200000 有多少个约数？（只计算正约数）"></a>1. <code>1200000</code> 有多少个约数？（只计算正约数）</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>本题从 $[1, 1200000]$ 遍历即可，结果为 <code>96</code>。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><ul><li><p>Python</p><ul><li>法1（常规做法）</li></ul><pre><code class="Python">res = 0for i in range(1, 1200001):    if 1200000 % i == 0:        res += 1print(res)</code></pre><ul><li>法2（列表生成式）</li></ul><pre><code class="Python">print(sum([1200000 % i == 0 for i in range(1, 1200001)]))</code></pre></li><li><p>C++</p><pre><code class="C++">#include &lt;iostream&gt;using namespace std;int main(){    int res = 0;    for (int i = 1; i &lt;= 1200000; i++)    {        if (1200000 % i == 0)        {            res++;        }    }    cout &lt;&lt; res &lt;&lt; endl;    return 0;}</code></pre></li></ul><h3 id="2-在计算机存储中，15-125GB是多少MB"><a href="#2-在计算机存储中，15-125GB是多少MB" class="headerlink" title="2. 在计算机存储中，15.125GB是多少MB"></a>2. 在计算机存储中，15.125GB是多少MB</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>根据进制换算 $1GB = 2 ^ {10} MB = 1024MB$，进行简单乘法 $15.125 * 1024 = 15488$。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre><code class="C++">#include &lt;iostream&gt;using namespace std;int main(){    cout &lt;&lt; (15.125 * 1024) &lt;&lt; endl;    return 0;}</code></pre><h3 id="3-一棵包含有-2019-个结点的树，最多包含多少个叶结点"><a href="#3-一棵包含有-2019-个结点的树，最多包含多少个叶结点" class="headerlink" title="3. 一棵包含有 2019 个结点的树，最多包含多少个叶结点"></a>3. 一棵包含有 <code>2019</code> 个结点的树，最多包含多少个叶结点</h3><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>在总结点数一定时，完全二叉树中有最多的叶子结点。<br>我在做题时忘了具体的计算公式，是在纸上画图算的，思路是算出每一层的二叉树结点数：</p><table><thead><tr><th align="center">第几层</th><th align="center">结点数</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">2</td><td align="center">2</td></tr><tr><td align="center">3</td><td align="center">4</td></tr><tr><td align="center">4</td><td align="center">8</td></tr><tr><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">10</td><td align="center">512</td></tr></tbody></table><p>可看出当层数为 $n$ 时每一层的结点数为 $2 ^ {n -1}$，那么前 $n$ 层的结点总数为 $1 + 2 + 3 + … + 2 ^ {n - 1} = 2 ^ n - 1$，采取快速逼近的思想，要使结点总数最接近 <code>2019</code>，当 $n = 10$ 时结点总数为 <code>1023</code>，与 <code>2019</code> 相差 <code>996</code>，故最后一层有 <code>996</code> 个结点，占用了倒数第2层 <code>498</code> 个结点的子结点位置，使得倒数第2层减少了 <code>498</code> 个叶子结点（倒数第2层总共有 <code>512</code> 个结点）而剩下 <code>14</code> 个叶子结点。所以叶子结点总共有 最后一层 <code>996</code> + 倒数第2层 <code>14</code> = <code>1010</code> 个结点。</p><hr><p>后来看到有<a href="https://blog.csdn.net/weixin_42449444/article/details/104823371" target="_blank" rel="noopener">大佬的博客</a>提到由结点总数推出叶子结点数的公式。</p><blockquote><p>太长不看版<br>叶子结点最多的个数与结点总数的奇偶有关，奇数个则有 $\frac{n + 1}{2}$个，偶数个则有 $\frac{n}{2}$ 个。</p></blockquote><p><strong>具体分析：</strong></p><p>叶子结点就是出度为 <code>0</code> 的结点，即没有子结点的结点。</p><ol><li><p>假设 $n$ 为完全二叉树的结点总数，$n_0$ 是度为0的结点总数（即叶子结点数），$n_1$ 是度为1的结点总数，$n_2$ 是度为2的结点总数，边数为b。</p></li><li><p>由<a href="https://blog.csdn.net/TinnCHEN/article/details/84023083" target="_blank" rel="noopener">二叉树的性质</a>可知：$$n = n_0 + n_1 + n_2\tag{1}$$ $$b = n - 1(二叉树是最小连通图)\tag{2}$$<br>联立两式得$$b = n_0 + n_1 + n_2 - 1$$<br>另有 $$b = n_1 + 2n_2$$<br>则有 $$n_0 + n_1 + n_2 - 1 = n_1 + 2n_2$$<br>即 $$n_2 = n_0 - 1\tag{3}$$</p></li><li><p>将上述 <code>(1)</code> <code>(3)</code> 把 $n_2$ 消去可得：$$n = 2n_0 + n_1 - 1$$</p></li><li><p>由于完全二叉树中度为1的结点数 $n_1$ 只有两种可能 <code>0</code> 或 <code>1</code>：<br>当 $n_1 = 0$ 时 $$n_0 = \frac{n + 1}{2}\tag{4}$$<br>当 $n_1 = 1$ 时 $$n_0 = \frac{n}{2}\tag{5}$$</p></li><li><p>完全二叉树中除去最后一层的结点总数有 $(2 ^ n - 1)$ 个，为奇数，根据完全二叉树的结点总数 $n = 2019$ 可以知道最后一层结点数为偶数（奇数 - 奇数 = 偶数），故度为1的结点数 $n_1 = 0$，利用公式 <code>(4)</code> 求出叶子结点数 $n_0 = \frac{n + 1}{2} = \frac{2019 + 1}{2}= 1010$。</p></li></ol><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><pre><code class="C++">#include &lt;iostream&gt;using namespace std;int main(){    int n = 2019;    if (n % 2 == 1) //若结点总数为奇数，则n1 = 0    {        cout &lt;&lt; (n + 1) / 2 &lt;&lt; endl;    }    else //若结点总数为偶数，则n1 = 1    {        cout &lt;&lt; n / 2 &lt;&lt; endl;    }    return 0;}</code></pre><h3 id="4-在-1-至-2019-中，有多少个数的数位中包含数字-9"><a href="#4-在-1-至-2019-中，有多少个数的数位中包含数字-9" class="headerlink" title="4. 在 1 至 2019 中，有多少个数的数位中包含数字 9"></a>4. 在 <code>1</code> 至 <code>2019</code> 中，有多少个数的数位中包含数字 <code>9</code></h3><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>本题从 $[1, 2019]$ 遍历即可，结果为 <code>544</code>。</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><ul><li><p>Python</p><ul><li>法1（常规做法）</li></ul><pre><code class="Python">res = 0for num in range(1, 2020):    # 在循环体内修改循环变量不会影响循环条件中的循环变量    while num != 0:        if num % 10 == 9:            res += 1            break        else:            num //= 10print(res)</code></pre><ul><li>法2（列表生成式）</li></ul><pre><code class="Python">print(sum([&#39;9&#39; in str(num) for num in range(1, 2020)]))</code></pre></li><li><p>C++</p></li></ul><pre><code class="C++">#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main(){    int res = 0;    for (int num = 1; num &lt;= 2019; num++)    {        string s = to_string(num);        if (s.find(&#39;9&#39;) != -1)        {            res++;        }    }    cout &lt;&lt; res &lt;&lt; endl;    return 0;}</code></pre><h2 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h2><p>未完待续</p>]]></content>
    
    
    
    <tags>
      
      <tag>蓝桥杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>A Test article</title>
    <link href="/2020/03/12/Test/"/>
    <url>/2020/03/12/Test/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Here is a test blog, but also my first blog</p></blockquote><a id="more"></a><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p><strong>粗体:</strong></p><p><em>斜体:</em></p><ul><li>无序列表1<ul><li>无序列表1.1<ul><li>无序列表1.1.1</li></ul></li></ul></li><li>无序列表2</li><li>无序列表3</li></ul><ol><li>有序列表1<ol><li>有序列表1.1<ol><li>有序列表1.1.1</li></ol></li></ol></li><li>有序列表2</li><li>有序列表3</li></ol><p>来一张表格:</p><table><thead><tr><th align="center">表头</th><th align="center">条目一</th><th align="center">条目二</th></tr></thead><tbody><tr><td align="center">项目</td><td align="center">项目一</td><td align="center">项目二</td></tr><tr><td align="center">谢谢</td><td align="center">哈哈哈</td><td align="center">呵</td></tr></tbody></table><pre><code class="mermaid">graph TD;A--&gt;B;A--&gt;C;B--&gt;D;C--&gt;D;</code></pre><p>中划线:<del>I LOVE YOU</del></p><p>LaTex:<br>质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。</p><p>代码显示测试:</p><pre><code class="C++">#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;int main(){    vector&lt;int&gt; v;    v.push_back(1);    v.push_back(1);    v.push_back(1);    cout &lt;&lt; v.size();    return 0;}</code></pre>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>the first tag</tag>
      
      <tag>the second tag</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/03/12/hello-world/"/>
    <url>/2020/03/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
