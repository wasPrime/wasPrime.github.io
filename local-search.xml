<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Sequence Count</title>
    <link href="/Algorithm/Design/Sequence-Count/"/>
    <url>/Algorithm/Design/Sequence-Count/</url>
    
    <content type="html"><![CDATA[<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English"><a href="#English" class="headerlink" title="English"></a>English</h3><p>A sequence is defined as: the absolute value of the difference between two adjacent elements after ordering is exactly equal to 1.<br>Now given an array of length n, how many subintervals of length k satisfy the requirement that the elements of a subinterval perfectly form a sequence?</p><p>For example, for the array [3, 7, 6, 4, 5], the subarray [4, 5] is a sequence.</p><p><strong>Note:</strong><br>A subinterval can be thought of as selecting some elements from the head or tail of the original array to delete (or not delete) and leaving the relative positions of the remaining elements unchanged.</p><p><strong>Description of the parameters:</strong></p><ul><li>$1 &lt; k &lt; n &lt; 300000$</li><li>$a_1, a_2,…, a_n (1 \le a_i \le 10^6)$</li></ul><h3 id="Chinese"><a href="#Chinese" class="headerlink" title="Chinese"></a>Chinese</h3><p>顺子的定义为：排序后相邻两元素的差的绝对值恰好等于 1。<br>现在提供一个长度为 n 的数组，有多少长度为 k 的子区间满足：子区间中元素怡好构成一个顺子?</p><p>例如，对于数组 [3, 7, 6, 4, 5]，子数组 [4, 5] 是一个顺子。</p><p><strong>备注：</strong><br>子区间可以理解为从原数组中从头部或尾部选择一些元素删掉 (或者不删)并保持剩余元素的相对位置不变。</p><p><strong>输入描述：</strong></p><ul><li>$1 &lt; k &lt; n &lt; 300000$</li><li>$a_1, a_2,…, a_n (1 \le a_i \le 10^6)$</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">sequence_count</span><span class="hljs-params">(<span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = arr.<span class="hljs-built_in">size</span>();  <span class="hljs-comment">// assert(n &gt;= k);</span><br><br>        <span class="hljs-comment">// Initialize the state with (k - 1) elements</span><br>        std::map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; count_by_value;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k - <span class="hljs-number">1</span>; ++i) &#123;<br>            <span class="hljs-type">int</span> value = arr[i];<br>            ++count_by_value[value];<br>        &#125;<br><br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = k - <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-comment">// Add a value into the window and ensure the current window has k elements indeed</span><br>            <span class="hljs-type">int</span> value = arr[i];<br>            ++count_by_value[value];<br><br>            <span class="hljs-comment">// Judge whether the window is a sequence or not</span><br>            <span class="hljs-keyword">if</span> (count_by_value.<span class="hljs-built_in">size</span>() == k &amp;&amp; (count_by_value.<span class="hljs-built_in">rbegin</span>()-&gt;first       <span class="hljs-comment">// the max value</span><br>                                                   - count_by_value.<span class="hljs-built_in">begin</span>()-&gt;first  <span class="hljs-comment">// the min value</span><br>                                                   + <span class="hljs-number">1</span> ==<br>                                               k)) &#123;<br>                ++res;<br>            &#125;<br><br>            <span class="hljs-comment">// Remove the first element of the window and prepare (k - 1) elements for the next loop</span><br>            <span class="hljs-type">int</span> first_index_in_window = i - k + <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> first_value_in_window = arr[first_index_in_window];<br>            <span class="hljs-keyword">auto</span> first_in_window_it = count_by_value.<span class="hljs-built_in">find</span>(first_value_in_window);<br>            <span class="hljs-comment">// assert(first_in_window_it != count_by_value.end());</span><br>            --first_in_window_it-&gt;second;<br>            <span class="hljs-keyword">if</span> (first_in_window_it-&gt;second == <span class="hljs-number">0</span>) &#123;<br>                count_by_value.<span class="hljs-built_in">erase</span>(first_in_window_it);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>design</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>design</tag>
      
      <tag>sliding_window</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Balance All Numbers into Range</title>
    <link href="/Algorithm/Design/Balance-All-Numbers-into-Range/"/>
    <url>/Algorithm/Design/Balance-All-Numbers-into-Range/</url>
    
    <content type="html"><![CDATA[<h2 id="Basic-Problem"><a href="#Basic-Problem" class="headerlink" title="Basic Problem"></a>Basic Problem</h2><p>If we have a number array and a desired range of values, we have chance to operate a pair of numbers every time with multiple times - we are able to give a number a plus and give another number a minus at the same time.</p><p>So, how many times do we need to balance all numbers into the range? Return <code>-1</code> if we have no way to achieve it.</p><p>For example:</p><ul><li>Case 1:<ul><li>Input:<ul><li>Values: [1, 2, 3, 4]</li><li>Expected range: [2, 3]</li></ul></li><li>Output: 1</li></ul></li><li>Case 2:<ul><li>Input:<ul><li>Values: [1, 100]</li><li>Expected range: [2, 2]</li></ul></li><li>Output: -1</li></ul></li></ul><h3 id="Solutions-of-Basic-Problem"><a href="#Solutions-of-Basic-Problem" class="headerlink" title="Solutions of Basic Problem"></a>Solutions of Basic Problem</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;numeric&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// Boundary: [left, right]</span><br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">minimum_time_to_balance</span><span class="hljs-params">(<span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; values, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> </span>&#123;<br>        <span class="hljs-type">int</span> sum = std::<span class="hljs-built_in">accumulate</span>(values.<span class="hljs-built_in">begin</span>(), values.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br>        <span class="hljs-type">int</span> n = values.<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-keyword">if</span> (sum &lt; left * n || sum &gt; right * n) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> need_to_plus = <span class="hljs-number">0</span>, need_to_minus = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> value : values) &#123;<br>            <span class="hljs-keyword">if</span> (value &lt; left) &#123;<br>                need_to_plus += left - value;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &gt; right) &#123;<br>                need_to_minus += value - right;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">max</span>(need_to_plus, need_to_minus);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>There is also another implementation:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;numeric&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// Boundary: [left, right]</span><br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">minimum_time_to_balance</span><span class="hljs-params">(<span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; values, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> </span>&#123;<br>        <span class="hljs-type">int</span> min_need_plus = <span class="hljs-number">0</span>, min_need_minus = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> max_can_plus = <span class="hljs-number">0</span>, max_can_minus = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> value : values) &#123;<br>            <span class="hljs-keyword">if</span> (value &lt; left) &#123;<br>                min_need_plus += left - value;<br>                max_can_plus += right - value;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &gt; right) &#123;<br>                min_need_minus += value - right;<br>                max_can_minus += value - left;<br>            &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// left &lt;= value &lt;= right</span><br>                max_can_plus += right - value;<br>                max_can_minus += value - left;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (min_need_plus &gt; max_can_minus || min_need_minus &gt; max_can_plus) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">max</span>(min_need_plus, min_need_minus);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Advanced-Unequal-Balance-of-Specific-Rate"><a href="#Advanced-Unequal-Balance-of-Specific-Rate" class="headerlink" title="Advanced: Unequal Balance of Specific Rate"></a>Advanced: Unequal Balance of Specific Rate</h2><p>However, what if the balance between the pair of numbers is unequal? For example, when we give a number a plus, we have to give another number 2 minus. In this way, the balance of transformation is unequal.</p><p>For example:</p><ul><li>Case 1:<ul><li>Input:<ul><li>Values: [1, 2, 3, 4]</li><li>Expected range: [2, 3]</li></ul></li><li>Output: 1</li></ul></li><li>Case 2:<ul><li>Input:<ul><li>Values: [-1, 2]</li><li>Expected range: [0, 0]</li></ul></li><li>Output: 1</li></ul></li><li>Case 3:<ul><li>Input:<ul><li>Values: [-1, 1, 1]</li><li>Expected range: [0, 0]</li></ul></li><li>Output: -1</li></ul></li></ul><h3 id="Solution-for-Unequal-Balance-of-Specific-Rate"><a href="#Solution-for-Unequal-Balance-of-Specific-Rate" class="headerlink" title="Solution for Unequal Balance of Specific Rate"></a>Solution for Unequal Balance of Specific Rate</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;numeric&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// Boundary: [left, right]</span><br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">minimum_time_to_balance</span><span class="hljs-params">(<span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; values, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> </span>&#123;<br>        <span class="hljs-type">int</span> min_need_plus_steps = <span class="hljs-number">0</span>, min_need_minus_steps = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> max_can_plus_steps = <span class="hljs-number">0</span>, max_can_minus_steps = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> value : values) &#123;<br>            <span class="hljs-keyword">if</span> (value &lt; left) &#123;<br>                <span class="hljs-type">int</span> min_need_plus_step = left - value;  <span class="hljs-comment">// Actually it&#x27;s equivalent to such statement:</span><br>                                                        <span class="hljs-comment">// int min_need_plus_step = divide_by_upper(left - value, 1);</span><br>                <span class="hljs-type">int</span> max_can_plus_step = right - value;  <span class="hljs-comment">// Actually it&#x27;s equivalent to such statement:</span><br>                                                        <span class="hljs-comment">// int max_can_plus_step = divide_by_lower(right - value, 1);</span><br>                <span class="hljs-comment">// Actually we can write a condition but it won&#x27;t gonna work here:</span><br>                <span class="hljs-comment">// if (min_need_plus_step &gt; max_can_plus_step) &#123;</span><br>                <span class="hljs-comment">//     return -1;</span><br>                <span class="hljs-comment">// &#125;</span><br>                min_need_plus_steps += min_need_plus_step;<br>                max_can_plus_steps += max_can_plus_step;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &gt; right) &#123;<br>                <span class="hljs-type">int</span> min_need_minus_step = <span class="hljs-built_in">divide_by_upper</span>(value - right, <span class="hljs-number">2</span>);<br>                <span class="hljs-type">int</span> max_can_minus_step = <span class="hljs-built_in">divide_by_lower</span>(value - left, <span class="hljs-number">2</span>);<br>                <span class="hljs-keyword">if</span> (min_need_minus_step &gt; max_can_minus_step) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>                &#125;<br>                min_need_minus_steps += min_need_minus_step;<br>                max_can_minus_steps += max_can_minus_step;<br>            &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// left &lt;= value &lt;= right</span><br><br>                max_can_plus_steps += right - value;  <span class="hljs-comment">// Actually it&#x27;s equivalent to such statement:</span><br>                                                      <span class="hljs-comment">// max_can_plus_steps += divide_by_lower(right - value, 1);</span><br>                max_can_minus_steps += <span class="hljs-built_in">divide_by_lower</span>(value - left, <span class="hljs-number">2</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (min_need_plus_steps &gt; max_can_minus_steps || min_need_minus_steps &gt; max_can_plus_steps) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">max</span>(min_need_plus_steps, min_need_minus_steps);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">divide_by_upper</span><span class="hljs-params">(<span class="hljs-type">int</span> dividend, <span class="hljs-type">int</span> divisor)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (dividend + (divisor - <span class="hljs-number">1</span>)) / divisor;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">divide_by_lower</span><span class="hljs-params">(<span class="hljs-type">int</span> dividend, <span class="hljs-type">int</span> divisor)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> dividend / divisor;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="More-Advanced-Unequal-Balance-of-General-Rate"><a href="#More-Advanced-Unequal-Balance-of-General-Rate" class="headerlink" title="More Advanced: Unequal Balance of General Rate"></a>More Advanced: Unequal Balance of General Rate</h2><p>What if the balance rate between the pair of numbers is more general? For example, when we give a number <code>n</code> plus (define it as <code>plus_factor</code>), we have to give another number <code>m</code> minus (define it as <code>minus_factor</code>).</p><h3 id="Solution-for-Unequal-Balance-of-General-Rate"><a href="#Solution-for-Unequal-Balance-of-General-Rate" class="headerlink" title="Solution for Unequal Balance of General Rate"></a>Solution for Unequal Balance of General Rate</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;numeric&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// Boundary: [left, right]</span><br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">minimum_time_to_balance</span><span class="hljs-params">(<span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; values, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right, <span class="hljs-type">int</span> plus_factor, <span class="hljs-type">int</span> minus_factor)</span> </span>&#123;<br>        <span class="hljs-type">int</span> min_need_plus_steps = <span class="hljs-number">0</span>, min_need_minus_steps = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> max_can_plus_steps = <span class="hljs-number">0</span>, max_can_minus_steps = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> value : values) &#123;<br>            <span class="hljs-keyword">if</span> (value &lt; left) &#123;<br>                <span class="hljs-type">int</span> min_need_plus_step = <span class="hljs-built_in">divide_by_upper</span>(left - value, plus_factor);<br><br>                <span class="hljs-type">int</span> max_can_plus_step = <span class="hljs-built_in">divide_by_lower</span>(right - value, plus_factor);<br>                <span class="hljs-keyword">if</span> (min_need_plus_step &gt; max_can_plus_step) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>                &#125;<br>                min_need_plus_steps += min_need_plus_step;<br>                max_can_plus_steps += max_can_plus_step;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &gt; right) &#123;<br>                <span class="hljs-type">int</span> min_need_minus_step = <span class="hljs-built_in">divide_by_upper</span>(value - right, minus_factor);<br>                <span class="hljs-type">int</span> max_can_minus_step = <span class="hljs-built_in">divide_by_lower</span>(value - left, minus_factor);<br>                <span class="hljs-keyword">if</span> (min_need_minus_step &gt; max_can_minus_step) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>                &#125;<br>                min_need_minus_steps += min_need_minus_step;<br>                max_can_minus_steps += max_can_minus_step;<br>            &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// left &lt;= value &lt;= right</span><br><br>                max_can_plus_steps += <span class="hljs-built_in">divide_by_lower</span>(right - value, plus_factor);<br>                max_can_minus_steps += <span class="hljs-built_in">divide_by_lower</span>(value - left, minus_factor);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (min_need_plus_steps &gt; max_can_minus_steps || min_need_minus_steps &gt; max_can_plus_steps) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">max</span>(min_need_plus_steps, min_need_minus_steps);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">divide_by_upper</span><span class="hljs-params">(<span class="hljs-type">int</span> dividend, <span class="hljs-type">int</span> divisor)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (dividend + (divisor - <span class="hljs-number">1</span>)) / divisor;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">divide_by_lower</span><span class="hljs-params">(<span class="hljs-type">int</span> dividend, <span class="hljs-type">int</span> divisor)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> dividend / divisor;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>design</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>design</tag>
      
      <tag>greedy_algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 83 - Remove Duplicates from Sorted List</title>
    <link href="/Algorithm/LeetCode/LinkedList/LeetCode-83-Remove-Duplicates-from-Sorted-List/"/>
    <url>/Algorithm/LeetCode/LinkedList/LeetCode-83-Remove-Duplicates-from-Sorted-List/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-success">easy</span></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Remove-Duplicates-from-Sorted-List"><a href="#English-Remove-Duplicates-from-Sorted-List" class="headerlink" title="English (Remove Duplicates from Sorted List)"></a>English (Remove Duplicates from Sorted List)</h3><p>Given the <code>head</code> of a sorted linked list, <em>delete all duplicates such that each element appears only once</em>. Return <em>the linked list <strong>sorted</strong> as well</em>.</p><p><strong>Example 1:</strong></p><pre><code class=" mermaid">graph LRnode_11((1))node_12((1))node_13((2))node_21((1))node_23((2))node_11 ---&gt; node_12 ---&gt; node_13node_21 ---&gt; node_23</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: head = [1,1,2]<br>Output: [1,2]<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><pre><code class=" mermaid">graph LRnode_11((1))node_12((1))node_13((2))node_14((3))node_15((3))node_21((1))node_23((2))node_24((3))node_11 ---&gt; node_12 ---&gt; node_13 ---&gt; node_14 ---&gt; node_15node_21 ---&gt; node_23 ---&gt; node_24</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: head = [1,1,2,3,3]<br>Output: [1,2,3]<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the list is in the range <code>[0, 300]</code>.</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li><li>The list is guaranteed to be <strong>sorted</strong> in ascending order.</li></ul><h3 id="Chinese-删除排序链表中的重复元素"><a href="#Chinese-删除排序链表中的重复元素" class="headerlink" title="Chinese (删除排序链表中的重复元素)"></a>Chinese (删除排序链表中的重复元素)</h3><p>给定一个已排序的链表的头 <code>head</code> ， <em>删除所有重复的元素，使每个元素只出现一次</em> 。返回 <em>已排序的链表</em> 。</p><p><strong>示例 1：</strong></p><pre><code class=" mermaid">graph LRnode_11((1))node_12((1))node_13((2))node_21((1))node_23((2))node_11 ---&gt; node_12 ---&gt; node_13node_21 ---&gt; node_23</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：head = [1,1,2]<br>输出：[1,2]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><pre><code class=" mermaid">graph LRnode_11((1))node_12((1))node_13((2))node_14((3))node_15((3))node_21((1))node_23((2))node_24((3))node_11 ---&gt; node_12 ---&gt; node_13 ---&gt; node_14 ---&gt; node_15node_21 ---&gt; node_23 ---&gt; node_24</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：head = [1,1,2,3,3]<br>输出：[1,2,3]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点数目在范围 <code>[0, 300]</code> 内</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li><li>题目数据保证链表已经按 <strong>升序</strong> 排列</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode* next;<br>    <span class="hljs-built_in">ListNode</span>() : <span class="hljs-built_in">val</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x, ListNode* next) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(next) &#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">deleteDuplicates</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        &#125;<br><br>        ListNode* prev = head;<br>        ListNode* curr = head-&gt;next;<br>        <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">nullptr</span>) &#123;<br>            ListNode* next = curr-&gt;next;<br><br>            <span class="hljs-keyword">if</span> (prev-&gt;val == curr-&gt;val) &#123;<br>                prev-&gt;next = next;<br>                <span class="hljs-keyword">delete</span> curr;<br>                curr = next;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                prev = curr;<br>                curr = next;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>linked_list</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>linked_list</tag>
      
      <tag>easy</tag>
      
      <tag>two_pointers</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 92 - Reverse Linked List II</title>
    <link href="/Algorithm/LeetCode/LinkedList/LeetCode-92-Reverse-Linked-List-II/"/>
    <url>/Algorithm/LeetCode/LinkedList/LeetCode-92-Reverse-Linked-List-II/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-warning">medium</span></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Reverse-Linked-List-II"><a href="#English-Reverse-Linked-List-II" class="headerlink" title="English (Reverse Linked List II)"></a>English (Reverse Linked List II)</h3><p>Given the <code>head</code> of a singly linked list and two integers <code>left</code> and <code>right</code> where <code>left &lt;= right</code>, reverse the nodes of the list from position <code>left</code> to position <code>right</code>, and return the reversed list.</p><p><strong>Example 1:</strong></p><pre><code class=" mermaid">graph LRnode11((1))node12((2))node13((3))node14((4))node15((5))node11 ---&gt; node12 ---&gt; node13 ---&gt; node14 ---&gt; node15node21((1))node22((4))node23((3))node24((2))node25((5))node21 ---&gt; node22 ---&gt; node23 ---&gt; node24 ---&gt; node25</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: head = [1,2,3,4,5], left = 2, right = 4<br>Output: [1,4,3,2,5]<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: head = [5], left = 1, right = 1<br>Output: [5]<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the list is <code>n</code>.</li><li><code>1 &lt;= n &lt;= 500</code></li><li><code>-500 &lt;= Node.val &lt;= 500</code></li><li><code>1 &lt;= left &lt;= right &lt;= n</code></li></ul><p><strong>Follow up:</strong> Could you do it in one pass?</p><h3 id="Chinese-环形链表-II"><a href="#Chinese-环形链表-II" class="headerlink" title="Chinese (环形链表 II)"></a>Chinese (环形链表 II)</h3><p>给你单链表的头指针 <code>head</code> 和两个整数 <code>left</code> 和 <code>right</code> ，其中 <code>left &lt;= right</code> 。请你反转从位置 <code>left</code> 到位置 <code>right</code> 的链表节点，返回 反转后的链表 。</p><p><strong>示例 1：</strong></p><pre><code class=" mermaid">graph LRnode11((1))node12((2))node13((3))node14((4))node15((5))node11 ---&gt; node12 ---&gt; node13 ---&gt; node14 ---&gt; node15node21((1))node22((4))node23((3))node24((2))node25((5))node21 ---&gt; node22 ---&gt; node23 ---&gt; node24 ---&gt; node25</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：head = [1,2,3,4,5], left = 2, right = 4<br>输出：[1,4,3,2,5]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：head = [5], left = 1, right = 1<br>输出：[5]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点数目为 <code>n</code></li><li><code>1 &lt;= n &lt;= 500</code></li><li><code>-500 &lt;= Node.val &lt;= 500</code></li><li><code>1 &lt;= left &lt;= right &lt;= n</code></li></ul><p><strong>进阶：</strong> 你可以使用一趟扫描完成反转吗？</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode* next;<br>    <span class="hljs-built_in">ListNode</span>() : <span class="hljs-built_in">val</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x, ListNode* next) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(next) &#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseBetween</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> </span>&#123;<br>        ListNode* dummy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>, head);<br><br>        ListNode* lastNodeInPreviousGroup = <span class="hljs-built_in">moveDistance</span>(dummy, left - <span class="hljs-number">1</span>);<br>        ListNode* leftNode = lastNodeInPreviousGroup-&gt;next;<br>        ListNode* rightNode = <span class="hljs-built_in">moveDistance</span>(dummy, right);<br>        ListNode* firstNodeInNextGroup = rightNode-&gt;next;<br><br>        <span class="hljs-comment">// break out the connections with the previous/next group</span><br>        lastNodeInPreviousGroup-&gt;next = <span class="hljs-literal">nullptr</span>;<br>        rightNode-&gt;next = <span class="hljs-literal">nullptr</span>;<br><br>        <span class="hljs-comment">// reverse in group</span><br>        rightNode = leftNode;<br>        leftNode = <span class="hljs-built_in">reverseList</span>(leftNode);<br><br>        <span class="hljs-comment">// resume the connections with the previous/next group</span><br>        lastNodeInPreviousGroup-&gt;next = leftNode;<br>        rightNode-&gt;next = firstNodeInNextGroup;<br><br>        head = dummy-&gt;next;<br>        <span class="hljs-keyword">delete</span> dummy;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> ListNode* <span class="hljs-title">moveDistance</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> distance)</span> </span>&#123;<br>        ListNode* curr = head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; distance &amp;&amp; curr != <span class="hljs-literal">nullptr</span>; ++i) &#123;<br>            curr = curr-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> curr;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">static</span> ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        ListNode* prev = <span class="hljs-literal">nullptr</span>;<br>        ListNode* curr = head;<br>        <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">nullptr</span>) &#123;<br>            ListNode* next = curr-&gt;next;<br>            curr-&gt;next = prev;<br><br>            prev = curr;<br>            curr = next;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> prev;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>linked_list</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>linked_list</tag>
      
      <tag>medium</tag>
      
      <tag>two_pointers</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 160 - Intersection of Two Linked Lists</title>
    <link href="/Algorithm/LeetCode/LinkedList/LeetCode-160-Intersection-of-Two-Linked-Lists/"/>
    <url>/Algorithm/LeetCode/LinkedList/LeetCode-160-Intersection-of-Two-Linked-Lists/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-success">easy</span></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Intersection-of-Two-Linked-Lists"><a href="#English-Intersection-of-Two-Linked-Lists" class="headerlink" title="English (Intersection of Two Linked Lists)"></a>English (Intersection of Two Linked Lists)</h3><p>Given the heads of two singly linked-lists <code>headA</code> and <code>headB</code>, return <em>the node at which the two lists intersect</em>. If the two linked lists have no intersection at all, return <code>null</code>.</p><p>For example, the following two linked lists begin to intersect at node <code>c1</code>:</p><pre><code class=" mermaid">graph LRnode_a1((&quot;a1&quot;))node_a2((&quot;a2&quot;))node_b1((&quot;b1&quot;))node_b2((&quot;b2&quot;))node_b3((&quot;b3&quot;))node_c1((&quot;c1&quot;))node_c2((&quot;c2&quot;))node_c3((&quot;c3&quot;))node_a1 ---&gt; node_a2node_b1 ---&gt; node_b2 ---&gt; node_b3node_a2 ---&gt; node_c1node_b3 ---&gt; node_c1node_c1 ---&gt; node_c2 ---&gt; node_c3</code></pre><p>The test cases are generated such that there are no cycles anywhere in the entire linked structure.</p><p><strong>Note</strong> that the linked lists must <strong>retain their original structure</strong> after the function returns.</p><p><strong>Custom Judge:</strong></p><p>The inputs to the <strong>judge</strong> are given as follows (your program is <strong>not</strong> given these inputs):</p><ul><li><code>intersectVal</code> - The value of the node where the intersection occurs. This is <code>0</code> if there is no intersected node.</li><li><code>listA</code> - The first linked list.</li><li><code>listB</code> - The second linked list.</li><li><code>skipA</code> - The number of nodes to skip ahead in <code>listA</code> (starting from the head) to get to the intersected node.</li><li><code>skipB</code> - The number of nodes to skip ahead in <code>listB</code> (starting from the head) to get to the intersected node.</li></ul><p>The judge will then create the linked structure based on these inputs and pass the two heads, <code>headA</code> and <code>headB</code> to your program. If you correctly return the intersected node, then your solution will be <strong>accepted</strong>.</p><p><strong>Example 1:</strong></p><pre><code class=" mermaid">graph LRnode_a1((4))node_a2((1))node_b1((5))node_b2((6))node_b3((1))node_c1((8))node_c2((4))node_c3((5))node_a1 ---&gt; node_a2node_b1 ---&gt; node_b2 ---&gt; node_b3node_a2 ---&gt; node_c1node_b3 ---&gt; node_c1node_c1 ---&gt; node_c2 ---&gt; node_c3</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3<br>Output: Intersected at &#x27;8&#x27;<br>Explanation: The intersected node&#x27;s value is 8 (note that this must not be 0 if the two lists intersect).<br>From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.<br>- Note that the intersected node&#x27;s value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory.<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><pre><code class=" mermaid">graph LRnode_a1((1))node_a2((9))node_a3((1))node_b1((3))node_c1((2))node_c2((4))node_a1 ---&gt; node_a2 ---&gt; node_a3node_b1node_a3 ---&gt; node_c1node_b1 ---&gt; node_c1node_c1 ---&gt; node_c2</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1<br>Output: Intersected at &#x27;2&#x27;<br>Explanation: The intersected node&#x27;s value is 2 (note that this must not be 0 if the two lists intersect).<br>From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.<br></code></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><pre><code class=" mermaid">graph LRnode_a1((2))node_a2((6))node_a3((4))node_b1((1))node_b2((5))node_a1 ---&gt; node_a2 ---&gt; node_a3node_b1 ---&gt; node_b2</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2<br>Output: No intersection<br>Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.<br>Explanation: The two lists do not intersect, so return null.<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>The number of nodes of <code>listA</code> is in the <code>m</code>.</li><li>The number of nodes of <code>listB</code> is in the <code>n</code>.</li><li><code>1 &lt;= m, n &lt;= 3 * 10^4</code></li><li><code>1 &lt;= Node.val &lt;= 10^5</code></li><li><code>0 &lt;= skipA &lt; m</code></li><li><code>0 &lt;= skipB &lt; n</code></li><li><code>intersectVal</code> is <code>0</code> if <code>listA</code> and <code>listB</code> do not intersect.</li><li><code>intersectVal == listA[skipA] == listB[skipB]</code> if <code>listA</code> and <code>listB</code> intersect.</li></ul><p><strong>Follow up:</strong> Could you write a solution that runs in <code>O(m + n)</code> time and use only <code>O(1)</code> memory?</p><h3 id="Chinese-相交链表"><a href="#Chinese-相交链表" class="headerlink" title="Chinese (相交链表)"></a>Chinese (相交链表)</h3><p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 <code>null</code> 。</p><p>图示两个链表在节点 <code>c1</code> 开始相交：</p><pre><code class=" mermaid">graph LRnode_a1((&quot;a1&quot;))node_a2((&quot;a2&quot;))node_b1((&quot;b1&quot;))node_b2((&quot;b2&quot;))node_b3((&quot;b3&quot;))node_c1((&quot;c1&quot;))node_c2((&quot;c2&quot;))node_c3((&quot;c3&quot;))node_a1 ---&gt; node_a2node_b1 ---&gt; node_b2 ---&gt; node_b3node_a2 ---&gt; node_c1node_b3 ---&gt; node_c1node_c1 ---&gt; node_c2 ---&gt; node_c3</code></pre><p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p><p><strong>注意，</strong> 函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p><p><strong>自定义评测：</strong></p><p><strong>评测系统</strong> 的输入如下（你设计的程序 <strong>不适用</strong> 此输入）：</p><ul><li><code>intersectVal</code> - 相交的起始节点的值。如果不存在相交节点，这一值为 0</li><li><code>listA</code> - 第一个链表</li><li><code>listB</code> - 第二个链表</li><li><code>skipA</code> - 在 <code>listA</code> 中（从头节点开始）跳到交叉节点的节点数</li><li><code>skipB</code> - 在 <code>listB</code> 中（从头节点开始）跳到交叉节点的节点数</li></ul><p>评测系统将根据这些输入创建链式数据结构，并将两个头节点 <code>headA</code> 和 <code>headB</code> 传递给你的程序。如果程序能够正确返回相交节点，那么你的解决方案将被 <strong>视作正确答案</strong> 。</p><p><strong>示例 1：</strong></p><pre><code class=" mermaid">graph LRnode_a1((4))node_a2((1))node_b1((5))node_b2((6))node_b3((1))node_c1((8))node_c2((4))node_c3((5))node_a1 ---&gt; node_a2node_b1 ---&gt; node_b2 ---&gt; node_b3node_a2 ---&gt; node_c1node_b3 ---&gt; node_c1node_c1 ---&gt; node_c2 ---&gt; node_c3</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3<br>输出：Intersected at &#x27;8&#x27;<br>解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。<br>从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,6,1,8,4,5]。<br>在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。<br>— 请注意相交节点的值不为 1，因为在链表 A 和链表 B 之中值为 1 的节点 (A 中第二个节点和 B 中第三个节点) 是不同的节点。换句话说，它们在内存中指向两个不同的位置，而链表 A 和链表 B 中值为 8 的节点 (A 中第三个节点，B 中第四个节点) 在内存中指向相同的位置。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><pre><code class=" mermaid">graph LRnode_a1((1))node_a2((9))node_a3((1))node_b1((3))node_c1((2))node_c2((4))node_a1 ---&gt; node_a2 ---&gt; node_a3node_b1node_a3 ---&gt; node_c1node_b1 ---&gt; node_c1node_c1 ---&gt; node_c2</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1<br>输出：Intersected at &#x27;2&#x27;<br>解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。<br>从各自的表头开始算起，链表 A 为 [1,9,1,2,4]，链表 B 为 [3,2,4]。<br>在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><pre><code class=" mermaid">graph LRnode_a1((2))node_a2((6))node_a3((4))node_b1((1))node_b2((5))node_a1 ---&gt; node_a2 ---&gt; node_a3node_b1 ---&gt; node_b2</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2<br>输出：null<br>解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。<br>由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。<br>这两个链表不相交，因此返回 null 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>listA</code> 中节点数目为 <code>m</code></li><li><code>listB</code> 中节点数目为 <code>n</code></li><li><code>1 &lt;= m, n &lt;= 3 * 10^4</code></li><li><code>1 &lt;= Node.val &lt;= 10^5</code></li><li><code>0 &lt;= skipA &lt;= m</code></li><li><code>0 &lt;= skipB &lt;= n</code></li><li>如果 <code>listA</code> 和 <code>listB</code> <code>没有交点，intersectVal</code> 为 <code>0</code></li><li>如果 <code>listA</code> 和 <code>listB</code> 有交点，<code>intersectVal == listA[skipA] == listB[skipB]</code></li></ul><p><strong>进阶：</strong> 你能否设计一个时间复杂度 <code>O(m + n)</code> 、仅用 <code>O(1)</code> 内存的解决方案？</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode* next;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">NULL</span>) &#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(ListNode* headA, ListNode* headB)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (headA == <span class="hljs-literal">nullptr</span> || headB == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        &#125;<br><br>        ListNode *currA = headA, *currB = headB;<br>        <span class="hljs-keyword">while</span> (currA != currB) &#123;<br>            currA = (currA != <span class="hljs-literal">nullptr</span>) ? currA-&gt;next : headB;<br>            currB = (currB != <span class="hljs-literal">nullptr</span>) ? currB-&gt;next : headA;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> currA;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>linked_list</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>linked_list</tag>
      
      <tag>easy</tag>
      
      <tag>two_pointers</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 142 - Linked List Cycle II</title>
    <link href="/Algorithm/LeetCode/LinkedList/LeetCode-142-Linked-List-Cycle-II/"/>
    <url>/Algorithm/LeetCode/LinkedList/LeetCode-142-Linked-List-Cycle-II/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-warning">medium</span></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Linked-List-Cycle-II"><a href="#English-Linked-List-Cycle-II" class="headerlink" title="English (Linked List Cycle II)"></a>English (Linked List Cycle II)</h3><p>Given the <code>head</code> of a linked list, return <em>the node where the cycle begins. If there is no cycle, return <code>null</code></em>.</p><p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the <code>next</code> pointer. Internally, <code>pos</code> is used to denote the index of the node that tail’s <code>next</code> pointer is connected to <strong>(0-indexed)</strong>. It is <code>-1</code> if there is no cycle. <strong>Note that <code>pos</code> is not passed as a parameter</strong>.</p><p><strong>Do not modify</strong> the linked list.</p><p><strong>Example 1:</strong></p><pre><code class=" mermaid">graph LRnode1((3))node2((2))node3((0))node4((&quot;-4&quot;))node1 ---&gt; node2 ---&gt; node3 ---&gt; node4node4 ---&gt; node2</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: head = [3,2,0,-4], pos = 1<br>Output: tail connects to node index 1<br>Explanation: There is a cycle in the linked list, where tail connects to the second node.<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><pre><code class=" mermaid">graph LRnode1((1))node2((2))node1 ---&gt; node2node2 ---&gt; node1</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: head = [1,2], pos = 0<br>Output: tail connects to node index 0<br>Explanation: There is a cycle in the linked list, where tail connects to the first node.<br></code></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><pre><code class=" mermaid">graph LRnode1((1))</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: head = [1], pos = -1<br>Output: no cycle<br>Explanation: There is no cycle in the linked list.<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>The number of the nodes in the list is in the range <code>[0, 10^4]</code>.</li><li><code>-10^5 &lt;= Node.val &lt;= 10^5</code></li><li><code>pos</code> is <code>-1</code> or a <strong>valid index</strong> in the linked-list.</li></ul><p><strong>Follow up:</strong> Can you solve it using <code>O(1)</code> (i.e. constant) memory?</p><h3 id="Chinese-环形链表-II"><a href="#Chinese-环形链表-II" class="headerlink" title="Chinese (环形链表 II)"></a>Chinese (环形链表 II)</h3><p>给定一个链表的头节点 <code>head</code> ，返回链表开始入环的第一个节点。 <em>如果链表无环，则返回 <code>null</code>。</em></p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（<strong>索引从 0 开始</strong>）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p><p><strong>不允许修改</strong> 链表。</p><p><strong>示例 1：</strong></p><pre><code class=" mermaid">graph LRnode1((3))node2((2))node3((0))node4((&quot;-4&quot;))node1 ---&gt; node2 ---&gt; node3 ---&gt; node4node4 ---&gt; node2</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：head = [3,2,0,-4], pos = 1<br>输出：返回索引为 1 的链表节点<br>解释：链表中有一个环，其尾部连接到第二个节点。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><pre><code class=" mermaid">graph LRnode1((1))node2((2))node1 ---&gt; node2node2 ---&gt; node1</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：head = [1,2], pos = 0<br>输出：返回索引为 0 的链表节点<br>解释：链表中有一个环，其尾部连接到第一个节点。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><pre><code class=" mermaid">graph LRnode1((1))</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：head = [1], pos = -1<br>输出：返回 null<br>解释：链表中没有环。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围在范围 <code>[0, 10^4]</code> 内</li><li><code>-10^5 &lt;= Node.val &lt;= 10^5</code></li><li><code>pos</code> 的值为 <code>-1</code> 或者链表中的一个有效索引</li></ul><p><strong>进阶：</strong> 你是否可以使用 <code>O(1)</code> 空间解决此题？</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode* next;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">NULL</span>) &#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">detectCycle</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        ListNode* cycle_node = <span class="hljs-built_in">nodeInCycle</span>(head);<br>        <span class="hljs-keyword">if</span> (cycle_node == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        &#125;<br><br>        ListNode* curr = head;<br>        <span class="hljs-keyword">while</span> (curr != cycle_node) &#123;<br>            curr = curr-&gt;next;<br>            cycle_node = cycle_node-&gt;next;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> curr;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> ListNode* <span class="hljs-title">nodeInCycle</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        ListNode* fast = head;<br>        ListNode* slow = head;<br><br>        <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">nullptr</span> &amp;&amp; fast-&gt;next != <span class="hljs-literal">nullptr</span>) &#123;<br>            slow = slow-&gt;next;<br>            fast = fast-&gt;next-&gt;next;<br><br>            <span class="hljs-keyword">if</span> (slow == fast) &#123;<br>                <span class="hljs-keyword">return</span> fast;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>linked_list</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>linked_list</tag>
      
      <tag>medium</tag>
      
      <tag>two_pointers</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 25 - Reverse Nodes in k-Group</title>
    <link href="/Algorithm/LeetCode/LinkedList/LeetCode-25-Reverse-Nodes-in-k-Group/"/>
    <url>/Algorithm/LeetCode/LinkedList/LeetCode-25-Reverse-Nodes-in-k-Group/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-danger">hard</span></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Reverse-Nodes-in-k-Group"><a href="#English-Reverse-Nodes-in-k-Group" class="headerlink" title="English (Reverse Nodes in k-Group)"></a>English (Reverse Nodes in k-Group)</h3><p>Given the <code>head</code> of a linked list, reverse the nodes of the list <code>k</code> at a time, and return <em>the modified list</em>.</p><p><code>k</code> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <code>k</code> then left-out nodes, in the end, should remain as it is.</p><p>You may not alter the values in the list’s nodes, only nodes themselves may be changed.</p><p><strong>Example 1:</strong></p><pre><code class=" mermaid">graph LRnode11((1))node12((2))node13((3))node14((4))node15((5))node11 ---&gt; node12 ---&gt; node13 ---&gt; node14 ---&gt; node15node21((2))node22((1))node23((4))node24((3))node25((5))node21 ---&gt; node22 ---&gt; node23 ---&gt; node24 ---&gt; node25</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: head = [1,2,3,4,5], k = 2<br>Output: [2,1,4,3,5]<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><pre><code class=" mermaid">graph LRnode11((1))node12((2))node13((3))node14((4))node15((5))node11 ---&gt; node12 ---&gt; node13 ---&gt; node14 ---&gt; node15node21((3))node22((2))node23((1))node24((4))node25((5))node21 ---&gt; node22 ---&gt; node23 ---&gt; node24 ---&gt; node25</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: head = [1,2,3,4,5], k = 3<br>Output: [3,2,1,4,5]<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the list is <code>n</code>.</li><li><code>1 &lt;= k &lt;= n &lt;= 5000</code></li><li><code>0 &lt;= Node.val &lt;= 1000</code></li></ul><p><strong>Follow-up:</strong> Can you solve the problem in O(1) extra memory space?</p><h3 id="Chinese-K-个一组翻转链表"><a href="#Chinese-K-个一组翻转链表" class="headerlink" title="Chinese (K 个一组翻转链表)"></a>Chinese (K 个一组翻转链表)</h3><p>给你链表的头节点 <code>head</code> ，每 <code>k</code> 个节点一组进行翻转，请你返回修改后的链表。</p><p><code>k</code> 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 <code>k</code> 的整数倍，那么请将最后剩余的节点保持原有顺序。</p><p>你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。</p><p><strong>示例 1：</strong></p><pre><code class=" mermaid">graph LRnode11((1))node12((2))node13((3))node14((4))node15((5))node11 ---&gt; node12 ---&gt; node13 ---&gt; node14 ---&gt; node15node21((2))node22((1))node23((4))node24((3))node25((5))node21 ---&gt; node22 ---&gt; node23 ---&gt; node24 ---&gt; node25</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：head = [1,2,3,4,5], k = 2<br>输出：[2,1,4,3,5]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><pre><code class=" mermaid">graph LRnode11((1))node12((2))node13((3))node14((4))node15((5))node11 ---&gt; node12 ---&gt; node13 ---&gt; node14 ---&gt; node15node21((3))node22((2))node23((1))node24((4))node25((5))node21 ---&gt; node22 ---&gt; node23 ---&gt; node24 ---&gt; node25</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：head = [1,2,3,4,5], k = 3<br>输出：[3,2,1,4,5]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中的节点数目为 <code>n</code></li><li><code>1 &lt;= k &lt;= n &lt;= 5000</code></li><li><code>0 &lt;= Node.val &lt;= 1000</code></li></ul><p><strong>进阶：</strong> 你可以设计一个只用 <code>O(1)</code> 额外内存空间的算法解决此问题吗？</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode* next;<br>    <span class="hljs-built_in">ListNode</span>() : <span class="hljs-built_in">val</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x, ListNode* next) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(next) &#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseKGroup</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        ListNode* dummy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>, head);<br><br>        ListNode* lastInPreviousGroup = dummy;<br>        ListNode* firstInCurrentGroup = head;<br>        <span class="hljs-keyword">while</span> (firstInCurrentGroup != <span class="hljs-literal">nullptr</span>) &#123;<br>            ListNode* lastInCurrentGroup = <span class="hljs-built_in">getLastInGroup</span>(firstInCurrentGroup, k);<br>            <span class="hljs-keyword">if</span> (lastInCurrentGroup == <span class="hljs-literal">nullptr</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            ListNode* firstInNextGroup = lastInCurrentGroup-&gt;next;<br><br>            <span class="hljs-comment">// break out the connections with the previous/next group</span><br>            lastInPreviousGroup-&gt;next = <span class="hljs-literal">nullptr</span>;<br>            lastInCurrentGroup-&gt;next = <span class="hljs-literal">nullptr</span>;<br><br>            <span class="hljs-comment">// reverse in group</span><br>            lastInCurrentGroup = firstInCurrentGroup;<br>            firstInCurrentGroup = <span class="hljs-built_in">reverseList</span>(firstInCurrentGroup);<br><br>            <span class="hljs-comment">// resume the connections with the previous/next group</span><br>            lastInPreviousGroup-&gt;next = firstInCurrentGroup;<br>            lastInCurrentGroup-&gt;next = firstInNextGroup;<br><br>            <span class="hljs-comment">// update the pilot pointers</span><br>            lastInPreviousGroup = lastInCurrentGroup;<br>            firstInCurrentGroup = firstInNextGroup;<br>        &#125;<br><br>        head = dummy-&gt;next;<br>        <span class="hljs-keyword">delete</span> dummy;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> ListNode* <span class="hljs-title">moveDistance</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> distance)</span> </span>&#123;<br>        ListNode* curr = head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; distance &amp;&amp; curr != <span class="hljs-literal">nullptr</span>; ++i) &#123;<br>            curr = curr-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> curr;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">static</span> ListNode* <span class="hljs-title">getLastInGroup</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> group_size)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">moveDistance</span>(head, group_size - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">static</span> ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        ListNode* prev = <span class="hljs-literal">nullptr</span>;<br>        ListNode* curr = head;<br>        <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">nullptr</span>) &#123;<br>            ListNode* next = curr-&gt;next;<br>            curr-&gt;next = prev;<br><br>            prev = curr;<br>            curr = next;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> prev;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>linked_list</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>linked_list</tag>
      
      <tag>hard</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 24 - Swap Nodes in Pairs</title>
    <link href="/Algorithm/LeetCode/LinkedList/LeetCode-24-Swap-Nodes-in-Pairs/"/>
    <url>/Algorithm/LeetCode/LinkedList/LeetCode-24-Swap-Nodes-in-Pairs/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-warning">medium</span></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Swap-Nodes-in-Pairs"><a href="#English-Swap-Nodes-in-Pairs" class="headerlink" title="English (Swap Nodes in Pairs)"></a>English (Swap Nodes in Pairs)</h3><p>Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list’s nodes (i.e., only nodes themselves may be changed.)</p><p><strong>Example 1:</strong></p><pre><code class=" mermaid">graph LRnode11((1))node12((2))node13((3))node14((4))node11 ---&gt; node12 ---&gt; node13 ---&gt; node14node21((2))node22((1))node23((4))node24((3))node21 ---&gt; node22 ---&gt; node23 ---&gt; node24</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: head = [1,2,3,4]<br>Output: [2,1,4,3]<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: head = []<br>Output: []<br></code></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: head = [1]<br>Output: [1]<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the list is in the range <code>[0, 100]</code>.</li><li><code>0 &lt;= Node.val &lt;= 100</code></li></ul><h3 id="Chinese-两两交换链表中的节点"><a href="#Chinese-两两交换链表中的节点" class="headerlink" title="Chinese (两两交换链表中的节点)"></a>Chinese (两两交换链表中的节点)</h3><p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p><p><strong>示例 1：</strong></p><pre><code class=" mermaid">graph LRnode11((1))node12((2))node13((3))node14((4))node11 ---&gt; node12 ---&gt; node13 ---&gt; node14node21((2))node22((1))node23((4))node24((3))node21 ---&gt; node22 ---&gt; node23 ---&gt; node24</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：head = [1,2,3,4]<br>输出：[2,1,4,3]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：head = []<br>输出：[]<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：head = [1]<br>输出：[1]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目在范围 <code>[0, 100]</code> 内</li><li><code>0 &lt;= Node.val &lt;= 100</code></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode* next;<br>    <span class="hljs-built_in">ListNode</span>() : <span class="hljs-built_in">val</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x, ListNode* next) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(next) &#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">swapPairs</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        ListNode* dummy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>, head);<br><br>        ListNode* curr = dummy;<br>        <span class="hljs-keyword">while</span> (curr-&gt;next != <span class="hljs-literal">nullptr</span> &amp;&amp; curr-&gt;next-&gt;next != <span class="hljs-literal">nullptr</span>) &#123;<br>            ListNode* first = curr-&gt;next;<br>            ListNode* second = curr-&gt;next-&gt;next;<br>            ListNode* next_pair = curr-&gt;next-&gt;next-&gt;next;<br><br>            curr-&gt;next = second;<br>            second-&gt;next = first;<br>            first-&gt;next = next_pair;<br><br>            curr = first;<br>        &#125;<br><br>        head = dummy-&gt;next;<br>        <span class="hljs-keyword">delete</span> dummy;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>linked_list</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>linked_list</tag>
      
      <tag>medium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 141 - Linked List Cycle</title>
    <link href="/Algorithm/LeetCode/LinkedList/LeetCode-141-Linked-List-Cycle/"/>
    <url>/Algorithm/LeetCode/LinkedList/LeetCode-141-Linked-List-Cycle/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-success">easy</span></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Linked-List-Cycle"><a href="#English-Linked-List-Cycle" class="headerlink" title="English (Linked List Cycle)"></a>English (Linked List Cycle)</h3><p>Given <code>head</code>, the head of a linked list, determine if the linked list has a cycle in it.</p><p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the <code>next</code> pointer. Internally, <code>pos</code> is used to denote the index of the node that tail’s <code>next</code> pointer is connected to. <strong>Note that <code>pos</code> is not passed as a parameter.</strong></p><p>Return <code>true</code> <em>if there is a cycle in the linked list</em>. Otherwise, return <code>false</code>.</p><p><strong>Example 1:</strong></p><pre><code class=" mermaid">graph LRnode1((3))node2((2))node3((0))node4((&quot;-4&quot;))node1 ---&gt; node2 ---&gt; node3 ---&gt; node4node4 ---&gt; node2</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: head = [3,2,0,-4], pos = 1<br>Output: true<br>Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><pre><code class=" mermaid">graph LRnode1((1))node2((2))node1 ---&gt; node2node2 ---&gt; node1</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: head = [1,2], pos = 0<br>Output: true<br>Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.<br></code></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><pre><code class=" mermaid">graph LRnode1((1))</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: head = [1], pos = -1<br>Output: false<br>Explanation: There is no cycle in the linked list.<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>The number of the nodes in the list is in the range <code>[0, 10^4]</code>.</li><li><code>-10^5 &lt;= Node.val &lt;= 10^5</code></li><li><code>pos</code> is <code>-1</code> or a <strong>valid index</strong> in the linked-list.</li></ul><p><strong>Follow up:</strong> Can you solve it using <code>O(1)</code> (i.e. constant) memory?</p><h3 id="Chinese-环形链表"><a href="#Chinese-环形链表" class="headerlink" title="Chinese (环形链表)"></a>Chinese (环形链表)</h3><p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。</p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。<strong>注意：pos 不作为参数进行传递。</strong> 仅仅是为了标识链表的实际情况。</p><p>如果链表中存在环 ，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><pre><code class=" mermaid">graph LRnode1((3))node2((2))node3((0))node4((&quot;-4&quot;))node1 ---&gt; node2 ---&gt; node3 ---&gt; node4node4 ---&gt; node2</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：head = [3,2,0,-4], pos = 1<br>输出：true<br>解释：链表中有一个环，其尾部连接到第二个节点。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><pre><code class=" mermaid">graph LRnode1((1))node2((2))node1 ---&gt; node2node2 ---&gt; node1</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：head = [1,2], pos = 0<br>输出：true<br>解释：链表中有一个环，其尾部连接到第一个节点。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><pre><code class=" mermaid">graph LRnode1((1))</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：head = [1], pos = -1<br>输出：false<br>解释：链表中没有环。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围是 <code>[0, 10^4]</code></li><li><code>10^5 &lt;= Node.val &lt;= 10^5</code></li><li><code>pos</code> 为 <code>-1</code> 或者链表中的一个 <strong>有效索引</strong> 。</li></ul><p><strong>进阶：</strong> 你能用 <code>O(1)</code>（即，常量）内存解决此问题吗？</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode* next;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">hasCycle</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        ListNode* fast = head;<br>        ListNode* slow = head;<br><br>        <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">nullptr</span> &amp;&amp; fast-&gt;next != <span class="hljs-literal">nullptr</span>) &#123;<br>            slow = slow-&gt;next;<br>            fast = fast-&gt;next-&gt;next;<br><br>            <span class="hljs-keyword">if</span> (slow == fast) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>linked_list</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>linked_list</tag>
      
      <tag>easy</tag>
      
      <tag>two_pointers</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 21 - Merge Two Sorted Lists</title>
    <link href="/Algorithm/LeetCode/LinkedList/LeetCode-21-Merge-Two-Sorted-Lists/"/>
    <url>/Algorithm/LeetCode/LinkedList/LeetCode-21-Merge-Two-Sorted-Lists/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-success">easy</span></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Merge-Two-Sorted-Lists"><a href="#English-Merge-Two-Sorted-Lists" class="headerlink" title="English (Merge Two Sorted Lists)"></a>English (Merge Two Sorted Lists)</h3><p>You are given the heads of two sorted linked lists <code>list1</code> and <code>list2</code>.</p><p>Merge the two lists in a one <strong>sorted</strong> list. The list should be made by splicing together the nodes of the first two lists.</p><p>Return <em>the head of the merged linked list</em>.</p><p><strong>Example 1:</strong></p><pre><code class=" mermaid">graph LRnode11((1))node12((2))node13((4))node11 -----&gt; node12 -----&gt; node13node21((1))node22((3))node23((4))node21 -------&gt; node22 -----&gt; node23node31((1))node32((1))node33((2))node34((3))node35((4))node36((4))node31 ---&gt; node32 ---&gt; node33 ---&gt; node34 ---&gt; node35 ---&gt; node36</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: list1 = [1,2,4], list2 = [1,3,4]<br>Output: [1,1,2,3,4,4]<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: list1 = [], list2 = []<br>Output: []<br></code></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: list1 = [], list2 = [0]<br>Output: [0]<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>The number of nodes in both lists is in the range <code>[0, 50]</code>.</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li><li>Both <code>list1</code> and <code>list2</code> are sorted in <strong>non-decreasing</strong> order.</li></ul><h3 id="Chinese-合并两个有序链表"><a href="#Chinese-合并两个有序链表" class="headerlink" title="Chinese (合并两个有序链表)"></a>Chinese (合并两个有序链表)</h3><p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p><p><strong>示例 1：</strong></p><pre><code class=" mermaid">graph LRnode11((1))node12((2))node13((4))node11 -----&gt; node12 -----&gt; node13node21((1))node22((3))node23((4))node21 -------&gt; node22 -----&gt; node23node31((1))node32((1))node33((2))node34((3))node35((4))node36((4))node31 ---&gt; node32 ---&gt; node33 ---&gt; node34 ---&gt; node35 ---&gt; node36</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：l1 = [1,2,4], l2 = [1,3,4]<br>输出：[1,1,2,3,4,4]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：l1 = [], l2 = []<br>输出：[]<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：l1 = [], l2 = [0]<br>输出：[0]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>两个链表的节点数目范围是 <code>[0, 50]</code></li><li><code>-100 &lt;= Node.val &lt;= 100</code></li><li><code>l1</code> 和 <code>l2</code> 均按 <strong>非递减顺序</strong> 排列</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode* next;<br>    <span class="hljs-built_in">ListNode</span>() : <span class="hljs-built_in">val</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x, ListNode* next) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(next) &#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(ListNode* list1, ListNode* list2)</span> </span>&#123;<br>        ListNode* dummy = <span class="hljs-keyword">new</span> ListNode;<br><br>        ListNode* last = dummy;<br>        <span class="hljs-keyword">while</span> (list1 != <span class="hljs-literal">nullptr</span> &amp;&amp; list2 != <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">if</span> (list1-&gt;val &lt;= list2-&gt;val) &#123;<br>                last-&gt;next = list1;<br>                list1 = list1-&gt;next;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                last-&gt;next = list2;<br>                list2 = list2-&gt;next;<br>            &#125;<br><br>            last = last-&gt;next;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (list1 != <span class="hljs-literal">nullptr</span>) &#123;<br>            last-&gt;next = list1;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (list2 != <span class="hljs-literal">nullptr</span>) &#123;<br>            last-&gt;next = list2;<br>        &#125;<br><br>        ListNode* head = dummy-&gt;next;<br>        <span class="hljs-keyword">delete</span> dummy;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>linked_list</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>linked_list</tag>
      
      <tag>easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 19 - Remove Nth Node From End of List</title>
    <link href="/Algorithm/LeetCode/LinkedList/LeetCode-19-Remove-Nth-Node-From-End-of-List/"/>
    <url>/Algorithm/LeetCode/LinkedList/LeetCode-19-Remove-Nth-Node-From-End-of-List/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-warning">medium</span></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Remove-Nth-Node-From-End-of-List"><a href="#English-Remove-Nth-Node-From-End-of-List" class="headerlink" title="English (Remove Nth Node From End of List)"></a>English (Remove Nth Node From End of List)</h3><p>Given the <code>head</code> of a linked list, remove the <code>nth</code> node from the end of the list and return its head.</p><p><strong>Example 1:</strong></p><pre><code class=" mermaid">graph LRnode11((1))node12((2))node13((3))node14((4))node15((5))node11 ---&gt; node12 ---&gt; node13 ---&gt; node14 ---&gt; node15node21((1))node22((2))node23((3))node25((5))node21 ---&gt; node22 ---&gt; node23 -----&gt; node25</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: head = [1,2,3,4,5], n = 2<br>Output: [1,2,3,5]<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: head = [1], n = 1<br>Output: []<br></code></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: head = [1,2], n = 1<br>Output: [1]<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the list is <code>sz</code>.</li><li><code>1 &lt;= sz &lt;= 30</code></li><li><code>0 &lt;= Node.val &lt;= 100</code></li><li><code>1 &lt;= n &lt;= sz</code></li></ul><p><strong>Follow up:</strong> Could you do this in one pass?</p><h3 id="Chinese-删除链表的倒数第-N-个结点"><a href="#Chinese-删除链表的倒数第-N-个结点" class="headerlink" title="Chinese (删除链表的倒数第 N 个结点)"></a>Chinese (删除链表的倒数第 N 个结点)</h3><p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。</p><p><strong>示例 1：</strong></p><pre><code class=" mermaid">graph LRnode11((1))node12((2))node13((3))node14((4))node15((5))node11 ---&gt; node12 ---&gt; node13 ---&gt; node14 ---&gt; node15node21((1))node22((2))node23((3))node25((5))node21 ---&gt; node22 ---&gt; node23 -----&gt; node25</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：head = [1,2,3,4,5], n = 2<br>输出：[1,2,3,5]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：head = [1], n = 1<br>输出：[]<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：head = [1,2], n = 1<br>输出：[1]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中结点的数目为 <code>sz</code></li><li><code>1 &lt;= sz &lt;= 30</code></li><li><code>0 &lt;= Node.val &lt;= 100</code></li><li><code>1 &lt;= n &lt;= sz</code></li></ul><p><strong>进阶：</strong> 你能尝试使用一趟扫描实现吗？</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode* next;<br>    <span class="hljs-built_in">ListNode</span>() : <span class="hljs-built_in">val</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x, ListNode* next) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(next) &#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>        ListNode* last = head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            last = last-&gt;next;<br>        &#125;<br><br>        ListNode* dummy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>, head);<br>        ListNode* prev = dummy;<br>        ListNode* curr = head;<br>        <span class="hljs-keyword">while</span> (last != <span class="hljs-literal">nullptr</span>) &#123;<br>            prev = prev-&gt;next;<br>            curr = curr-&gt;next;<br>            last = last-&gt;next;<br>        &#125;<br><br>        prev-&gt;next = curr-&gt;next;<br>        <span class="hljs-keyword">delete</span> curr;<br><br>        head = dummy-&gt;next;<br>        <span class="hljs-keyword">delete</span> dummy;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>linked_list</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>linked_list</tag>
      
      <tag>medium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 206 - Reverse Linked List</title>
    <link href="/Algorithm/LeetCode/LinkedList/LeetCode-206-Reverse-Linked-List/"/>
    <url>/Algorithm/LeetCode/LinkedList/LeetCode-206-Reverse-Linked-List/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-success">easy</span></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Reverse-Linked-List"><a href="#English-Reverse-Linked-List" class="headerlink" title="English (Reverse Linked List)"></a>English (Reverse Linked List)</h3><p>Given the <code>head</code> of a singly linked list, reverse the list, and return the reversed list.</p><p><strong>Example 1:</strong></p><pre><code class=" mermaid">graph LRnode11((1))node12((2))node13((3))node14((4))node15((5))node11 ---&gt; node12 ---&gt; node13 ---&gt; node14 ---&gt; node15node21((5))node22((4))node23((3))node24((2))node25((1))node21 ---&gt; node22 ---&gt; node23 ---&gt; node24 ---&gt; node25</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: head = [1,2,3,4,5]<br>Output: [5,4,3,2,1]<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><pre><code class=" mermaid">graph LRnode11((1))node12((2))node11 ---&gt; node12node21((2))node22((1))node21 ---&gt; node22</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: head = [1,2]<br>Output: [2,1]<br></code></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: head = []<br>Output: []<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the list is the range <code>[0, 5000]</code>.</li><li><code>-5000 &lt;= Node.val &lt;= 5000</code></li></ul><p><strong>Follow up:</strong> A linked list can be reversed either <strong>iteratively</strong> or <strong>recursively</strong>. Could you implement both?</p><h3 id="Chinese-反转链表"><a href="#Chinese-反转链表" class="headerlink" title="Chinese (反转链表)"></a>Chinese (反转链表)</h3><p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。</p><p><strong>示例 1：</strong></p><pre><code class=" mermaid">graph LRnode11((1))node12((2))node13((3))node14((4))node15((5))node11 ---&gt; node12 ---&gt; node13 ---&gt; node14 ---&gt; node15node21((5))node22((4))node23((3))node24((2))node25((1))node21 ---&gt; node22 ---&gt; node23 ---&gt; node24 ---&gt; node25</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：head = [1,2,3,4,5]<br>输出：[5,4,3,2,1]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><pre><code class=" mermaid">graph LRnode11((1))node12((2))node11 ---&gt; node12node21((2))node22((1))node21 ---&gt; node22</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：head = [1,2]<br>输出：[2,1]<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：head = []<br>输出：[]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围是 <code>[0, 5000]</code></li><li><code>-5000 &lt;= Node.val &lt;= 5000</code></li></ul><p><strong>进阶：</strong> 链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Iterative"><a href="#Iterative" class="headerlink" title="Iterative"></a>Iterative</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode* next;<br>    <span class="hljs-built_in">ListNode</span>() : <span class="hljs-built_in">val</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x, ListNode* next) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(next) &#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        ListNode* prev = <span class="hljs-literal">nullptr</span>;<br>        ListNode* curr = head;<br>        <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">nullptr</span>) &#123;<br>            ListNode* next = curr-&gt;next;<br>            curr-&gt;next = prev;<br><br>            prev = curr;<br>            curr = next;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> prev;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Recursive"><a href="#Recursive" class="headerlink" title="Recursive"></a>Recursive</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode* next;<br>    <span class="hljs-built_in">ListNode</span>() : <span class="hljs-built_in">val</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x, ListNode* next) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(next) &#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">nullptr</span> || head-&gt;next == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br><br>        ListNode* next_tail = head-&gt;next;<br>        ListNode* next_head = <span class="hljs-built_in">reverseList</span>(head-&gt;next);<br>        next_tail-&gt;next = head;<br>        head-&gt;next = <span class="hljs-literal">nullptr</span>;<br><br>        <span class="hljs-keyword">return</span> next_head;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>linked_list</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>linked_list</tag>
      
      <tag>easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 2 - Add Two Numbers</title>
    <link href="/Algorithm/LeetCode/LinkedList/LeetCode-2-Add-Two-Numbers/"/>
    <url>/Algorithm/LeetCode/LinkedList/LeetCode-2-Add-Two-Numbers/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-warning">medium</span></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Add-Two-Numbers"><a href="#English-Add-Two-Numbers" class="headerlink" title="English (Add Two Numbers)"></a>English (Add Two Numbers)</h3><p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong>, and each of their nodes contains a single digit. Add the two numbers and return the sumas a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><p><strong>Example 1:</strong></p><pre><code class=" mermaid">graph LRnode11((2))node12((4))node13((3))node11 ---&gt; node12 ---&gt; node13node21((5))node22((6))node23((4))node21 ---&gt; node22 ---&gt; node23node31((7))node32((0))node33((8))node31 ---&gt; node32 ---&gt; node33</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: l1 = [2,4,3], l2 = [5,6,4]<br>Output: [7,0,8]<br>Explanation: 342 + 465 = 807.<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: l1 = [0], l2 = [0]<br>Output: [0]<br></code></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]<br>Output: [8,9,9,9,0,0,0,1]<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>The number of nodes in each linked list is in the range <code>[1, 100]</code>.</li><li><code>0 &lt;= Node.val &lt;= 9</code></li><li>It is guaranteed that the list represents a number that does not have leading zeros.</li></ul><h3 id="Chinese-两数相加"><a href="#Chinese-两数相加" class="headerlink" title="Chinese (两数相加)"></a>Chinese (两数相加)</h3><p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p><strong>示例 1：</strong></p><pre><code class=" mermaid">graph LRnode11((2))node12((4))node13((3))node11 ---&gt; node12 ---&gt; node13node21((5))node22((6))node23((4))node21 ---&gt; node22 ---&gt; node23node31((7))node32((0))node33((8))node31 ---&gt; node32 ---&gt; node33</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：l1 = [2,4,3], l2 = [5,6,4]<br>输出：[7,0,8]<br>解释：342 + 465 = 807.<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：l1 = [0], l2 = [0]<br>输出：[0]<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]<br>输出：[8,9,9,9,0,0,0,1]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>每个链表中的节点数在范围 <code>[1, 100]</code> 内</li><li><code>0 &lt;= Node.val &lt;= 9</code></li><li>题目数据保证列表表示的数字不含前导零</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode* next;<br>    <span class="hljs-built_in">ListNode</span>() : <span class="hljs-built_in">val</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x, ListNode* next) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(next) &#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span> </span>&#123;<br>        ListNode* dummy = <span class="hljs-keyword">new</span> ListNode;<br>        ListNode* last = dummy;<br>        <span class="hljs-type">int</span> carry = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span> (l1 != <span class="hljs-literal">nullptr</span> &amp;&amp; l2 != <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-type">int</span> sum = l1-&gt;val + l2-&gt;val + carry;<br>            last-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(sum % <span class="hljs-number">10</span>);<br>            carry = sum / <span class="hljs-number">10</span>;<br><br>            l1 = l1-&gt;next;<br>            l2 = l2-&gt;next;<br>            last = last-&gt;next;<br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (l1 != <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-type">int</span> sum = l1-&gt;val + carry;<br>            last-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(sum % <span class="hljs-number">10</span>);<br>            carry = sum / <span class="hljs-number">10</span>;<br><br>            l1 = l1-&gt;next;<br>            last = last-&gt;next;<br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (l2 != <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-type">int</span> sum = l2-&gt;val + carry;<br>            last-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(sum % <span class="hljs-number">10</span>);<br>            carry = sum / <span class="hljs-number">10</span>;<br><br>            l2 = l2-&gt;next;<br>            last = last-&gt;next;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (carry &gt; <span class="hljs-number">0</span>) &#123;<br>            last-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(carry);<br>            last = last-&gt;next;<br>        &#125;<br><br>        ListNode* head = dummy-&gt;next;<br>        <span class="hljs-keyword">delete</span> dummy;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>linked_list</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>linked_list</tag>
      
      <tag>medium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 1402 - Reducing Dishes</title>
    <link href="/Algorithm/LeetCode/DynamicProgramming/LeetCode-1402-Reducing-Dishes/"/>
    <url>/Algorithm/LeetCode/DynamicProgramming/LeetCode-1402-Reducing-Dishes/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-danger">hard</span></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Reducing-Dishes"><a href="#English-Reducing-Dishes" class="headerlink" title="English (Reducing Dishes)"></a>English (Reducing Dishes)</h3><p>A chef has collected data on the <code>satisfaction</code> level of his <code>n</code> dishes. Chef can cook any dish in 1 unit of time.</p><p><strong>Like-time coefficient</strong> of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level i.e. <code>time[i] * satisfaction[i]</code>.</p><p>Return <em>the maximum sum of <strong>like-time coefficient</strong> that the chef can obtain after dishes preparation</em>.</p><p>Dishes can be prepared in <strong>any</strong> order and the chef can discard some dishes to get this maximum value.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: satisfaction = [-1,-8,0,5,-9]<br>Output: 14<br>Explanation: After Removing the second and last dish, the maximum total like-time coefficient will be equal to (-1*1 + 0*2 + 5*3 = 14).<br>Each dish is prepared in one unit of time.<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: satisfaction = [4,3,2]<br>Output: 20<br>Explanation: Dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20)<br></code></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: satisfaction = [-1,-4,-5]<br>Output: 0<br>Explanation: People do not like the dishes. No dish is prepared.<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>n == satisfaction.length</code></li><li><code>1 &lt;= n &lt;= 500</code></li><li><code>-1000 &lt;= satisfaction[i] &lt;= 1000</code></li></ul><h3 id="Chinese-做菜顺序"><a href="#Chinese-做菜顺序" class="headerlink" title="Chinese (做菜顺序)"></a>Chinese (做菜顺序)</h3><p>一个厨师收集了他 <code>n</code> 道菜的满意程度 <code>satisfaction</code> ，这个厨师做出每道菜的时间都是 1 单位时间。</p><p>一道菜的 「喜爱时间」系数定义为烹饪这道菜以及之前每道菜所花费的时间乘以这道菜的满意程度，也就是 <code>time[i]*satisfaction[i]</code> 。</p><p>请你返回做完所有菜 「喜爱时间」总和的最大值为多少。</p><p>你可以按 <strong>任意</strong> 顺序安排做菜的顺序，你也可以选择放弃做某些菜来获得更大的总和。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：satisfaction = [-1,-8,0,5,-9]<br>输出：14<br>解释：去掉第二道和最后一道菜，最大的喜爱时间系数和为 (-1*1 + 0*2 + 5*3 = 14) 。每道菜都需要花费 1 单位时间完成。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：satisfaction = [4,3,2]<br>输出：20<br>解释：按照原来顺序相反的时间做菜 (2*1 + 3*2 + 4*3 = 20)<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：satisfaction = [-1,-4,-5]<br>输出：0<br>解释：大家都不喜欢这些菜，所以不做任何菜可以获得最大的喜爱时间系数。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == satisfaction.length</code></li><li><code>1 &lt;= n &lt;= 500</code></li><li><code>-1000 &lt;= satisfaction[i] &lt;= 1000</code></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Greedy-Algorithm-x2F-Dynamic-Programming"><a href="#Greedy-Algorithm-x2F-Dynamic-Programming" class="headerlink" title="Greedy Algorithm &#x2F; Dynamic Programming(?)"></a>Greedy Algorithm &#x2F; Dynamic Programming(?)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxSatisfaction</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; satisfactions)</span> </span>&#123;<br>        <span class="hljs-built_in">sort</span>(satisfactions.<span class="hljs-built_in">begin</span>(), satisfactions.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;());  <span class="hljs-comment">// from larger to less</span><br><br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> satisfaction : satisfactions) &#123;<br>            sum += satisfaction;<br>            <span class="hljs-keyword">if</span> (sum &lt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            res += sum;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>dynamic_programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>greedy_algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>hard</tag>
      
      <tag>dynamic_programming</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>A Solution for Collection by Unique Elements with Custom Tolerance</title>
    <link href="/SystemDesign/A-Solution-for-Collection-by-Unique-Elements-with-Custom-Tolerance/"/>
    <url>/SystemDesign/A-Solution-for-Collection-by-Unique-Elements-with-Custom-Tolerance/</url>
    
    <content type="html"><![CDATA[<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>Suppose there were such a scenario - we need to put mutiple points into a collection which contains unique points. The form of point is its coordinates <code>(x, y)</code>. The type of coordinate is <code>double</code>.</p><p>Note that we treat two points whose coordinates are close to each other as the same point. Coordinate close means within a certain tolerance. In different cases, we need to support custom tolerance which means that <strong>it’s a run-time value rather than compile-time value</strong>.</p><p>For example, with a tolerance of <code>1e-7</code>, we consider a point <code>(1.0000000000, 2.0000000000)</code> and another point <code>(1.0000000001, 2.0000000001)</code> to be the same point. If they were added separately to the collection, the size of the collection would be <code>1</code>.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="std-unordered-set"><a href="#std-unordered-set" class="headerlink" title="std::unordered_set?"></a><code>std::unordered_set</code>?</h3><p>Imagine we use <code>std::unordered_set&lt;Point&gt;</code> to handle this problem. How to implement the hash function for the data structure <code>Point</code>? No matter how small the difference between double values, their hash values can be very different. It’s not easy to ensure that close double values have consistent hash values.</p><h3 id="std-set"><a href="#std-set" class="headerlink" title="std::set?"></a><code>std::set</code>?</h3><p>Imagine we use <code>std::set&lt;Point&gt;</code> to handle this problem. How to write a comparator for <code>Point</code> in <code>std::set</code>?</p><p>Don’t forget that we also need to support custom tolerance.</p><p>Template with double can be considered, but it’s a C++20 feature and more importantly it only supports compile-time values.</p><p>There is an elegant solution - that is lambda as comparator with capturing tolerance as follows:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-type">double</span> a;<br>    <span class="hljs-type">double</span> b;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">double</span> tolerance = <span class="hljs-number">1e-7</span>;<br>    <span class="hljs-keyword">auto</span> point_cmp = [tolerance](<span class="hljs-type">const</span> Point&amp; lhs, <span class="hljs-type">const</span> Point&amp; rhs) -&gt; <span class="hljs-type">bool</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(lhs.a - rhs.a) &lt; tolerance &amp;&amp; <span class="hljs-built_in">abs</span>(lhs.b - rhs.b) &lt; tolerance) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> lhs.a &lt; rhs.a &amp;&amp; lhs.b &lt; rhs.b;<br>    &#125;;<br><br>    <span class="hljs-function">std::set&lt;Point, <span class="hljs-title">decltype</span><span class="hljs-params">(point_cmp)</span>&gt; <span class="hljs-title">s</span><span class="hljs-params">(point_cmp)</span></span>;<br>    s.<span class="hljs-built_in">insert</span>(Point&#123;<span class="hljs-number">1.0000000000</span>, <span class="hljs-number">2.0000000000</span>&#125;);<br>    s.<span class="hljs-built_in">insert</span>(Point&#123;<span class="hljs-number">1.0000000001</span>, <span class="hljs-number">2.0000000001</span>&#125;);<br>    std::cout &lt;&lt; s.<span class="hljs-built_in">size</span>() &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>std::set/map</code> requires that comparators should be with weak strict ordering. For two value <code>x</code> and <code>y</code>, if <code>!(x &lt; y) &amp;&amp; !(y &lt; x) == true</code>, we can consider them equal.<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[容器比较器的严格弱序约束](https://zhuanlan.zhihu.com/p/378294506)">[1]</span></a></sup></p><p>If their difference are within tolerance, the comparator should return false directly.</p><h3 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h3><p>However, how to transfer such sets of such type to a function?</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pass_set</span><span class="hljs-params">(<span class="hljs-type">const</span> std::set&lt;Point, ???&gt;&amp; point_set)</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>After all, we can’t spell the real type of a lambda function.</p><p>Of course, we can use <code>auto</code> to run:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pass_set</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; s)</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>But its readability is bad and <code>auto</code> has no constraint. We can’t clarify what we actually is a <code>std::set&lt;Point, ...&gt;</code>. If we use <em>concept</em>, it seems that we take lots of efforts away from our work.</p><p>The solution to fix it is very simple. We all know lambda is just a anonymous functor that overloads the <code>operator()</code> function. And we have no idea to spell such anonymous functor. Therefore, the direction is clear - that is to make it a named functor. :)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">PointCMP</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">PointCMP</span><span class="hljs-params">(<span class="hljs-type">double</span> tolerance)</span> : m_tolerance(tolerance) &#123;</span>&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">const</span> Point&amp; lhs, <span class="hljs-type">const</span> Point&amp; rhs)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(lhs.a - rhs.a) &lt; m_tolerance &amp;&amp; <span class="hljs-built_in">abs</span>(lhs.b - rhs.b) &lt; m_tolerance) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> lhs.a &lt; rhs.a &amp;&amp; lhs.b &lt; rhs.b;<br>    &#125;;<br><br>    <span class="hljs-type">double</span> m_tolerance;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pass_set</span><span class="hljs-params">(<span class="hljs-type">const</span> std::set&lt;Point, PointCMP&gt;&amp; point_set)</span> </span>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">double</span> tolerance_1 = <span class="hljs-number">1e-7</span>;<br>    PointCMP point_cmp&#123;tolerance_1&#125;;<br>    <span class="hljs-function">std::set&lt;Point, PointCMP&gt; <span class="hljs-title">s</span><span class="hljs-params">(point_cmp)</span></span>;<br>    <span class="hljs-built_in">pass_set</span>(s);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Actually, it also supports to change the tolerance for the same set within the the process of use. It not only implements the functionality of comparator but also supports variable custom tolerance.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">double</span> tolerance_1 = <span class="hljs-number">1e-7</span>;<br>    PointCMP cmp_1&#123;tolerance_1&#125;;<br>    <span class="hljs-function">std::set&lt;Point, PointCMP&gt; <span class="hljs-title">s</span><span class="hljs-params">(cmp_1)</span></span>;<br><br>    <span class="hljs-comment">// processing</span><br><br>    <span class="hljs-type">double</span> tolerance_2 = <span class="hljs-number">1e-5</span>;<br>    PointCMP cmp_2&#123;tolerance_2&#125;;<br>    s = std::<span class="hljs-built_in">set</span>&lt;Point, PointCMP&gt;(cmp_2);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><section class="footnotes"><h2>References</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/378294506">容器比较器的严格弱序约束</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>system_design</category>
      
    </categories>
    
    
    <tags>
      
      <tag>system_design</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 131 - Palindrome Partitioning</title>
    <link href="/Algorithm/LeetCode/Backtracking/LeetCode-131-Palindrome-Partitioning/"/>
    <url>/Algorithm/LeetCode/Backtracking/LeetCode-131-Palindrome-Partitioning/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-warning">medium</span></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Palindrome-Partitioning"><a href="#English-Palindrome-Partitioning" class="headerlink" title="English (Palindrome Partitioning)"></a>English (Palindrome Partitioning)</h3><p>Given a string <code>s</code>, partition <code>s</code> such that every substring of the partition is a <strong>palindrome</strong>. Return <em>all possible palindrome partitioning of <code>s</code></em>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: s = &quot;aab&quot;<br>Output: [[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;],[&quot;aa&quot;,&quot;b&quot;]]<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: s = &quot;a&quot;<br>Output: [[&quot;a&quot;]]<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 16</code></li><li><code>s</code> contains only lowercase English letters.</li></ul><h3 id="Chinese-分割回文串"><a href="#Chinese-分割回文串" class="headerlink" title="Chinese (分割回文串)"></a>Chinese (分割回文串)</h3><p>给你一个字符串 <code>s</code>，请你将 <code>s</code> 分割成一些子串，使每个子串都是 <strong>回文串</strong> 。返回 <code>s</code> 所有可能的分割方案。</p><p><strong>回文串</strong> 是正着读和反着读都一样的字符串。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：s = &quot;aab&quot;<br>输出：[[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;],[&quot;aa&quot;,&quot;b&quot;]]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：s = &quot;a&quot;<br>输出：[[&quot;a&quot;]]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 16</code></li><li><code>s</code> 仅由小写英文字母组成</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;string&gt;&gt; <span class="hljs-built_in">partition</span>(string s) &#123;<br>        vector&lt;vector&lt;string&gt;&gt; res;<br>        vector&lt;string&gt; temp;<br>        <span class="hljs-built_in">backtracking</span>(res, temp, s, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">backtracking</span><span class="hljs-params">(vector&lt;vector&lt;string&gt;&gt;&amp; res, vector&lt;string&gt;&amp; cur, <span class="hljs-type">const</span> string&amp; s, <span class="hljs-type">int</span> start_index)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span> (start_index &gt;= n) &#123;<br>            res.<span class="hljs-built_in">push_back</span>(cur);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> end_index = start_index; end_index &lt; n; ++end_index) &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">is_palindrome</span>(s, start_index, end_index)) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// is palindrome</span><br>            cur.<span class="hljs-built_in">push_back</span>(s.<span class="hljs-built_in">substr</span>(start_index, end_index - start_index + <span class="hljs-number">1</span>));<br>            <span class="hljs-built_in">backtracking</span>(res, cur, s, end_index + <span class="hljs-number">1</span>);<br>            cur.<span class="hljs-built_in">pop_back</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title">is_palindrome</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; s, <span class="hljs-type">int</span> start_index, <span class="hljs-type">int</span> end_index)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = start_index, j = end_index; i &lt; j; ++i, --j) &#123;<br>            <span class="hljs-keyword">if</span> (s[i] != s[j]) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>backtracking</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>medium</tag>
      
      <tag>backtracking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>A Simple Implementation of Thread Pool</title>
    <link href="/SystemDesign/A-Simple-Implementation-of-Thread-Pool/"/>
    <url>/SystemDesign/A-Simple-Implementation-of-Thread-Pool/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;atomic&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;condition_variable&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;exception&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;future&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mutex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPool</span> <span class="hljs-keyword">final</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">ThreadPool</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span></span>;<br>    ~<span class="hljs-built_in">ThreadPool</span>() <span class="hljs-keyword">noexcept</span>;<br><br>    <span class="hljs-built_in">ThreadPool</span>(<span class="hljs-type">const</span> ThreadPool&amp;) = <span class="hljs-keyword">delete</span>;<br>    ThreadPool&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> ThreadPool&amp;) = <span class="hljs-keyword">delete</span>;<br>    <span class="hljs-built_in">ThreadPool</span>(ThreadPool&amp;&amp;) <span class="hljs-keyword">noexcept</span> = <span class="hljs-keyword">delete</span>;<br>    ThreadPool&amp; <span class="hljs-keyword">operator</span>=(ThreadPool&amp;&amp;) <span class="hljs-keyword">noexcept</span> = <span class="hljs-keyword">delete</span>;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Callable, <span class="hljs-keyword">typename</span>... Args&gt;<br>    <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">commit</span><span class="hljs-params">(Callable&amp;&amp; f, Args... args)</span> -&gt; std::future&lt;<span class="hljs-title">decltype</span><span class="hljs-params">(f(args...))</span>&gt;</span>;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add_thread</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">using</span> Task = std::function&lt;<span class="hljs-built_in">void</span>()&gt;;<br><br>    <span class="hljs-type">size_t</span> m_size;  <span class="hljs-comment">// the size of thread pool</span><br>    std::vector&lt;std::thread&gt; m_threads;<br><br>    std::queue&lt;Task&gt; m_tasks;           <span class="hljs-comment">// task queue</span><br>    std::mutex m_task_mutex;            <span class="hljs-comment">// mutex for task queue</span><br>    std::condition_variable m_task_cv;  <span class="hljs-comment">// condition variable for task queue</span><br><br>    std::atomic_bool m_running&#123;<span class="hljs-literal">true</span>&#125;;<br>&#125;;<br><br>ThreadPool::<span class="hljs-built_in">ThreadPool</span>(<span class="hljs-type">size_t</span> size) : <span class="hljs-built_in">m_size</span>(size) &#123;<br>    m_threads.<span class="hljs-built_in">reserve</span>(m_size);<br>    <span class="hljs-built_in">add_thread</span>(m_size);<br>&#125;<br><br>ThreadPool::~<span class="hljs-built_in">ThreadPool</span>() <span class="hljs-keyword">noexcept</span> &#123;<br>    m_running = <span class="hljs-literal">false</span>;<br><br>    m_task_cv.<span class="hljs-built_in">notify_all</span>();<br>    <span class="hljs-keyword">for</span> (std::thread&amp; thread : m_threads) &#123;<br>        <span class="hljs-keyword">if</span> (thread.<span class="hljs-built_in">joinable</span>()) &#123;<br>            thread.<span class="hljs-built_in">join</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Callable, <span class="hljs-keyword">typename</span>... Args&gt;<br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">ThreadPool::commit</span><span class="hljs-params">(Callable&amp;&amp; f, Args... args)</span> -&gt; std::future&lt;<span class="hljs-title">decltype</span><span class="hljs-params">(f(args...))</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">if</span> (!m_running) &#123;<br>        std::<span class="hljs-built_in">terminate</span>();  <span class="hljs-comment">// terminate directly since it&#x27;s out of the lifetime of thread pool</span><br>    &#125;<br><br>    <span class="hljs-keyword">using</span> RetType = <span class="hljs-keyword">decltype</span>(<span class="hljs-built_in">f</span>(args...));<br>    <span class="hljs-keyword">auto</span> task = std::make_shared&lt;std::packaged_task&lt;<span class="hljs-built_in">RetType</span>()&gt;&gt;(<br>        std::<span class="hljs-built_in">bind</span>(std::forward&lt;Callable&gt;(f), std::forward&lt;Args&gt;(args)...));<br>    std::future&lt;RetType&gt; future = task-&gt;<span class="hljs-built_in">get_future</span>();<br>    &#123;<br>        <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(m_task_mutex)</span></span>;<br>        m_tasks.<span class="hljs-built_in">emplace</span>([task] &#123;<br>            (*task)();<br>        &#125;);<br>    &#125;<br>    m_task_cv.<span class="hljs-built_in">notify_one</span>();<br><br>    <span class="hljs-keyword">return</span> future;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ThreadPool::add_thread</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span> </span>&#123;<br>    <span class="hljs-keyword">auto</span> execute = [<span class="hljs-keyword">this</span>]() -&gt; <span class="hljs-type">void</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            Task task;<br>            &#123;<br>                <span class="hljs-function">std::unique_lock&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(m_task_mutex)</span></span>;<br>                m_task_cv.<span class="hljs-built_in">wait</span>(lock, [<span class="hljs-keyword">this</span>]() -&gt; <span class="hljs-type">bool</span> &#123;<br>                    <span class="hljs-keyword">return</span> !m_running || !m_tasks.<span class="hljs-built_in">empty</span>();<br>                &#125;);<br>                <span class="hljs-keyword">if</span> (!m_running &amp;&amp; m_tasks.<span class="hljs-built_in">empty</span>()) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                task = std::<span class="hljs-built_in">move</span>(m_tasks.<span class="hljs-built_in">front</span>());<br>                m_tasks.<span class="hljs-built_in">pop</span>();<br>            &#125;<br><br>            <span class="hljs-built_in">task</span>();<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; size; ++i) &#123;<br>        m_threads.<span class="hljs-built_in">emplace_back</span>(execute);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h2><ul><li>Support to adjust the size of the thread pool.</li></ul>]]></content>
    
    
    <categories>
      
      <category>system_design</category>
      
    </categories>
    
    
    <tags>
      
      <tag>system_design</tag>
      
      <tag>thread_pool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 338 - Counting Bits</title>
    <link href="/Algorithm/LeetCode/DynamicProgramming/LeetCode-338-Counting-Bits/"/>
    <url>/Algorithm/LeetCode/DynamicProgramming/LeetCode-338-Counting-Bits/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-success">easy</span></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Counting-Bits"><a href="#English-Counting-Bits" class="headerlink" title="English (Counting Bits)"></a>English (Counting Bits)</h3><p>Given an integer <code>n</code>, return an array <code>ans</code> of length <code>n + 1</code> such that for each <code>i</code> (<code>0 &lt;= i &lt;= n</code>), <code>ans[i]</code> is the <strong>number</strong> of <code>1</code><strong>‘s</strong> in the binary representation of <code>i</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: n = 2<br>Output: [0,1,1]<br>Explanation:<br>0 --&gt; 0<br>1 --&gt; 1<br>2 --&gt; 10<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: n = 5<br>Output: [0,1,1,2,1,2]<br>Explanation:<br>0 --&gt; 0<br>1 --&gt; 1<br>2 --&gt; 10<br>3 --&gt; 11<br>4 --&gt; 100<br>5 --&gt; 101<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= n &lt;= 10^5</code></li></ul><p><strong>Follow up:</strong></p><ul><li>It is very easy to come up with a solution with a runtime of <code>O(n log n)</code>. Can you do it in linear time <code>O(n)</code> and possibly in a single pass?</li><li>Can you do it without using any built-in function (i.e., like <code>__builtin_popcount</code> in C++)?</li></ul><h3 id="Chinese-比特位计数"><a href="#Chinese-比特位计数" class="headerlink" title="Chinese (比特位计数)"></a>Chinese (比特位计数)</h3><p>给你一个整数 <code>n</code> ，对于 <code>0 &lt;= i &lt;= n</code> 中的每个 <code>i</code> ，计算其二进制表示中 <code>1</code> <strong>的个数</strong> ，返回一个长度为 <code>n + 1</code> 的数组 <code>ans</code> 作为答案。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：n = 2<br>输出：[0,1,1]<br>解释：<br>0 --&gt; 0<br>1 --&gt; 1<br>2 --&gt; 10<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：n = 5<br>输出：[0,1,1,2,1,2]<br>解释：<br>0 --&gt; 0<br>1 --&gt; 1<br>2 --&gt; 10<br>3 --&gt; 11<br>4 --&gt; 100<br>5 --&gt; 101<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= n &lt;= 10^5</code></li></ul><p><strong>进阶：</strong></p><ul><li>很容易就能实现时间复杂度为 <code>O(n log n)</code> 的解决方案，你可以在线性时间复杂度 <code>O(n)</code> 内用一趟扫描解决此问题吗？</li><li>你能不使用任何内置函数解决此问题吗？（如，C++ 中的 <code>__builtin_popcount</code> ）</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">countBits</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">res</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>            res[i] = res[i &gt;&gt; <span class="hljs-number">1</span>] + (i &amp; <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">countBits</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">res</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>            res[i] = res[i &amp; (i - <span class="hljs-number">1</span>)] + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>dynamic_programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>easy</tag>
      
      <tag>dynamic_programming</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 2280 - Minimum Lines to Represent a Line Chart</title>
    <link href="/Algorithm/LeetCode/LeetCode-2280-Minimum-Lines-to-Represent-a-Line-Chart/"/>
    <url>/Algorithm/LeetCode/LeetCode-2280-Minimum-Lines-to-Represent-a-Line-Chart/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-warning">medium</span></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Minimum-Lines-to-Represent-a-Line-Chart"><a href="#English-Minimum-Lines-to-Represent-a-Line-Chart" class="headerlink" title="English (Minimum Lines to Represent a Line Chart)"></a>English (Minimum Lines to Represent a Line Chart)</h3><p>You are given a 2D integer array <code>stockPrices</code> where <code>stockPrices[i] = [dayi, pricei]</code> indicates the price of the stock on day $day_i$ is $price_i$. A <strong>line chart</strong> is created from the array by plotting the points on an XY plane with the X-axis representing the day and the Y-axis representing the price and connecting adjacent points. One such example is shown below:</p><p><img src="/resources/LeetCode-2280-Minimum-Lines-to-Represent-a-Line-Chart/img/overall.png" alt="overall"></p><p>Return <em>the <strong>minimum number of lines</strong> needed to represent the line chart</em>.</p><p><strong>Example 1:</strong></p><p><img src="/resources/LeetCode-2280-Minimum-Lines-to-Represent-a-Line-Chart/img/example_1.png" alt="example_1"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: stockPrices = [[1,7],[2,6],[3,5],[4,4],[5,4],[6,3],[7,2],[8,1]]<br>Output: 3<br>Explanation:<br>The diagram above represents the input, with the X-axis representing the day and Y-axis representing the price.<br>The following 3 lines can be drawn to represent the line chart:<br>- Line 1 (in red) from (1,7) to (4,4) passing through (1,7), (2,6), (3,5), and (4,4).<br>- Line 2 (in blue) from (4,4) to (5,4).<br>- Line 3 (in green) from (5,4) to (8,1) passing through (5,4), (6,3), (7,2), and (8,1).<br>It can be shown that it is not possible to represent the line chart using less than 3 lines.<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><p><img src="/resources/LeetCode-2280-Minimum-Lines-to-Represent-a-Line-Chart/img/example_2.png" alt="example_2"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: stockPrices = [[3,4],[1,2],[7,8],[2,3]]<br>Output: 1<br>Explanation:<br>As shown in the diagram above, the line chart can be represented with a single line.<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= stockPrices.length &lt;= 10^5</code></li><li><code>stockPrices[i].length == 2</code></li><li><code>1 &lt;= dayi, pricei &lt;= 10^9</code></li><li>All $day_i$ are <strong>distinct</strong>.</li></ul><h3 id="Chinese-表示一个折线图的最少线段数"><a href="#Chinese-表示一个折线图的最少线段数" class="headerlink" title="Chinese (表示一个折线图的最少线段数)"></a>Chinese (表示一个折线图的最少线段数)</h3><p>给你一个二维整数数组 <code>stockPrices</code> ，其中 <code>stockPrices[i] = [dayi, pricei]</code> 表示股票在 $day_i$ 的价格为 $price_i$ 。<strong>折线图</strong> 是一个二维平面上的若干个点组成的图，横坐标表示日期，纵坐标表示价格，折线图由相邻的点连接而成。比方说下图是一个例子：</p><p><img src="/resources/LeetCode-2280-Minimum-Lines-to-Represent-a-Line-Chart/img/overall.png" alt="overall"></p><p>请你返回要表示一个折线图所需要的 <strong>最少线段数</strong> 。</p><p><strong>示例 1：</strong></p><p><img src="/resources/LeetCode-2280-Minimum-Lines-to-Represent-a-Line-Chart/img/example_1.png" alt="example_1"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：stockPrices = [[1,7],[2,6],[3,5],[4,4],[5,4],[6,3],[7,2],[8,1]]<br>输出：3<br>解释：<br>上图为输入对应的图，横坐标表示日期，纵坐标表示价格。<br>以下 3 个线段可以表示折线图：<br>- 线段 1 （红色）从 (1,7) 到 (4,4) ，经过 (1,7) ，(2,6) ，(3,5) 和 (4,4) 。<br>- 线段 2 （蓝色）从 (4,4) 到 (5,4) 。<br>- 线段 3 （绿色）从 (5,4) 到 (8,1) ，经过 (5,4) ，(6,3) ，(7,2) 和 (8,1) 。<br>可以证明，无法用少于 3 条线段表示这个折线图。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="/resources/LeetCode-2280-Minimum-Lines-to-Represent-a-Line-Chart/img/example_2.png" alt="example_2"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：stockPrices = [[3,4],[1,2],[7,8],[2,3]]<br>输出：1<br>解释：<br>如上图所示，折线图可以用一条线段表示。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= stockPrices.length &lt;= 10^5</code></li><li><code>stockPrices[i].length == 2</code></li><li><code>1 &lt;= dayi, pricei &lt;= 10^9</code></li><li>所有 $day_i$ <strong>互不相同</strong> 。</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minimumLines</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; stockPrices)</span> </span>&#123;<br>        <span class="hljs-built_in">sort</span>(stockPrices.<span class="hljs-built_in">begin</span>(), stockPrices.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; lhs, <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; rhs)&#123;<br>            <span class="hljs-keyword">return</span> lhs[<span class="hljs-number">0</span>] &lt; rhs[<span class="hljs-number">0</span>];<br>        &#125;);<br><br>        <span class="hljs-type">int</span> n = stockPrices.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> n - <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-type">double</span> pre_k = (stockPrices[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] - stockPrices[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]) / (stockPrices[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] - stockPrices[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-type">long</span> x0 = stockPrices[i - <span class="hljs-number">2</span>][<span class="hljs-number">0</span>], y0 = stockPrices[i - <span class="hljs-number">2</span>][<span class="hljs-number">1</span>];<br>            <span class="hljs-type">long</span> <span class="hljs-type">long</span> x1 = stockPrices[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>], y1 = stockPrices[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>            <span class="hljs-type">long</span> <span class="hljs-type">long</span> x2 = stockPrices[i][<span class="hljs-number">0</span>], y2 = stockPrices[i][<span class="hljs-number">1</span>];<br>            <span class="hljs-comment">// (y2-y1)/(x2-x1) == (y1-y0)/(x1-x0)</span><br>            <span class="hljs-keyword">if</span> ((y2 - y1) * (x1 - x0) != (y1 - y0) * (x2 - x1)) &#123;<br>                ++res;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>medium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 2110 - Number of Smooth Descent Periods of a Stock</title>
    <link href="/Algorithm/LeetCode/DynamicProgramming/LeetCode-2110-Number-of-Smooth-Descent-Periods-of-a-Stock/"/>
    <url>/Algorithm/LeetCode/DynamicProgramming/LeetCode-2110-Number-of-Smooth-Descent-Periods-of-a-Stock/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-warning">medium</span></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Number-of-Smooth-Descent-Periods-of-a-Stock"><a href="#English-Number-of-Smooth-Descent-Periods-of-a-Stock" class="headerlink" title="English (Number of Smooth Descent Periods of a Stock)"></a>English (Number of Smooth Descent Periods of a Stock)</h3><p>You are given an integer array <code>prices</code> representing the daily price history of a stock, where <code>prices[i]</code> is the stock price on the $i^{th}$ day.</p><p>A <strong>smooth descent period</strong> of a stock consists of <strong>one or more</strong> contiguous days such that the price on each day is <strong>lower</strong> than the price on the <strong>preceding day</strong> by <strong>exactly</strong> <code>1</code>. The first day of the period is exempted from this rule.</p><p>Return <em>the number of <strong>smooth descent periods</strong></em>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: prices = [3,2,1,4]<br>Output: 7<br>Explanation: There are 7 smooth descent periods:<br>[3], [2], [1], [4], [3,2], [2,1], and [3,2,1]<br>Note that a period with one day is a smooth descent period by the definition.<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: prices = [8,6,7,7]<br>Output: 4<br>Explanation: There are 4 smooth descent periods: [8], [6], [7], and [7]<br>Note that [8,6] is not a smooth descent period as 8 - 6 ≠ 1.<br></code></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: prices = [1]<br>Output: 1<br>Explanation: There is 1 smooth descent period: [1]<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 10^5</code></li><li><code>1 &lt;= prices[i] &lt;= 10^5</code></li></ul><h3 id="Chinese-股票平滑下跌阶段的数目"><a href="#Chinese-股票平滑下跌阶段的数目" class="headerlink" title="Chinese (股票平滑下跌阶段的数目)"></a>Chinese (股票平滑下跌阶段的数目)</h3><p>给你一个整数数组 <code>prices</code> ，表示一支股票的历史每日股价，其中 <code>prices[i]</code> 是这支股票第 <code>i</code> 天的价格。</p><p>一个 <strong>平滑下降的阶段</strong> 定义为：对于 <strong>连续一天或者多天</strong> ，每日股价都比 <strong>前一日股价恰好少</strong> <code>1</code> ，这个阶段第一天的股价没有限制。</p><p>请你返回 <strong>平滑下降阶段</strong> 的数目。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：prices = [3,2,1,4]<br>输出：7<br>解释：总共有 7 个平滑下降阶段：<br>[3], [2], [1], [4], [3,2], [2,1] 和 [3,2,1]<br>注意，仅一天按照定义也是平滑下降阶段。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：prices = [8,6,7,7]<br>输出：4<br>解释：总共有 4 个连续平滑下降阶段：[8], [6], [7] 和 [7]<br>由于 8 - 6 ≠ 1 ，所以 [8,6] 不是平滑下降阶段。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：prices = [1]<br>输出：1<br>解释：总共有 1 个平滑下降阶段：[1]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 10^5</code></li><li><code>1 &lt;= prices[i] &lt;= 10^5</code></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">getDescentPeriods</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> res = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-type">int</span> pre = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, n = prices.<span class="hljs-built_in">size</span>(); i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (prices[i] == prices[i - <span class="hljs-number">1</span>] - <span class="hljs-number">1</span>) &#123;<br>                res += pre + <span class="hljs-number">1</span>;<br>                ++pre;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ++res;<br>                pre = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>dynamic_programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>medium</tag>
      
      <tag>dynamic_programming</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 901 - Online Stock Span</title>
    <link href="/Algorithm/LeetCode/LeetCode-901-Online-Stock-Span/"/>
    <url>/Algorithm/LeetCode/LeetCode-901-Online-Stock-Span/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-warning">medium</span></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Online-Stock-Span"><a href="#English-Online-Stock-Span" class="headerlink" title="English (Online Stock Span)"></a>English (Online Stock Span)</h3><p>Design an algorithm that collects daily price quotes for some stock and returns <strong>the span</strong> of that stock’s price for the current day.</p><p>The <strong>span</strong> of the stock’s price in one day is the maximum number of consecutive days (starting from that day and going backward) for which the stock price was less than or equal to the price of that day.</p><ul><li>For example, if the prices of the stock in the last four days is <code>[7,2,1,2]</code> and the price of the stock today is <code>2</code>, then the span of today is 4 because starting from today, the price of the stock was less than or equal <code>2</code> for <code>4</code> consecutive days.</li><li>Also, if the prices of the stock in the last four days is <code>[7,34,1,2]</code> and the price of the stock today is <code>8</code>, then the span of today is <code>3</code> because starting from today, the price of the stock was less than or equal <code>8</code> for <code>3</code> consecutive days.</li></ul><p>Implement the <code>StockSpanner</code> class:</p><ul><li><code>StockSpanner()</code> Initializes the object of the class.</li><li><code>int next(int price)</code> Returns the <strong>span</strong> of the stock’s price given that today’s price is <code>price</code>.</li></ul><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs log">Input<br>[&quot;StockSpanner&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;]<br>[[], [100], [80], [60], [70], [60], [75], [85]]<br>Output<br>[null, 1, 1, 1, 2, 1, 4, 6]<br><br>Explanation<br>StockSpanner stockSpanner = new StockSpanner();<br>stockSpanner.next(100); // return 1<br>stockSpanner.next(80);  // return 1<br>stockSpanner.next(60);  // return 1<br>stockSpanner.next(70);  // return 2<br>stockSpanner.next(60);  // return 1<br>stockSpanner.next(75);  // return 4, because the last 4 prices (including today&#x27;s price of 75) were less than or equal to today&#x27;s price.<br>stockSpanner.next(85);  // return 6<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= price &lt;= 10^5</code></li><li>At most <code>10^4</code> calls will be made to <code>next</code>.</li></ul><h3 id="Chinese-股票价格跨度"><a href="#Chinese-股票价格跨度" class="headerlink" title="Chinese (股票价格跨度)"></a>Chinese (股票价格跨度)</h3><p>设计一个算法收集某些股票的每日报价，并返回该股票当日价格的 <strong>跨度</strong> 。</p><p>当日股票价格的 <strong>跨度</strong> 被定义为股票价格小于或等于今天价格的最大连续日数（从今天开始往回数，包括今天）。</p><p>例如，如果未来 7 天股票的价格是 <code>[100,80,60,70,60,75,85]</code>，那么股票跨度将是 <code>[1,1,1,2,1,4,6]</code> 。</p><p>实现 <code>StockSpanner</code> 类：</p><p><code>StockSpanner()</code> 初始化类对象。<br><code>int next(int price)</code> 给出今天的股价 <code>price</code> ，返回该股票当日价格的 <strong>跨度</strong> 。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：<br>[&quot;StockSpanner&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;]<br>[[], [100], [80], [60], [70], [60], [75], [85]]<br>输出：<br>[null, 1, 1, 1, 2, 1, 4, 6]<br><br>解释：<br>StockSpanner stockSpanner = new StockSpanner();<br>stockSpanner.next(100); // 返回 1<br>stockSpanner.next(80);  // 返回 1<br>stockSpanner.next(60);  // 返回 1<br>stockSpanner.next(70);  // 返回 2<br>stockSpanner.next(60);  // 返回 1<br>stockSpanner.next(75);  // 返回 4 ，因为截至今天的最后 4 个股价 (包括今天的股价 75) 都小于或等于今天的股价。<br>stockSpanner.next(85);  // 返回 6<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= price &lt;= 10^5</code></li><li>最多调用 <code>next</code> 方法 <code>10^4</code> 次</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StockSpanner</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">StockSpanner</span>() &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">next</span><span class="hljs-params">(<span class="hljs-type">int</span> price)</span> </span>&#123;<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (!s.<span class="hljs-built_in">empty</span>() &amp;&amp; price &gt;= s.<span class="hljs-built_in">top</span>().price) &#123;<br>            res += s.<span class="hljs-built_in">top</span>().window_sum;<br>            s.<span class="hljs-built_in">pop</span>();<br>        &#125;<br><br>        s.<span class="hljs-built_in">push</span>(&#123;price, res&#125;);<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">PriceInfo</span> &#123;<br>        <span class="hljs-type">int</span> price;<br>        <span class="hljs-type">int</span> window_sum;<br>    &#125;;<br><br>    stack&lt;PriceInfo&gt; s;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>monotonic_stack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>stack</tag>
      
      <tag>leetcode</tag>
      
      <tag>medium</tag>
      
      <tag>monotonic_stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 502 - IPO</title>
    <link href="/Algorithm/LeetCode/LeetCode-502-IPO/"/>
    <url>/Algorithm/LeetCode/LeetCode-502-IPO/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-danger">hard</span></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-IPO"><a href="#English-IPO" class="headerlink" title="English (IPO)"></a>English (IPO)</h3><p>Suppose LeetCode will start its <strong>IPO</strong> soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the <strong>IPO</strong>. Since it has limited resources, it can only finish at most <code>k</code> distinct projects before the <strong>IPO</strong>. Help LeetCode design the best way to maximize its total capital after finishing at most <code>k</code> distinct projects.</p><p>You are given <code>n</code> projects where the $i^{th}$ project has a pure profit <code>profits[i]</code> and a minimum capital of <code>capital[i]</code> is needed to start it.</p><p>Initially, you have <code>w</code> capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.</p><p>Pick a list of <strong>at most</strong> <code>k</code> distinct projects from given projects to <strong>maximize your final capital</strong>, and return <em>the final maximized capital</em>.</p><p>The answer is guaranteed to fit in a 32-bit signed integer.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]<br>Output: 4<br>Explanation: Since your initial capital is 0, you can only start the project indexed 0.<br>After finishing it you will obtain profit 1 and your capital becomes 1.<br>With capital 1, you can either start the project indexed 1 or the project indexed 2.<br>Since you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.<br>Therefore, output the final maximized capital, which is 0 + 1 + 3 = 4.<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]<br>Output: 6<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= k &lt;= 10^5</code></li><li><code>0 &lt;= w &lt;= 10^9</code></li><li><code>n == profits.length</code></li><li><code>n == capital.length</code></li><li><code>1 &lt;= n &lt;= 10^5</code></li><li><code>0 &lt;= profits[i] &lt;= 10^4</code></li><li><code>0 &lt;= capital[i] &lt;= 10^9</code></li></ul><h3 id="Chinese-IPO"><a href="#Chinese-IPO" class="headerlink" title="Chinese (IPO)"></a>Chinese (IPO)</h3><p>假设 力扣（LeetCode）即将开始 <strong>IPO</strong> 。为了以更高的价格将股票卖给风险投资公司，力扣 希望在 <strong>IPO</strong> 之前开展一些项目以增加其资本。 由于资源有限，它只能在 <strong>IPO</strong> 之前完成最多 <code>k</code> 个不同的项目。帮助 力扣 设计完成最多 <code>k</code> 个不同项目后得到最大总资本的方式。</p><p>给你 <code>n</code> 个项目。对于每个项目 <code>i</code> ，它都有一个纯利润 <code>profits[i]</code> ，和启动该项目需要的最小资本 <code>capital[i]</code> 。</p><p>最初，你的资本为 <code>w</code> 。当你完成一个项目时，你将获得纯利润，且利润将被添加到你的总资本中。</p><p>总而言之，从给定项目中选择 <strong>最多</strong> <code>k</code> 个不同项目的列表，以 <strong>最大化最终资本</strong> ，并输出最终可获得的最多资本。</p><p>答案保证在 32 位有符号整数范围内。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]<br>输出：4<br>解释：<br>由于你的初始资本为 0，你仅可以从 0 号项目开始。<br>在完成后，你将获得 1 的利润，你的总资本将变为 1。<br>此时你可以选择开始 1 号或 2 号项目。<br>由于你最多可以选择两个项目，所以你需要完成 2 号项目以获得最大的资本。<br>因此，输出最后最大化的资本，为 0 + 1 + 3 = 4。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]<br>输出：6<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= k &lt;= 10^5</code></li><li><code>0 &lt;= w &lt;= 10^9</code></li><li><code>n == profits.length</code></li><li><code>n == capital.length</code></li><li><code>1 &lt;= n &lt;= 10^5</code></li><li><code>0 &lt;= profits[i] &lt;= 10^4</code></li><li><code>0 &lt;= capital[i] &lt;= 10^9</code></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findMaximizedCapital</span><span class="hljs-params">(<span class="hljs-type">int</span> k, <span class="hljs-type">int</span> w, vector&lt;<span class="hljs-type">int</span>&gt;&amp; profits, vector&lt;<span class="hljs-type">int</span>&gt;&amp; capitals)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = profits.<span class="hljs-built_in">size</span>();<br>        vector&lt;ProjectInfo&gt; project_infos;<br>        project_infos.<span class="hljs-built_in">reserve</span>(n);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            project_infos.<span class="hljs-built_in">emplace_back</span>(profits[i], capitals[i]);<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(project_infos.<span class="hljs-built_in">begin</span>(), project_infos.<span class="hljs-built_in">end</span>());<br><br>        priority_queue&lt;<span class="hljs-type">int</span>&gt; max_profits;<br>        <span class="hljs-type">int</span> has_capital_index = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (k-- &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">while</span> (has_capital_index &lt; n &amp;&amp; project_infos[has_capital_index].capital &lt;= w) &#123;<br>                max_profits.<span class="hljs-built_in">push</span>(project_infos[has_capital_index].profit);<br>                ++has_capital_index;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (max_profits.<span class="hljs-built_in">empty</span>()) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            w += max_profits.<span class="hljs-built_in">top</span>();<br>            max_profits.<span class="hljs-built_in">pop</span>();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> w;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ProjectInfo</span> &#123;<br>        <span class="hljs-built_in">ProjectInfo</span>(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> c) : <span class="hljs-built_in">profit</span>(p), <span class="hljs-built_in">capital</span>(c) &#123;&#125;<br><br>        <span class="hljs-type">int</span> profit&#123;&#125;;<br>        <span class="hljs-type">int</span> capital&#123;&#125;;<br><br>        <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> ProjectInfo&amp; other) <span class="hljs-type">const</span> &#123;<br>            <span class="hljs-keyword">return</span> capital &lt; other.capital;<br>        &#125;<br>    &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>priority_queue</category>
      
      <category>heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>greedy_algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>priority_queue</tag>
      
      <tag>heap</tag>
      
      <tag>hard</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 714 - Best Time to Buy and Sell Stock with Transaction Fee</title>
    <link href="/Algorithm/LeetCode/Stock/LeetCode-714-Best-Time-to-Buy-and-Sell-Stock-with-Transaction-Fee/"/>
    <url>/Algorithm/LeetCode/Stock/LeetCode-714-Best-Time-to-Buy-and-Sell-Stock-with-Transaction-Fee/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-warning">medium</span></p>          </div><div class="note note-primary">            <p><strong>Stock Series:</strong></p><p><a href="/Algorithm/LeetCode/Stock/LeetCode-121-Best-Time-to-Buy-and-Sell-Stock">Part 1: LeetCode 121 - Best Time to Buy and Sell Stock</a><br><a href="/Algorithm/LeetCode/Stock/LeetCode-122-Best-Time-to-Buy-and-Sell-Stock-II">Part 2: LeetCode 122 - Best Time to Buy and Sell Stock II</a><br><a href="/Algorithm/LeetCode/Stock/LeetCode-123-Best-Time-to-Buy-and-Sell-Stock-III">Part 3: LeetCode 123 - Best Time to Buy and Sell Stock III</a><br><a href="/Algorithm/LeetCode/Stock/LeetCode-188-Best-Time-to-Buy-and-Sell-Stock-IV">Part 4: LeetCode 188 - Best Time to Buy and Sell Stock IV</a><br><a href="/Algorithm/LeetCode/Stock/LeetCode-309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown">Part 5: LeetCode 309 - Best Time to Buy and Sell Stock with Cooldown</a><br><strong>Part 6: LeetCode 714 - Best Time to Buy and Sell Stock with Transaction Fee</strong></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Best-Time-to-Buy-and-Sell-Stock-with-Transaction-Fee"><a href="#English-Best-Time-to-Buy-and-Sell-Stock-with-Transaction-Fee" class="headerlink" title="English (Best Time to Buy and Sell Stock with Transaction Fee)"></a>English (Best Time to Buy and Sell Stock with Transaction Fee)</h3><p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the $i^{th}$ day, and an integer <code>fee</code> representing a transaction fee.</p><p>Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.</p><p><strong>Note:</strong> You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: prices = [1,3,2,8,4,9], fee = 2<br>Output: 8<br>Explanation: The maximum profit can be achieved by:<br>- Buying at prices[0] = 1<br>- Selling at prices[3] = 8<br>- Buying at prices[4] = 4<br>- Selling at prices[5] = 9<br>The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: prices = [1,3,7,5,10,3], fee = 3<br>Output: 6<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 5 * 10^4</code></li><li><code>1 &lt;= prices[i] &lt; 5 * 10^4</code></li><li><code>0 &lt;= fee &lt; 5 * 10^4</code></li></ul><h3 id="Chinese-买卖股票的最佳时机含手续费"><a href="#Chinese-买卖股票的最佳时机含手续费" class="headerlink" title="Chinese (买卖股票的最佳时机含手续费)"></a>Chinese (买卖股票的最佳时机含手续费)</h3><p>给定一个整数数组 <code>prices</code>，其中 <code>prices[i]</code> 表示第 <code>i</code> 天的股票价格 ；整数 <code>fee</code> 代表了交易股票的手续费用。</p><p>你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。</p><p>返回获得利润的最大值。</p><p><strong>注意：</strong> 这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：prices = [1, 3, 2, 8, 4, 9], fee = 2<br>输出：8<br>解释：能够达到的最大利润:  <br>在此处买入 prices[0] = 1<br>在此处卖出 prices[3] = 8<br>在此处买入 prices[4] = 4<br>在此处卖出 prices[5] = 9<br>总利润: ((8 - 1) - 2) + ((9 - 4) - 2) = 8<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：prices = [1,3,7,5,10,3], fee = 3<br>输出：6<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 5 * 10^4</code></li><li><code>1 &lt;= prices[i] &lt; 5 * 10^4</code></li><li><code>0 &lt;= fee &lt; 5 * 10^4</code></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices, <span class="hljs-type">int</span> fee)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = prices.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">has</span><span class="hljs-params">(n)</span>, <span class="hljs-title">not_has</span><span class="hljs-params">(n)</span></span>;<br>        has[<span class="hljs-number">0</span>] = -prices[<span class="hljs-number">0</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-type">int</span> price = prices[i];<br><br>            has[i] = <span class="hljs-built_in">max</span>(has[i - <span class="hljs-number">1</span>], not_has[i - <span class="hljs-number">1</span>] - price);<br>            not_has[i] = <span class="hljs-built_in">max</span>(not_has[i - <span class="hljs-number">1</span>], has[i - <span class="hljs-number">1</span>] + price - fee);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> not_has[n - <span class="hljs-number">1</span>];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>dynamic_programming</category>
      
      <category>stock</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>greedy_algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>medium</tag>
      
      <tag>dynamic_programming</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 309 - Best Time to Buy and Sell Stock with Cooldown</title>
    <link href="/Algorithm/LeetCode/Stock/LeetCode-309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown/"/>
    <url>/Algorithm/LeetCode/Stock/LeetCode-309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-warning">medium</span></p>          </div><div class="note note-primary">            <p><strong>Stock Series:</strong></p><p><a href="/Algorithm/LeetCode/Stock/LeetCode-121-Best-Time-to-Buy-and-Sell-Stock">Part 1: LeetCode 121 - Best Time to Buy and Sell Stock</a><br><a href="/Algorithm/LeetCode/Stock/LeetCode-122-Best-Time-to-Buy-and-Sell-Stock-II">Part 2: LeetCode 122 - Best Time to Buy and Sell Stock II</a><br><a href="/Algorithm/LeetCode/Stock/LeetCode-123-Best-Time-to-Buy-and-Sell-Stock-III">Part 3: LeetCode 123 - Best Time to Buy and Sell Stock III</a><br><a href="/Algorithm/LeetCode/Stock/LeetCode-188-Best-Time-to-Buy-and-Sell-Stock-IV">Part 4: LeetCode 188 - Best Time to Buy and Sell Stock IV</a><br><strong>Part 5: LeetCode 309 - Best Time to Buy and Sell Stock with Cooldown</strong><br><a href="/Algorithm/LeetCode/Stock/LeetCode-714-Best-Time-to-Buy-and-Sell-Stock-with-Transaction-Fee">Part 6: LeetCode 714 - Best Time to Buy and Sell Stock with Transaction Fee</a></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown"><a href="#English-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown" class="headerlink" title="English (Best Time to Buy and Sell Stock with Cooldown)"></a>English (Best Time to Buy and Sell Stock with Cooldown)</h3><p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the $i^{th}$ day.</p><p>Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:</p><ul><li>After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).</li></ul><p><strong>Note:</strong> You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: prices = [1,2,3,0,2]<br>Output: 3<br>Explanation: transactions = [buy, sell, cooldown, buy, sell]<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: prices = [1]<br>Output: 0<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 5000</code></li><li><code>0 &lt;= prices[i] &lt;= 1000</code></li></ul><h3 id="Chinese-最佳买卖股票时机含冷冻期"><a href="#Chinese-最佳买卖股票时机含冷冻期" class="headerlink" title="Chinese (最佳买卖股票时机含冷冻期)"></a>Chinese (最佳买卖股票时机含冷冻期)</h3><p>给定一个整数数组 <code>prices</code>，其中第 <code>prices[i]</code> 表示第 <code>i</code> 天的股票价格 。​</p><p>设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:</p><ul><li>卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。</li></ul><p><strong>注意：</strong> 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">输入: prices = [1,2,3,0,2]<br>输出: 3<br>解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]<br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入: prices = [1]<br>输出: 0<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 5000</code></li><li><code>0 &lt;= prices[i] &lt;= 1000</code></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = prices.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">has</span><span class="hljs-params">(n)</span>, <span class="hljs-title">not_has</span><span class="hljs-params">(n)</span></span>;<br>        has[<span class="hljs-number">0</span>] = -prices[<span class="hljs-number">0</span>];<br><br>        <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> COLD_DAYS = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-type">int</span> price = prices[i];<br><br>            has[i] = (i &gt; COLD_DAYS) ? <span class="hljs-built_in">max</span>(has[i - <span class="hljs-number">1</span>], not_has[i - COLD_DAYS - <span class="hljs-number">1</span>] - price) : <span class="hljs-built_in">max</span>(has[i - <span class="hljs-number">1</span>], -price);<br>            not_has[i] = <span class="hljs-built_in">max</span>(not_has[i - <span class="hljs-number">1</span>], has[i - <span class="hljs-number">1</span>] + price);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> not_has[n - <span class="hljs-number">1</span>];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>dynamic_programming</category>
      
      <category>stock</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>greedy_algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>medium</tag>
      
      <tag>dynamic_programming</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 188 - Best Time to Buy and Sell Stock IV</title>
    <link href="/Algorithm/LeetCode/Stock/LeetCode-188-Best-Time-to-Buy-and-Sell-Stock-IV/"/>
    <url>/Algorithm/LeetCode/Stock/LeetCode-188-Best-Time-to-Buy-and-Sell-Stock-IV/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-danger">hard</span></p>          </div><div class="note note-primary">            <p><strong>Stock Series:</strong></p><p><a href="/Algorithm/LeetCode/Stock/LeetCode-121-Best-Time-to-Buy-and-Sell-Stock">Part 1: LeetCode 121 - Best Time to Buy and Sell Stock</a><br><a href="/Algorithm/LeetCode/Stock/LeetCode-122-Best-Time-to-Buy-and-Sell-Stock-II">Part 2: LeetCode 122 - Best Time to Buy and Sell Stock II</a><br><a href="/Algorithm/LeetCode/Stock/LeetCode-123-Best-Time-to-Buy-and-Sell-Stock-III">Part 3: LeetCode 123 - Best Time to Buy and Sell Stock III</a><br><strong>Part 4: LeetCode 188 - Best Time to Buy and Sell Stock IV</strong><br><a href="/Algorithm/LeetCode/Stock/LeetCode-309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown">Part 5: LeetCode 309 - Best Time to Buy and Sell Stock with Cooldown</a><br><a href="/Algorithm/LeetCode/Stock/LeetCode-714-Best-Time-to-Buy-and-Sell-Stock-with-Transaction-Fee">Part 6: LeetCode 714 - Best Time to Buy and Sell Stock with Transaction Fee</a></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Best-Time-to-Buy-and-Sell-Stock-IV"><a href="#English-Best-Time-to-Buy-and-Sell-Stock-IV" class="headerlink" title="English (Best Time to Buy and Sell Stock IV)"></a>English (Best Time to Buy and Sell Stock IV)</h3><p>You are given an integer array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the $i^{th}$ day, and an integer <code>k</code>.</p><p>Find the maximum profit you can achieve. You may complete at most <code>k</code> transactions: i.e. you may buy at most <code>k</code> times and sell at most <code>k</code> times.</p><p><strong>Note:</strong> You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: k = 2, prices = [2,4,1]<br>Output: 2<br>Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: k = 2, prices = [3,2,6,5,0,3]<br>Output: 7<br>Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= k &lt;= 100</code></li><li><code>1 &lt;= prices.length &lt;= 1000</code></li><li><code>0 &lt;= prices[i] &lt;= 1000</code></li></ul><h3 id="Chinese-买卖股票的最佳时机-IV"><a href="#Chinese-买卖股票的最佳时机-IV" class="headerlink" title="Chinese (买卖股票的最佳时机 IV)"></a>Chinese (买卖股票的最佳时机 IV)</h3><p>给定一个整数数组 <code>prices</code> ，它的第 i 个元素 <code>prices[i]</code> 是一支给定的股票在第 <code>i</code> 天的价格，和一个整型 <code>k</code> 。</p><p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 <code>k</code> 笔交易。也就是说，你最多可以买 <code>k</code> 次，卖 <code>k</code> 次。</p><p><strong>注意：</strong> 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：k = 2, prices = [2,4,1]<br>输出：2<br>解释：在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：k = 2, prices = [3,2,6,5,0,3]<br>输出：7<br>解释：在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。<br>     随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= k &lt;= 100</code></li><li><code>0 &lt;= prices.length &lt;= 1000</code></li><li><code>0 &lt;= prices[i] &lt;= 1000</code></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(<span class="hljs-type">int</span> k, vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">buy</span><span class="hljs-params">(k + <span class="hljs-number">1</span>, INT_MIN)</span>, <span class="hljs-title">sell</span><span class="hljs-params">(k + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span></span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> price : prices) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i) &#123;<br>                buy[i] = <span class="hljs-built_in">max</span>(buy[i], sell[i - <span class="hljs-number">1</span>] - price);<br>                sell[i] = <span class="hljs-built_in">max</span>(sell[i], buy[i] + price);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> sell[k];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>dynamic_programming</category>
      
      <category>stock</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>greedy_algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>hard</tag>
      
      <tag>dynamic_programming</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 123 - Best Time to Buy and Sell Stock III</title>
    <link href="/Algorithm/LeetCode/Stock/LeetCode-123-Best-Time-to-Buy-and-Sell-Stock-III/"/>
    <url>/Algorithm/LeetCode/Stock/LeetCode-123-Best-Time-to-Buy-and-Sell-Stock-III/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-danger">hard</span></p>          </div><div class="note note-primary">            <p><strong>Stock Series:</strong></p><p><a href="/Algorithm/LeetCode/Stock/LeetCode-121-Best-Time-to-Buy-and-Sell-Stock">Part 1: LeetCode 121 - Best Time to Buy and Sell Stock</a><br><a href="/Algorithm/LeetCode/Stock/LeetCode-122-Best-Time-to-Buy-and-Sell-Stock-II">Part 2: LeetCode 122 - Best Time to Buy and Sell Stock II</a><br><strong>Part 3: LeetCode 123 - Best Time to Buy and Sell Stock III</strong><br><a href="/Algorithm/LeetCode/Stock/LeetCode-188-Best-Time-to-Buy-and-Sell-Stock-IV">Part 4: LeetCode 188 - Best Time to Buy and Sell Stock IV</a><br><a href="/Algorithm/LeetCode/Stock/LeetCode-309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown">Part 5: LeetCode 309 - Best Time to Buy and Sell Stock with Cooldown</a><br><a href="/Algorithm/LeetCode/Stock/LeetCode-714-Best-Time-to-Buy-and-Sell-Stock-with-Transaction-Fee">Part 6: LeetCode 714 - Best Time to Buy and Sell Stock with Transaction Fee</a></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Best-Time-to-Buy-and-Sell-Stock-III"><a href="#English-Best-Time-to-Buy-and-Sell-Stock-III" class="headerlink" title="English (Best Time to Buy and Sell Stock III)"></a>English (Best Time to Buy and Sell Stock III)</h3><p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the $i^{th}$ day.</p><p>Find the maximum profit you can achieve. You may complete <strong>at most two transactions</strong>.</p><p><strong>Note:</strong> You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: prices = [3,3,5,0,0,3,1,4]<br>Output: 6<br>Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.<br>Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: prices = [1,2,3,4,5]<br>Output: 4<br>Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.<br>Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.<br></code></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: prices = [7,6,4,3,1]<br>Output: 0<br>Explanation: In this case, no transaction is done, i.e. max profit = 0.<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 10^5</code></li><li><code>0 &lt;= prices[i] &lt;= 10^5</code></li></ul><h3 id="Chinese-买卖股票的最佳时机-III"><a href="#Chinese-买卖股票的最佳时机-III" class="headerlink" title="Chinese (买卖股票的最佳时机 III)"></a>Chinese (买卖股票的最佳时机 III)</h3><p>给定一个数组，它的第 <code>i</code> 个元素是一支给定的股票在第 <code>i</code> 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 <strong>两笔</strong> 交易。</p><p><strong>注意：</strong> 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：prices = [3,3,5,0,0,3,1,4]<br>输出：6<br>解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。<br>     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：prices = [1,2,3,4,5]<br>输出：4<br>解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。<br>     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。<br>     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：prices = [7,6,4,3,1]<br>输出：0<br>解释：在这个情况下, 没有交易完成, 所以最大利润为 0。<br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：prices = [1]<br>输出：0<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 10^5</code></li><li><code>0 &lt;= prices[i] &lt;= 10^5</code></li></ul><h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br>        <span class="hljs-type">int</span> first_buy = INT_MIN, first_sell = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> second_buy = INT_MIN, second_sell = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> price : prices) &#123;<br>            first_buy = <span class="hljs-built_in">max</span>(first_buy, -price);<br>            first_sell = <span class="hljs-built_in">max</span>(first_sell, first_buy + price);<br>            second_buy = <span class="hljs-built_in">max</span>(second_buy, first_sell - price);<br>            second_sell = <span class="hljs-built_in">max</span>(second_sell, second_buy + price);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> second_sell;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br>        <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> n = <span class="hljs-number">2</span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">buy</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, INT_MIN)</span>, <span class="hljs-title">sell</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span></span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> price : prices) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>                buy[i] = <span class="hljs-built_in">max</span>(buy[i], sell[i - <span class="hljs-number">1</span>] - price);<br>                sell[i] = <span class="hljs-built_in">max</span>(sell[i], buy[i] + price);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> sell[n];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>dynamic_programming</category>
      
      <category>stock</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>greedy_algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>hard</tag>
      
      <tag>dynamic_programming</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 122 - Best Time to Buy and Sell Stock II</title>
    <link href="/Algorithm/LeetCode/Stock/LeetCode-122-Best-Time-to-Buy-and-Sell-Stock-II/"/>
    <url>/Algorithm/LeetCode/Stock/LeetCode-122-Best-Time-to-Buy-and-Sell-Stock-II/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-warning">medium</span></p>          </div><div class="note note-primary">            <p><strong>Stock Series:</strong></p><p><a href="/Algorithm/LeetCode/Stock/LeetCode-121-Best-Time-to-Buy-and-Sell-Stock">Part 1: LeetCode 121 - Best Time to Buy and Sell Stock</a><br><strong>Part 2: LeetCode 122 - Best Time to Buy and Sell Stock II</strong><br><a href="/Algorithm/LeetCode/Stock/LeetCode-123-Best-Time-to-Buy-and-Sell-Stock-III">Part 3: LeetCode 123 - Best Time to Buy and Sell Stock III</a><br><a href="/Algorithm/LeetCode/Stock/LeetCode-188-Best-Time-to-Buy-and-Sell-Stock-IV">Part 4: LeetCode 188 - Best Time to Buy and Sell Stock IV</a><br><a href="/Algorithm/LeetCode/Stock/LeetCode-309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown">Part 5: LeetCode 309 - Best Time to Buy and Sell Stock with Cooldown</a><br><a href="/Algorithm/LeetCode/Stock/LeetCode-714-Best-Time-to-Buy-and-Sell-Stock-with-Transaction-Fee">Part 6: LeetCode 714 - Best Time to Buy and Sell Stock with Transaction Fee</a></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Best-Time-to-Buy-and-Sell-Stock-II"><a href="#English-Best-Time-to-Buy-and-Sell-Stock-II" class="headerlink" title="English (Best Time to Buy and Sell Stock II)"></a>English (Best Time to Buy and Sell Stock II)</h3><p>You are given an integer array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the $i^{th}$ day.</p><p>On each day, you may decide to buy and&#x2F;or sell the stock. You can only hold <strong>at most one</strong> share of the stock at any time. However, you can buy it then immediately sell it on the <strong>same day</strong>.</p><p>Find and return the <strong>maximum</strong> profit you can achieve.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: prices = [7,1,5,3,6,4]<br>Output: 7<br>Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.<br>Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.<br>Total profit is 4 + 3 = 7.<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: prices = [1,2,3,4,5]<br>Output: 4<br>Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.<br>Total profit is 4.<br></code></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: prices = [7,6,4,3,1]<br>Output: 0<br>Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 3 * 10^4</code></li><li><code>0 &lt;= prices[i] &lt;= 10^4</code></li></ul><h3 id="Chinese-买卖股票的最佳时机-II"><a href="#Chinese-买卖股票的最佳时机-II" class="headerlink" title="Chinese (买卖股票的最佳时机 II)"></a>Chinese (买卖股票的最佳时机 II)</h3><p>给你一个整数数组 <code>prices</code> ，其中 <code>prices[i]</code> 表示某支股票第 <code>i</code> 天的价格。</p><p>在每一天，你可以决定是否购买和&#x2F;或出售股票。你在任何时候 <strong>最多</strong> 只能持有 <strong>一股</strong> 股票。你也可以先购买，然后在 <strong>同一天</strong> 出售。</p><p>返回 你能获得的 <strong>最大</strong> 利润 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：prices = [7,1,5,3,6,4]<br>输出：7<br>解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。<br>     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。<br>     总利润为 4 + 3 = 7 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：prices = [1,2,3,4,5]<br>输出：4<br>解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。<br>     总利润为 4 。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：prices = [7,6,4,3,1]<br>输出：0<br>解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 3 * 10^4</code></li><li><code>0 &lt;= prices[i] &lt;= 10^4</code></li></ul><h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = prices.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> prev = prices[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-type">int</span> curr = prices[i];<br>            <span class="hljs-keyword">if</span> (curr &gt; prev) &#123;<br>                res += curr - prev;<br>            &#125;<br><br>            prev = curr;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, n = prices.<span class="hljs-built_in">size</span>(); i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-type">int</span> diff = prices[i] - prices[i - <span class="hljs-number">1</span>]; diff &gt; <span class="hljs-number">0</span>) &#123;<br>                res += diff;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution 3"></a>Solution 3</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = prices.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">has</span><span class="hljs-params">(n)</span>, <span class="hljs-title">not_has</span><span class="hljs-params">(n)</span></span>;<br>        has[<span class="hljs-number">0</span>] = -prices[<span class="hljs-number">0</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>            has[i] = <span class="hljs-built_in">max</span>(has[i - <span class="hljs-number">1</span>], not_has[i - <span class="hljs-number">1</span>] - prices[i]);<br>            not_has[i] = <span class="hljs-built_in">max</span>(not_has[i - <span class="hljs-number">1</span>], has[i - <span class="hljs-number">1</span>] + prices[i]);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(has[n - <span class="hljs-number">1</span>], not_has[n - <span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>dynamic_programming</category>
      
      <category>stock</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>greedy_algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>medium</tag>
      
      <tag>dynamic_programming</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 121 - Best Time to Buy and Sell Stock</title>
    <link href="/Algorithm/LeetCode/Stock/LeetCode-121-Best-Time-to-Buy-and-Sell-Stock/"/>
    <url>/Algorithm/LeetCode/Stock/LeetCode-121-Best-Time-to-Buy-and-Sell-Stock/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-success">easy</span></p>          </div><div class="note note-primary">            <p><strong>Stock Series:</strong></p><p><strong>Part 1: LeetCode 121 - Best Time to Buy and Sell Stock</strong><br><a href="/Algorithm/LeetCode/Stock/LeetCode-122-Best-Time-to-Buy-and-Sell-Stock-II">Part 2: LeetCode 122 - Best Time to Buy and Sell Stock II</a><br><a href="/Algorithm/LeetCode/Stock/LeetCode-123-Best-Time-to-Buy-and-Sell-Stock-III">Part 3: LeetCode 123 - Best Time to Buy and Sell Stock III</a><br><a href="/Algorithm/LeetCode/Stock/LeetCode-188-Best-Time-to-Buy-and-Sell-Stock-IV">Part 4: LeetCode 188 - Best Time to Buy and Sell Stock IV</a><br><a href="/Algorithm/LeetCode/Stock/LeetCode-309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown">Part 5: LeetCode 309 - Best Time to Buy and Sell Stock with Cooldown</a><br><a href="/Algorithm/LeetCode/Stock/LeetCode-714-Best-Time-to-Buy-and-Sell-Stock-with-Transaction-Fee">Part 6: LeetCode 714 - Best Time to Buy and Sell Stock with Transaction Fee</a></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Best-Time-to-Buy-and-Sell-Stock"><a href="#English-Best-Time-to-Buy-and-Sell-Stock" class="headerlink" title="English (Best Time to Buy and Sell Stock)"></a>English (Best Time to Buy and Sell Stock)</h3><p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the $i^{th}$ day.</p><p>You want to maximize your profit by choosing a <strong>single day</strong> to buy one stock and choosing a <strong>different day in the future</strong> to sell that stock.</p><p>Return <em>the maximum profit you can achieve from this transaction</em>. If you cannot achieve any profit, return <code>0</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: prices = [7,1,5,3,6,4]<br>Output: 5<br>Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.<br>Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: prices = [7,6,4,3,1]<br>Output: 0<br>Explanation: In this case, no transactions are done and the max profit = 0.<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 10^5</code></li><li><code>0 &lt;= prices[i] &lt;= 10^4</code></li></ul><h3 id="Chinese-买卖股票的最佳时机"><a href="#Chinese-买卖股票的最佳时机" class="headerlink" title="Chinese (买卖股票的最佳时机)"></a>Chinese (买卖股票的最佳时机)</h3><p>给定一个数组 <code>prices</code> ，它的第 <code>i</code> 个元素 <code>prices[i]</code> 表示一支给定股票第 i 天的价格。</p><p>你只能选择 <strong>某一天</strong> 买入这只股票，并选择在 <strong>未来的某一个不同的日子</strong> 卖出该股票。设计一个算法来计算你所能获取的最大利润。</p><p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 <code>0</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：[7,1,5,3,6,4]<br>输出：5<br>解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。<br>     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：prices = [7,6,4,3,1]<br>输出：0<br>解释：在这种情况下, 没有交易完成, 所以最大利润为 0。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 10^5</code></li><li><code>0 &lt;= prices[i] &lt;= 10^4</code></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br>        <span class="hljs-type">int</span> max_profit = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">int</span> min_price = INT_MAX;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> price : prices) &#123;<br>            max_profit = <span class="hljs-built_in">max</span>(max_profit, price - min_price);<br>            min_price = <span class="hljs-built_in">min</span>(min_price, price);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> max_profit;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>dynamic_programming</category>
      
      <category>stock</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>greedy_algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>easy</tag>
      
      <tag>dynamic_programming</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Learn muduo - Part 12 C++ Experience Talk</title>
    <link href="/Dev/Library/muduo/Learn-muduo-Part-12-C-Experience-Talk/"/>
    <url>/Dev/Library/muduo/Learn-muduo-Part-12-C-Experience-Talk/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>muduo: <a href="https://github.com/chenshuo/muduo">https://github.com/chenshuo/muduo</a></p>          </div><div class="note note-primary">            <p>本系列是 <a href="https://chenshuo.com/book/">《Linux 多线程服务端编程：使用 muduo C++ 网络库》</a> 学习笔记。</p><p><strong>Part 12: C++ 经验谈</strong></p>          </div><h2 id="一种特别的-itoa-实现"><a href="#一种特别的-itoa-实现" class="headerlink" title="一种特别的 itoa 实现"></a>一种特别的 <code>itoa</code> 实现</h2><h3 id="一般实现"><a href="#一般实现" class="headerlink" title="一般实现"></a>一般实现</h3><p>一般我们想实现 <code>int</code> 转 <code>char*</code>，往往采用下面的形式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">itoa</span><span class="hljs-params">(<span class="hljs-type">char</span> buf[], <span class="hljs-type">int</span> value)</span> </span>&#123;<br>    <span class="hljs-type">bool</span> negative = value &lt; <span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> abs_value = value &gt;= <span class="hljs-number">0</span> ? value : -value;<br><br>    <span class="hljs-type">char</span>* p = buf;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> lsd = abs_value % <span class="hljs-number">10</span>;<br>        abs_value /= <span class="hljs-number">10</span>;<br>        *p++ = <span class="hljs-built_in">char</span>(<span class="hljs-string">&#x27;0&#x27;</span> + lsd);<br>    &#125; <span class="hljs-keyword">while</span> (abs_value &gt; <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">if</span> (negative) &#123;<br>        *p++ = <span class="hljs-string">&#x27;-&#x27;</span>;<br>    &#125;<br>    *p = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    std::<span class="hljs-built_in">reverse</span>(buf, p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>&#123;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];<br>    <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(buf));<br><br>    <span class="hljs-built_in">itoa</span>(buf, i);<br>    std::cout &lt;&lt; buf &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">f</span>(<span class="hljs-number">0</span>);        <span class="hljs-comment">// 0</span><br>    <span class="hljs-built_in">f</span>(<span class="hljs-number">1</span>);        <span class="hljs-comment">// 1</span><br>    <span class="hljs-built_in">f</span>(<span class="hljs-number">-1</span>);       <span class="hljs-comment">// -1</span><br>    <span class="hljs-built_in">f</span>(INT_MAX);  <span class="hljs-comment">// 2147483647</span><br>    <span class="hljs-built_in">f</span>(INT_MIN);  <span class="hljs-comment">// -2147483648</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="特别实现"><a href="#特别实现" class="headerlink" title="特别实现"></a>特别实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">itoa</span><span class="hljs-params">(<span class="hljs-type">char</span> buf[], <span class="hljs-type">int</span> value)</span> </span>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> digits[] = &#123;<span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>,<br>                                  <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>&#125;;<br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span>* zero = digits + <span class="hljs-number">9</span>;<br><br>    <span class="hljs-type">int</span> i = value;<br>    <span class="hljs-type">char</span>* p = buf;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-type">int</span> lsd = i % <span class="hljs-number">10</span>;<br>        i /= <span class="hljs-number">10</span>;<br>        *p++ = zero[lsd];<br>    &#125; <span class="hljs-keyword">while</span> (i != <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-number">0</span>) &#123;<br>        *p++ = <span class="hljs-string">&#x27;-&#x27;</span>;<br>    &#125;<br>    *p = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    std::<span class="hljs-built_in">reverse</span>(buf, p);<br>&#125;<br></code></pre></td></tr></table></figure><p>此算法基于 <code>(-1) / 10 = 0</code> <code>(-1) % 10 = -1</code> 的规则。（C99 和 C++11 都规定商向 0 取整）</p><h2 id="再探-std-string"><a href="#再探-std-string" class="headerlink" title="再探 std::string"></a>再探 <code>std::string</code></h2><h3 id="直接拷贝（eager-copy）"><a href="#直接拷贝（eager-copy）" class="headerlink" title="直接拷贝（eager copy）"></a>直接拷贝（eager copy）</h3><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现 1"></a>实现 1</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">string</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">const_pointer <span class="hljs-title">data</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>  </span>&#123; <span class="hljs-keyword">return</span> start; &#125;<br>    <span class="hljs-function">iterator <span class="hljs-title">begin</span><span class="hljs-params">()</span>            </span>&#123; <span class="hljs-keyword">return</span> start; &#125;<br>    <span class="hljs-function">iterator <span class="hljs-title">end</span><span class="hljs-params">()</span>              </span>&#123; <span class="hljs-keyword">return</span> finish; &#125;<br>    <span class="hljs-function">size_type <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>      </span>&#123; <span class="hljs-keyword">return</span> finish - start; &#125;<br>    <span class="hljs-function">size_type <span class="hljs-title">capacity</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>  </span>&#123; <span class="hljs-keyword">return</span> end_of_storage - start; &#125;<br><br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">char</span>* start;<br>    <span class="hljs-type">char</span>* finish;<br>    <span class="hljs-type">char</span>* end_of_storage;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="实现-2"><a href="#实现-2" class="headerlink" title="实现 2"></a>实现 2</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">string</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">const_pointer <span class="hljs-title">data</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>  </span>&#123; <span class="hljs-keyword">return</span> start; &#125;<br>    <span class="hljs-function">iterator <span class="hljs-title">begin</span><span class="hljs-params">()</span>            </span>&#123; <span class="hljs-keyword">return</span> start; &#125;<br>    <span class="hljs-function">iterator <span class="hljs-title">end</span><span class="hljs-params">()</span>              </span>&#123; <span class="hljs-keyword">return</span> start + size_; &#125;<br>    <span class="hljs-function">size_type <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>      </span>&#123; <span class="hljs-keyword">return</span> size_; &#125;<br>    <span class="hljs-function">size_type <span class="hljs-title">capacity</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>  </span>&#123; <span class="hljs-keyword">return</span> capacity_; &#125;<br><br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">char</span>* start;<br>    <span class="hljs-type">size_t</span> size_;<br>    <span class="hljs-type">size_t</span> capacity_;<br>&#125;;<br></code></pre></td></tr></table></figure><p>由于 <code>sizeof(char*) == sizeof(size_t)</code>，所以在空间占用上，<code>std::string</code> 实现 2 与实现 1 没有多大的改变。但是单个字符串往往不到几百兆字节，在 64-bit 下可以将 <code>size_t</code> 改成 <code>uint32_t</code> 从而减小对象的大小，由 24 字节减小为 16 字节。</p><h3 id="写时复制（copy-on-write）"><a href="#写时复制（copy-on-write）" class="headerlink" title="写时复制（copy-on-write）"></a>写时复制（copy-on-write）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">cow_string</span> &#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Rep</span> &#123;<br>        <span class="hljs-type">size_t</span> size;<br>        <span class="hljs-type">size_t</span> capacity;<br>        <span class="hljs-type">size_t</span> refcount;<br>        <span class="hljs-type">char</span>*  data[<span class="hljs-number">1</span>];<br>    &#125;;<br>    <span class="hljs-type">char</span>* start;<br>&#125;;<br></code></pre></td></tr></table></figure><p><code>start = data[0]</code></p><p>COW 时间复杂度不一定符合直觉，它拷贝字符串是 <code>O(1)</code> 时间，但拷贝之后第一次 <code>operator[]</code> 有可能是 <code>O(N)</code> 时间。</p><h3 id="段字符串优化（SSO）"><a href="#段字符串优化（SSO）" class="headerlink" title="段字符串优化（SSO）"></a>段字符串优化（SSO）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">sso_string</span> &#123;<br>    <span class="hljs-type">char</span>* start;<br>    <span class="hljs-type">size_t</span> size;<br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> kLocalSize = <span class="hljs-number">15</span>;<br>    <span class="hljs-keyword">union</span> &#123;<br>        <span class="hljs-type">char</span> buffer[kLocalSize + <span class="hljs-number">1</span>];<br>        <span class="hljs-type">size_t</span> capacity;<br>    &#125; data;<br>&#125;;<br></code></pre></td></tr></table></figure><p>短字符串（size &lt;&#x3D; 15）放在栈上，长字符串放在堆上。</p><p>SSO string 在 64-bits 中有个小小的优化空间：如果允许字符串 <code>max_size()</code> 不大于 4GiB 的话，可以用 <code>uint32_t</code> 来表示长度和容量，这样同样是 32 字节的 string 对象，local buffer 可以增大至 19 字节。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">sso_string</span> &#123;<br>    <span class="hljs-type">char</span>* start;<br>    <span class="hljs-type">uint32_t</span> size;<br><br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> kLocalSize = <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">void</span>*) == <span class="hljs-number">8</span> ? <span class="hljs-number">19</span> : <span class="hljs-number">15</span>;<br><br>    <span class="hljs-keyword">union</span> &#123;<br>        <span class="hljs-type">char</span> buffer[kLocalSize + <span class="hljs-number">1</span>];<br>        <span class="hljs-type">uint32_t</span> capacity;<br>    &#125; data;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>建议针对不同的应用负载选用不同的 string：</p><ul><li>对于短字符串，用 SSO string；</li><li>对于中等长度的字符串，用 eager copy；</li><li>对于长字符串，用 COW。</li></ul>]]></content>
    
    
    <categories>
      
      <category>library</category>
      
      <category>muduo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>library</tag>
      
      <tag>muduo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Learn muduo - Part 11 Rethinking C++ Object Orientation and Virtual Functions</title>
    <link href="/Dev/Library/muduo/Learn-muduo-Part-11-Rethinking-C-Object-Orientation-and-Virtual-Functions/"/>
    <url>/Dev/Library/muduo/Learn-muduo-Part-11-Rethinking-C-Object-Orientation-and-Virtual-Functions/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>muduo: <a href="https://github.com/chenshuo/muduo">https://github.com/chenshuo/muduo</a></p>          </div><div class="note note-primary">            <p>本系列是 <a href="https://chenshuo.com/book/">《Linux 多线程服务端编程：使用 muduo C++ 网络库》</a> 学习笔记。</p><p><strong>Part 11: 反思 C++ 面向对象与虚函数</strong></p>          </div><h2 id="克制"><a href="#克制" class="headerlink" title="克制"></a>克制</h2><ul><li>克制使用继承。</li><li>可以有很简单的类，但不能有很复杂的类。</li></ul><h2 id="ABI"><a href="#ABI" class="headerlink" title="ABI"></a>ABI</h2><p>C++ 编译器 ABI（Application Binary Interface）主要内容包括以下几个方面：</p><ul><li>函数参数传递的方式，比如 x86-64 用寄存器来传函数的前 4 个整数参数；</li><li>虚函数的调用方式，通常是 vptr&#x2F;vtbl 机制，然后用 <code>vtbl[offer]</code> 来调用；</li><li>struct 和 class 的内存布局，通过偏移量来访问数据成员；</li><li>name mangling；</li><li>RTTI 和异常处理的实现。</li></ul><h2 id="动态库接口的推荐做法"><a href="#动态库接口的推荐做法" class="headerlink" title="动态库接口的推荐做法"></a>动态库接口的推荐做法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// graphics.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Graphics</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Graphics</span>();   <span class="hljs-comment">// outline ctor</span><br>    ~<span class="hljs-built_in">Graphics</span>();  <span class="hljs-comment">// outline dtor</span><br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">drawLine</span><span class="hljs-params">(<span class="hljs-type">int</span> x0, <span class="hljs-type">int</span> y0, <span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> y1)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">drawLine</span><span class="hljs-params">(Point p0, Point p1)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">drawRectangle</span><span class="hljs-params">(<span class="hljs-type">int</span> x0, <span class="hljs-type">int</span> y0, <span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> y1)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">drawRectangle</span><span class="hljs-params">(Point p0, Point p1)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">drawArc</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> r)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">drawArc</span><span class="hljs-params">(Point p0, <span class="hljs-type">int</span> r)</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Impl</span>;<br>    std::unique_ptr&lt;Impl&gt; impl;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// graphics.cc for .so/.dll</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;graphics.h&quot;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Graphics</span>::Impl &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">drawLine</span><span class="hljs-params">(<span class="hljs-type">int</span> x0, <span class="hljs-type">int</span> y0, <span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> y1)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">drawLine</span><span class="hljs-params">(Point p0, Point p1)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">drawRectangle</span><span class="hljs-params">(<span class="hljs-type">int</span> x0, <span class="hljs-type">int</span> y0, <span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> y1)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">drawRectangle</span><span class="hljs-params">(Point p0, Point p1)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">drawArc</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> r)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">drawArc</span><span class="hljs-params">(Point p0, <span class="hljs-type">int</span> r)</span></span>;<br>&#125;;<br><br>Graphics::<span class="hljs-built_in">Graphics</span>() : impl&#123;std::<span class="hljs-built_in">make_unique</span>&lt;Impl&gt;()&#125; &#123;<br>&#125;<br>Graphics::~<span class="hljs-built_in">Graphics</span>() = <span class="hljs-keyword">default</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Graphics::drawLine</span><span class="hljs-params">(<span class="hljs-type">int</span> x0, <span class="hljs-type">int</span> y0, <span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> y1)</span> </span>&#123;<br>    impl-&gt;<span class="hljs-built_in">drawLine</span>(x0, y0, x1, y1);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Graphics::drawLine</span><span class="hljs-params">(Point p0, Point p1)</span> </span>&#123;<br>    impl-&gt;<span class="hljs-built_in">drawLine</span>(p0, p1);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="printf-居然也能按位置输出"><a href="#printf-居然也能按位置输出" class="headerlink" title="printf 居然也能按位置输出"></a><code>printf</code> 居然也能按位置输出</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i=%2$d, j=%1$d\n&quot;</span>, j, i);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs log">i=1, j=2<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>library</category>
      
      <category>muduo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>vtable</tag>
      
      <tag>vfunction</tag>
      
      <tag>library</tag>
      
      <tag>muduo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Learn muduo - Part 10 C++ Compiler Link Model Essentials</title>
    <link href="/Dev/Library/muduo/Learn-muduo-Part-10-C-Compiler-Link-Model-Essentials/"/>
    <url>/Dev/Library/muduo/Learn-muduo-Part-10-C-Compiler-Link-Model-Essentials/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>muduo: <a href="https://github.com/chenshuo/muduo">https://github.com/chenshuo/muduo</a></p>          </div><div class="note note-primary">            <p>本系列是 <a href="https://chenshuo.com/book/">《Linux 多线程服务端编程：使用 muduo C++ 网络库》</a> 学习笔记。</p><p><strong>Part 10: C++ 编译链接模型精要</strong></p>          </div><h2 id="重载决议小例子"><a href="#重载决议小例子" class="headerlink" title="重载决议小例子"></a>重载决议小例子</h2><p>C&#x2F;C++ 可以看做采用 one pass 编译，解析语义时只能基于前面已经解析出的语义。比如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std::literals;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;int&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">foo</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-type">char</span> i)</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;char&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">bar</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果输出 <code>int</code> 而不是 <code>char</code>。</p><h2 id="检查头文件引入小技巧"><a href="#检查头文件引入小技巧" class="headerlink" title="检查头文件引入小技巧"></a>检查头文件引入小技巧</h2><p>头文件 include 具有传染性。</p><p>假如有这样的例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::string s = <span class="hljs-string">&quot;Hello World&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>头文件 <code>&lt;string&gt;</code> 并未被直接 include，但仍能编译通过。有个小技巧可以检查其是如何被 include 进来的，原理是在当前目录创建一个 <code>string</code> 文件，故意制造编译错误。</p><p>步骤如下：</p><ol><li><p>创建一个指示编译失败的 <code>string</code> 文件。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cat</span> &gt; string<br><span class="hljs-comment">#error error</span><br>^D<br></code></pre></td></tr></table></figure></li><li><p>编译</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ g++ -M -I . test.cc<br>In file included from test.cc:1:<br>In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1/iostream:37:<br>In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1/ios:214:<br>In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1/__locale:15:<br>./string:1:2: error: error<br><span class="hljs-comment">#error error</span><br></code></pre></td></tr></table></figure></li></ol><p>可见头文件 <code>&lt;string&gt;</code> 是在 <code>/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1/__locale:15</code> 处被 include 的。</p>]]></content>
    
    
    <categories>
      
      <category>library</category>
      
      <category>muduo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>library</tag>
      
      <tag>muduo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Learn muduo - Part 9 Distributed Systems Engineering Practice</title>
    <link href="/Dev/Library/muduo/Learn-muduo-Part-9-Distributed-Systems-Engineering-Practice/"/>
    <url>/Dev/Library/muduo/Learn-muduo-Part-9-Distributed-Systems-Engineering-Practice/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>muduo: <a href="https://github.com/chenshuo/muduo">https://github.com/chenshuo/muduo</a></p>          </div><div class="note note-primary">            <p>本系列是 <a href="https://chenshuo.com/book/">《Linux 多线程服务端编程：使用 muduo C++ 网络库》</a> 学习笔记。</p><p><strong>Part 9: 分布式系统工程实践</strong></p>          </div><h2 id="险恶的分布式问题"><a href="#险恶的分布式问题" class="headerlink" title="险恶的分布式问题"></a>险恶的分布式问题</h2><p>消息传递的延时性不固定，时间与事件顺序违反直觉。</p><h3 id="Case-1"><a href="#Case-1" class="headerlink" title="Case 1"></a>Case 1</h3><pre><code class=" mermaid">graph TDShop --&quot;a:ack&quot;--&gt; CustomerShop --&quot;c:confirm&quot;--&gt; CustomerCustomer -.&quot;0:order&quot;.-&gt; ShopShop --&quot;b:ship&quot;--&gt; WarehouseWarehouse --&quot;d:deliver&quot;--&gt; Customer</code></pre><p>Customer 收到的 3 条消息有 3 种可能的顺序</p><ol><li>a, c, d</li><li>a, d, c</li><li>d, a, c</li></ol><h3 id="Case-2"><a href="#Case-2" class="headerlink" title="Case 2"></a>Case 2</h3><pre><code class=" mermaid">graph TDClient --&quot;1:request&quot;--&gt; MasterMaster --&quot;2:response&quot;--&gt; ClientMaster --&quot;3:assign&quot;--&gt; WorkerWorker --&quot;4:result&quot;--&gt; Client</code></pre><p><code>&quot;4:result&quot;</code> 完全有可能先于 <code>&quot;2:response&quot;</code> 到达客户端。</p><h2 id="分布式系统中心跳协议的设计"><a href="#分布式系统中心跳协议的设计" class="headerlink" title="分布式系统中心跳协议的设计"></a>分布式系统中心跳协议的设计</h2><p>有两个关键点：</p><ol><li>要在工作线程发送，不要单独起一个“心跳线程”。<br>原因：防止工作线程死锁或阻塞时还在继续发心跳。</li><li>与业务消息用同一个连接，不要单独用“心跳连接”。<br>原因：验证本连接网络畅通，以及本连接实际没有被防火墙切断。</li></ol><h2 id="分布式系统中的进程标识"><a href="#分布式系统中的进程标识" class="headerlink" title="分布式系统中的进程标识"></a>分布式系统中的进程标识</h2><h3 id="错误做法"><a href="#错误做法" class="headerlink" title="错误做法"></a>错误做法</h3><h4 id="ip-port"><a href="#ip-port" class="headerlink" title="ip:port"></a><code>ip:port</code></h4><p>对于无状态服务没问题，但对于有状态服务来说无法区分状态。</p><h4 id="host-pid"><a href="#host-pid" class="headerlink" title="host:pid"></a><code>host:pid</code></h4><p><code>pid</code> 的状态空间很小，重启后获得与“前世”相同 pid 的概率为 1&#x2F;32768，存在相同的可能，存在风险。</p><h3 id="正确做法"><a href="#正确做法" class="headerlink" title="正确做法"></a>正确做法</h3><p>采用 <code>ip:port:start_time:pid</code>。</p><p>好处：</p><ul><li>容易保证唯一性。如果程序短时间内重启，那么前后两个进程的 pid 必定不重复（就算每秒创建 1000 个进程，也要 30 多秒才会轮回，而以这么高的速度创建进程的话，服务器基本瘫痪了）。如果程序运行了相当长的一段时间再重启，那么两次启动的 start_time 必定不重复。</li><li>产生这种 gpid（全局描述符） 的成本很低，只有几次低成本系统调用。</li><li>gpid 本身有意义。有 ip（机器位置）、port（什么进程）、start_time（启动时间）、pid（在 <code>/prod</code> 目录中的位置 <code>/prod/pid</code>） 各种信息。</li><li>gpid 具有历史意义，便于将来追溯。比如进程 crash，可以根据 gpid 去历史记录中查询它 crash 之前的 CPU 和内存负载有多大。</li></ul><h2 id="一种自动化的回归测试方案"><a href="#一种自动化的回归测试方案" class="headerlink" title="一种自动化的回归测试方案"></a>一种自动化的回归测试方案</h2><p>对于分布式系统的两个模块 A 和 B。</p><ul><li>mock B 验证测试 A 正常和异常的情况。</li><li>mock A 验证测试 B 正常和异常的情况。</li></ul><p>使得被观察的 A、B 像是缸中之脑。</p>]]></content>
    
    
    <categories>
      
      <category>library</category>
      
      <category>muduo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>library</tag>
      
      <tag>muduo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Learn muduo - Part 8 The Implementation and Design of the muduo Network Library</title>
    <link href="/Dev/Library/muduo/Learn-muduo-Part-8-The-Implementation-and-Design-of-the-muduo-Network-Library/"/>
    <url>/Dev/Library/muduo/Learn-muduo-Part-8-The-Implementation-and-Design-of-the-muduo-Network-Library/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>muduo: <a href="https://github.com/chenshuo/muduo">https://github.com/chenshuo/muduo</a></p>          </div><div class="note note-primary">            <p>本系列是 <a href="https://chenshuo.com/book/">《Linux 多线程服务端编程：使用 muduo C++ 网络库》</a> 学习笔记。</p><p><strong>Part 8: muduo 网络库设计与实现</strong></p>          </div>]]></content>
    
    
    <categories>
      
      <category>library</category>
      
      <category>muduo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>library</tag>
      
      <tag>muduo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Learn muduo - Part 7 Programming Demo with muduo</title>
    <link href="/Dev/Library/muduo/Learn-muduo-Part-7-Programming-Demo-with-muduo/"/>
    <url>/Dev/Library/muduo/Learn-muduo-Part-7-Programming-Demo-with-muduo/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>muduo: <a href="https://github.com/chenshuo/muduo">https://github.com/chenshuo/muduo</a></p>          </div><div class="note note-primary">            <p>本系列是 <a href="https://chenshuo.com/book/">《Linux 多线程服务端编程：使用 muduo C++ 网络库》</a> 学习笔记。</p><p><strong>Part 7: muduo 编程示例</strong></p>          </div><h2 id="shutdown-和-close-区别"><a href="#shutdown-和-close-区别" class="headerlink" title="shutdown 和 close 区别"></a>shutdown 和 close 区别</h2><p>TCP 协议是全双工协议，同一文件描述符即可读又可写。</p><ul><li><code>::shutdown(sockfd, SHUT_WR)</code> 关闭了写连接，保留读连接。</li><li><code>::close(sockfd)</code> 就不能读写了。</li></ul><h2 id="Protobuf-反射"><a href="#Protobuf-反射" class="headerlink" title="Protobuf 反射"></a>Protobuf 反射</h2><p>根据 class name new object：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;google/protobuf/descriptor.h&gt;</span></span><br><br>google::<span class="hljs-function">protobuf::Message* <span class="hljs-title">ProtobufCodec::createMessage</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; typeName)</span> </span>&#123;<br>    google::protobuf::Message* message = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">const</span> google::protobuf::Descriptor* descriptor = google::protobuf::DescriptorPool::<span class="hljs-built_in">generated_pool</span>()-&gt;<span class="hljs-built_in">FindMessageTypeByName</span>(typeName);<br>    <span class="hljs-keyword">if</span> (descriptor) &#123;<br>        <span class="hljs-type">const</span> google::protobuf::Message* prototype = google::protobuf::MessageFactory::<span class="hljs-built_in">generated_factory</span>()-&gt;<span class="hljs-built_in">GetPrototype</span>(descriptor);<br>        <span class="hljs-keyword">if</span> (prototype) &#123;<br>            message = prototype-&gt;<span class="hljs-built_in">New</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> message;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="用-timing-wheel-踢掉空闲连接"><a href="#用-timing-wheel-踢掉空闲连接" class="headerlink" title="用 timing wheel 踢掉空闲连接"></a>用 timing wheel 踢掉空闲连接</h2><p>简单理解：<code>std::vector&lt;std::unordered_set&lt;std::weak_ptr&lt;Connection&gt;&gt; wheel</code></p><ul><li><code>wheel.size</code> 为指定的断开空闲连接的超时时间。</li><li>每过 1s 踢掉 <code>wheel[i]</code> 里的 Connection，然后 i 递增，实际为 <code>i = (i + 1) % wheel.size()</code>。</li><li>踢掉连接操作：<code>connection.lock()</code> 先尝试升级为 <code>std::shared_ptr&lt;Connection&gt;</code>，升级成功再 <code>close()</code>，否则忽略。此举是为了避免在 <code>wheel</code> 中保存 <code>std::shared_ptr&lt;Connection&gt;</code> 而延长本应直接 close 的连接。</li><li>假如某个连接产生数据交互，将其从 wheel 原格子中取出并放入最新时间对应的格子。</li></ul>]]></content>
    
    
    <categories>
      
      <category>library</category>
      
      <category>muduo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>library</tag>
      
      <tag>muduo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Learn muduo - Part 6 Simple Introduction to muduo Network Library</title>
    <link href="/Dev/Library/muduo/Learn-muduo-Part-6-Simple-Introduction-to-muduo-Network-Library/"/>
    <url>/Dev/Library/muduo/Learn-muduo-Part-6-Simple-Introduction-to-muduo-Network-Library/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>muduo: <a href="https://github.com/chenshuo/muduo">https://github.com/chenshuo/muduo</a></p>          </div><div class="note note-primary">            <p>本系列是 <a href="https://chenshuo.com/book/">《Linux 多线程服务端编程：使用 muduo C++ 网络库》</a> 学习笔记。</p><p><strong>Part 6: muduo 网络库简介</strong></p>          </div><h2 id="常见的并发网络服务程序设计方案"><a href="#常见的并发网络服务程序设计方案" class="headerlink" title="常见的并发网络服务程序设计方案"></a>常见的并发网络服务程序设计方案</h2><table><thead><tr><th align="center">方案</th><th align="left">并发模型</th><th align="center">阻塞 IO</th><th align="center">IO 复用</th><th align="center">长连接</th><th align="center">并发性</th><th align="left">特点</th></tr></thead><tbody><tr><td align="center">0</td><td align="left">accept + reaf&#x2F;write</td><td align="center">是</td><td align="center">否</td><td align="center">否</td><td align="center">无</td><td align="left">一次服务一个客户</td></tr><tr><td align="center">1</td><td align="left">accept + fork</td><td align="center">是</td><td align="center">否</td><td align="center">是</td><td align="center">低</td><td align="left">process-per-connection</td></tr><tr><td align="center">2</td><td align="left">accept + thread</td><td align="center">是</td><td align="center">否</td><td align="center">是</td><td align="center">中</td><td align="left">thread-per-connection</td></tr><tr><td align="center">3</td><td align="left">prefork</td><td align="center">是</td><td align="center">否</td><td align="center">是</td><td align="center">低</td><td align="left"></td></tr><tr><td align="center">4</td><td align="left">pre threaded</td><td align="center">是</td><td align="center">否</td><td align="center">是</td><td align="center">中</td><td align="left"></td></tr><tr><td align="center">5</td><td align="left">poll (reactor)</td><td align="center">否</td><td align="center">是</td><td align="center">是</td><td align="center">高</td><td align="left">单线程 reactor</td></tr><tr><td align="center">6</td><td align="left">reactor + thread-per-task</td><td align="center">否</td><td align="center">是</td><td align="center">是</td><td align="center">中</td><td align="left">thread-per-request</td></tr><tr><td align="center">7</td><td align="left">reactor + worker thread</td><td align="center">否</td><td align="center">是</td><td align="center">是</td><td align="center">中</td><td align="left">worker-thread-per-connection</td></tr><tr><td align="center">8</td><td align="left">reactor + thread poll</td><td align="center">否</td><td align="center">是</td><td align="center">是</td><td align="center">高</td><td align="left">主线程 IO，工作线程计算</td></tr><tr><td align="center">9</td><td align="left">reactors in threads</td><td align="center">否</td><td align="center">是</td><td align="center">是</td><td align="center">高</td><td align="left">one loop per thread</td></tr><tr><td align="center">10</td><td align="left">reactors in processes</td><td align="center">否</td><td align="center">是</td><td align="center">是</td><td align="center">高</td><td align="left">Nginx</td></tr><tr><td align="center">11</td><td align="left">reactor + thread pool</td><td align="center">否</td><td align="center">是</td><td align="center">是</td><td align="center">高</td><td align="left">最灵活的 IO 与 CPU 配置</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>library</category>
      
      <category>muduo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>library</tag>
      
      <tag>muduo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Learn muduo - Part 5 Multi-Thread Logging with High Performance</title>
    <link href="/Dev/Library/muduo/Learn-muduo-Part-5-Multi-Thread-Logging-with-High-Performance/"/>
    <url>/Dev/Library/muduo/Learn-muduo-Part-5-Multi-Thread-Logging-with-High-Performance/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>muduo: <a href="https://github.com/chenshuo/muduo">https://github.com/chenshuo/muduo</a></p>          </div><div class="note note-primary">            <p>本系列是 <a href="https://chenshuo.com/book/">《Linux 多线程服务端编程：使用 muduo C++ 网络库》</a> 学习笔记。</p><p><strong>Part 5: 高效的多线程日志</strong></p>          </div><h2 id="线程安全的多线程异步日志"><a href="#线程安全的多线程异步日志" class="headerlink" title="线程安全的多线程异步日志"></a>线程安全的多线程异步日志</h2><p>需要一个队列来讲日志前端的数据传送到后端（日志线程），但这个队列不必是现成的 <code>BlockingQueue&lt;std::string&gt;</code>，因为不用每次产生一条日志消息都通知接收方。</p><p>muduo 日志库采用的是双缓冲（double buffering）技术。</p><p>基本思路：</p><ul><li>准备两块 buffer；</li><li>前端负责往 buffer A 填数据（日志消息）；</li><li>后端负责将 buffer B 的数据写入文件；</li><li>当 buffer A 写满后，交换 A 和 B；</li><li>后端将 buffer A 的数据写入文件；</li><li>而前端则往 buffer B 填入心得日志消息；</li><li>循环往复……</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><blockquote><p>代码位置：muduo&#x2F;base&#x2F;AsyncLogging.cc</p></blockquote><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AsyncLogging::append</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* logline, <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-function">muduo::MutexLockGuard <span class="hljs-title">lock</span><span class="hljs-params">(mutex_)</span></span>;<br>  <span class="hljs-keyword">if</span> (currentBuffer_-&gt;<span class="hljs-built_in">avail</span>() &gt; len)<br>  &#123;<br>    currentBuffer_-&gt;<span class="hljs-built_in">append</span>(logline, len);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    buffers_.<span class="hljs-built_in">push_back</span>(std::<span class="hljs-built_in">move</span>(currentBuffer_));<br><br>    <span class="hljs-keyword">if</span> (nextBuffer_)<br>    &#123;<br>      currentBuffer_ = std::<span class="hljs-built_in">move</span>(nextBuffer_);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      currentBuffer_.<span class="hljs-built_in">reset</span>(<span class="hljs-keyword">new</span> Buffer); <span class="hljs-comment">// Rarely happens</span><br>    &#125;<br>    currentBuffer_-&gt;<span class="hljs-built_in">append</span>(logline, len);<br>    cond_.<span class="hljs-built_in">notify</span>();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AsyncLogging::threadFunc</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-built_in">assert</span>(running_ == <span class="hljs-literal">true</span>);<br>  latch_.<span class="hljs-built_in">countDown</span>();<br>  <span class="hljs-function">LogFile <span class="hljs-title">output</span><span class="hljs-params">(basename_, rollSize_, <span class="hljs-literal">false</span>)</span></span>;<br>  <span class="hljs-function">BufferPtr <span class="hljs-title">newBuffer1</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Buffer)</span></span>;<br>  <span class="hljs-function">BufferPtr <span class="hljs-title">newBuffer2</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Buffer)</span></span>;<br>  newBuffer1-&gt;<span class="hljs-built_in">bzero</span>();<br>  newBuffer2-&gt;<span class="hljs-built_in">bzero</span>();<br>  BufferVector buffersToWrite;<br>  buffersToWrite.<span class="hljs-built_in">reserve</span>(<span class="hljs-number">16</span>);<br>  <span class="hljs-keyword">while</span> (running_)<br>  &#123;<br>    <span class="hljs-built_in">assert</span>(newBuffer1 &amp;&amp; newBuffer1-&gt;<span class="hljs-built_in">length</span>() == <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">assert</span>(newBuffer2 &amp;&amp; newBuffer2-&gt;<span class="hljs-built_in">length</span>() == <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">assert</span>(buffersToWrite.<span class="hljs-built_in">empty</span>());<br><br>    &#123;<br>      <span class="hljs-function">muduo::MutexLockGuard <span class="hljs-title">lock</span><span class="hljs-params">(mutex_)</span></span>;<br>      <span class="hljs-keyword">if</span> (buffers_.<span class="hljs-built_in">empty</span>())  <span class="hljs-comment">// unusual usage!</span><br>      &#123;<br>        cond_.<span class="hljs-built_in">waitForSeconds</span>(flushInterval_);<br>      &#125;<br>      buffers_.<span class="hljs-built_in">push_back</span>(std::<span class="hljs-built_in">move</span>(currentBuffer_));<br>      currentBuffer_ = std::<span class="hljs-built_in">move</span>(newBuffer1);<br>      buffersToWrite.<span class="hljs-built_in">swap</span>(buffers_);<br>      <span class="hljs-keyword">if</span> (!nextBuffer_)<br>      &#123;<br>        nextBuffer_ = std::<span class="hljs-built_in">move</span>(newBuffer2);<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">assert</span>(!buffersToWrite.<span class="hljs-built_in">empty</span>());<br><br>    <span class="hljs-keyword">if</span> (buffersToWrite.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">25</span>)<br>    &#123;<br>      <span class="hljs-type">char</span> buf[<span class="hljs-number">256</span>];<br>      <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-keyword">sizeof</span> buf, <span class="hljs-string">&quot;Dropped log messages at %s, %zd larger buffers\n&quot;</span>,<br>               Timestamp::<span class="hljs-built_in">now</span>().<span class="hljs-built_in">toFormattedString</span>().<span class="hljs-built_in">c_str</span>(),<br>               buffersToWrite.<span class="hljs-built_in">size</span>()<span class="hljs-number">-2</span>);<br>      <span class="hljs-built_in">fputs</span>(buf, stderr);<br>      output.<span class="hljs-built_in">append</span>(buf, <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-built_in">strlen</span>(buf)));<br>      buffersToWrite.<span class="hljs-built_in">erase</span>(buffersToWrite.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">2</span>, buffersToWrite.<span class="hljs-built_in">end</span>());<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; buffer : buffersToWrite)<br>    &#123;<br>      <span class="hljs-comment">// <span class="hljs-doctag">FIXME:</span> use unbuffered stdio FILE ? or use ::writev ?</span><br>      output.<span class="hljs-built_in">append</span>(buffer-&gt;<span class="hljs-built_in">data</span>(), buffer-&gt;<span class="hljs-built_in">length</span>());<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (buffersToWrite.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">2</span>)<br>    &#123;<br>      <span class="hljs-comment">// drop non-bzero-ed buffers, avoid trashing</span><br>      buffersToWrite.<span class="hljs-built_in">resize</span>(<span class="hljs-number">2</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!newBuffer1)<br>    &#123;<br>      <span class="hljs-built_in">assert</span>(!buffersToWrite.<span class="hljs-built_in">empty</span>());<br>      newBuffer1 = std::<span class="hljs-built_in">move</span>(buffersToWrite.<span class="hljs-built_in">back</span>());<br>      buffersToWrite.<span class="hljs-built_in">pop_back</span>();<br>      newBuffer1-&gt;<span class="hljs-built_in">reset</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!newBuffer2)<br>    &#123;<br>      <span class="hljs-built_in">assert</span>(!buffersToWrite.<span class="hljs-built_in">empty</span>());<br>      newBuffer2 = std::<span class="hljs-built_in">move</span>(buffersToWrite.<span class="hljs-built_in">back</span>());<br>      buffersToWrite.<span class="hljs-built_in">pop_back</span>();<br>      newBuffer2-&gt;<span class="hljs-built_in">reset</span>();<br>    &#125;<br><br>    buffersToWrite.<span class="hljs-built_in">clear</span>();<br>    output.<span class="hljs-built_in">flush</span>();<br>  &#125;<br>  output.<span class="hljs-built_in">flush</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="改进空间"><a href="#改进空间" class="headerlink" title="改进空间"></a>改进空间</h2><p>目前我们一共准备了 4 块缓冲：<code>currentBuffer_</code> <code>nextBuffer_</code> <code>newBuffer1</code> <code>newBuffer2</code> 以及缓冲队列 <code>buffers_</code>。</p><p>如需进一步增加 buffer 数目，可以改用下面的数据结构：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">BufferPtr       currentBuffer_; <span class="hljs-comment">// 当前缓冲</span><br>BufferVector    emptyBuffers_;  <span class="hljs-comment">// 空闲缓冲</span><br>BufferVector    fullBuffers_;   <span class="hljs-comment">// 已写满的缓冲</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>library</category>
      
      <category>muduo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>library</tag>
      
      <tag>muduo</tag>
      
      <tag>thread_safe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Learn muduo - Part 4 Multi-Thread System Programming</title>
    <link href="/Dev/Library/muduo/Learn-muduo-Part-4-Multi-Thread-System-Programming/"/>
    <url>/Dev/Library/muduo/Learn-muduo-Part-4-Multi-Thread-System-Programming/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>muduo: <a href="https://github.com/chenshuo/muduo">https://github.com/chenshuo/muduo</a></p>          </div><div class="note note-primary">            <p>本系列是 <a href="https://chenshuo.com/book/">《Linux 多线程服务端编程：使用 muduo C++ 网络库》</a> 学习笔记。</p><p><strong>Part 4: C++ 多线程系统编程精要</strong></p>          </div><ul><li>线程安全是不可组合的。</li><li>线程正常退出的方式只有一种，即自然死亡。不要尝试杀死线程，毕竟说不准它是否持有资源尚未释放甚至有锁未释放。</li></ul>]]></content>
    
    
    <categories>
      
      <category>library</category>
      
      <category>muduo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>library</tag>
      
      <tag>muduo</tag>
      
      <tag>thread_safe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Learn muduo - Part 3 Multi-Thread Server</title>
    <link href="/Dev/Library/muduo/Learn-muduo-Part-3-Multi-Thread-Server/"/>
    <url>/Dev/Library/muduo/Learn-muduo-Part-3-Multi-Thread-Server/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>muduo: <a href="https://github.com/chenshuo/muduo">https://github.com/chenshuo/muduo</a></p>          </div><div class="note note-primary">            <p>本系列是 <a href="https://chenshuo.com/book/">《Linux 多线程服务端编程：使用 muduo C++ 网络库》</a> 学习笔记。</p><p><strong>Part 3: 多线程服务器的适用场合与常用编程模型</strong></p>          </div><h2 id="单线程服务器的常用编程模型"><a href="#单线程服务器的常用编程模型" class="headerlink" title="单线程服务器的常用编程模型"></a>单线程服务器的常用编程模型</h2><p>使用最广泛的是 “non-blocking + IO multiplexing” 模型，即 Reactor 模式，比如：</p><ul><li>lighttpd（Nginx 与之相似，每个工作进程有一个 event loop）</li><li>libevent, libev</li><li>Java NIO，包括 Apache Mina 和 Netty</li></ul><p><code>lighttpd</code> 内部的 <code>fdevent</code> 结构十分精妙，值得学习。</p><h2 id="多线程服务器的常用编程模型"><a href="#多线程服务器的常用编程模型" class="headerlink" title="多线程服务器的常用编程模型"></a>多线程服务器的常用编程模型</h2><ol><li>为每个请求创建一个线程，使用阻塞式 IO。</li><li>使用线程池，同样使用阻塞式 IO。相比第 1 种性能有提升。</li><li>使用 non-blocking + IO multiplexing。</li><li>Leader &#x2F;Follower。</li></ol><h3 id="1-one-loop-per-thread"><a href="#1-one-loop-per-thread" class="headerlink" title="1. one loop per thread"></a>1. one loop per thread</h3><p>一个线程一个 event loop，但对于没有 IO 而光有计算任务的线程，使用 event loop 哟对岸浪费。</p><h3 id="2-线程池"><a href="#2-线程池" class="headerlink" title="2. 线程池"></a>2. 线程池</h3><p>用 blocking queue 实现任务队列（TaskQueue）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">using</span> Functor = std::function&lt;<span class="hljs-built_in">void</span>()&gt;;<br>BlockingQueue&lt;Functor&gt; taskQueue; <span class="hljs-comment">// A thread-safe blocking queue</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">workerThread</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (running) &#123;<br>        Functor task = taskQueue.<span class="hljs-built_in">take</span>(); <span class="hljs-comment">// block here</span><br>        <span class="hljs-built_in">task</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;std::thread&gt; threads;<br>    threads.<span class="hljs-built_in">reserve</span>(N);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i) &#123;<br>        threads.<span class="hljs-built_in">emplace_back</span>(&amp;workerThread);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-推荐模式"><a href="#3-推荐模式" class="headerlink" title="3. 推荐模式"></a>3. 推荐模式</h3><p>推荐 one(event) loop per thread + thread pool。</p><ul><li>event loop （也叫 IO loop）用作 IO multiplexing，配合 non-blocking IO 和定时器</li><li>thread pool 用来做计算，具体可以是任务队列或生产者消费者队列。</li></ul>]]></content>
    
    
    <categories>
      
      <category>library</category>
      
      <category>muduo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>library</tag>
      
      <tag>muduo</tag>
      
      <tag>thread_safe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Learn muduo - Part 2 Thread Synchronization</title>
    <link href="/Dev/Library/muduo/Learn-muduo-Part-2-Thread-Synchronization/"/>
    <url>/Dev/Library/muduo/Learn-muduo-Part-2-Thread-Synchronization/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>muduo: <a href="https://github.com/chenshuo/muduo">https://github.com/chenshuo/muduo</a></p>          </div><div class="note note-primary">            <p>本系列是 <a href="https://chenshuo.com/book/">《Linux 多线程服务端编程：使用 muduo C++ 网络库》</a> 学习笔记。</p><p><strong>Part 2: 线程同步精要</strong></p>          </div><h2 id="只使用非递归的-mutex"><a href="#只使用非递归的-mutex" class="headerlink" title="只使用非递归的 mutex"></a>只使用非递归的 mutex</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> &#123;&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bar</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">post</span><span class="hljs-params">(<span class="hljs-type">const</span> Foo&amp; foo)</span> </span>&#123;<br>        <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(mutex)</span></span>;<br>        foos.<span class="hljs-built_in">push_back</span>(foo);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(mutex)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = foos.<span class="hljs-built_in">begin</span>(); it != foos.<span class="hljs-built_in">end</span>(); ++it) &#123;<br>            <span class="hljs-built_in">post</span>(*it);<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    std::mutex mutex;<br>    std::vector&lt;Foo&gt; foos;<br>&#125;;<br></code></pre></td></tr></table></figure><p>递归的 <code>mutex</code> 有可能掩盖掉迭代器失效的 bug，只会偶尔 crash，还不如用非递归的 <code>mutex</code>，直接由死锁讲逻辑上的问题暴露出来。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>抽取出不含加锁的函数即可。</p><h2 id="借-std-shared-ptr-实现-copy-on-write"><a href="#借-std-shared-ptr-实现-copy-on-write" class="headerlink" title="借 std::shared_ptr 实现 copy-on-write"></a>借 <code>std::shared_ptr</code> 实现 copy-on-write</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cassert&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mutex&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">doit</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bar</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">using</span> FooList = std::vector&lt;Foo&gt;;<br>    <span class="hljs-keyword">using</span> FooListPtr = std::shared_ptr&lt;FooList&gt;;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">post</span><span class="hljs-params">(<span class="hljs-type">const</span> Foo&amp; foo)</span> </span>&#123;<br>        <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(m_mutex)</span></span>;<br>        <span class="hljs-keyword">if</span> (!m_foos.<span class="hljs-built_in">unique</span>()) &#123;<br>            m_foos = std::<span class="hljs-built_in">make_shared</span>&lt;FooList&gt;(*m_foos);<br>        &#125;<br>        <span class="hljs-built_in">assert</span>(m_foos.<span class="hljs-built_in">unique</span>());<br>        m_foos-&gt;<span class="hljs-built_in">push_back</span>(foo);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">()</span> </span>&#123;<br>        FooListPtr foos;<br>        &#123;<br>            <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(m_mutex)</span></span>;<br>            foos = m_foos;<br>            <span class="hljs-built_in">assert</span>(!m_foos.<span class="hljs-built_in">unique</span>());<br>        &#125;<br>        <span class="hljs-comment">// assert(!m_foos.unique());  // This assert can&#x27;t make sense</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; foo : *foos) &#123;<br>            foo.<span class="hljs-built_in">doit</span>();<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    std::mutex m_mutex;<br>    FooListPtr m_foos;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="读多写少-case-（用-mutex-替换读写锁）"><a href="#读多写少-case-（用-mutex-替换读写锁）" class="headerlink" title="读多写少 case （用 mutex 替换读写锁）"></a>读多写少 case （用 <code>mutex</code> 替换读写锁）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomData</span> : noncopyable &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">CustomData</span>() : m_data&#123;std::<span class="hljs-built_in">make_shared</span>&lt;Map&gt;()&#125; &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; customer, <span class="hljs-type">const</span> std::string&amp; stock)</span> <span class="hljs-type">const</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">using</span> Entry = std::pair&lt;std::string, <span class="hljs-type">int</span>&gt;;<br>    <span class="hljs-keyword">using</span> EntryList = std::vector&lt;Entry&gt;;<br>    <span class="hljs-keyword">using</span> Map = std::map&lt;std::string, EntryList&gt;;<br>    <span class="hljs-keyword">using</span> MapPtr = std::shared_ptr&lt;Map&gt;;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; customer, <span class="hljs-type">const</span> EntryList&amp; entries)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">findEntry</span><span class="hljs-params">(<span class="hljs-type">const</span> EntryList&amp; entries, <span class="hljs-type">const</span> std::string&amp; stock)</span></span>;<br><br>    <span class="hljs-function">MapPtr <span class="hljs-title">getData</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(m_mutex)</span></span>;<br>        <span class="hljs-keyword">return</span> m_data;<br>    &#125;<br><br>    <span class="hljs-keyword">mutable</span> std::mutex m_mutex;<br>    MapPtr m_data;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">CustomData::query</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; customer, <span class="hljs-type">const</span> std::string&amp; stock)</span> <span class="hljs-type">const</span> </span>&#123;<br>    MapPtr data = <span class="hljs-built_in">getData</span>();<br>    <span class="hljs-comment">// Once the data is gotten, the lock isn&#x27;t needed anymore</span><br>    <span class="hljs-keyword">auto</span> entries = data-&gt;<span class="hljs-built_in">find</span>(customer);<br>    <span class="hljs-keyword">if</span> (entries == data-&gt;<span class="hljs-built_in">end</span>()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">findEntry</span>(entries-&gt;second, stock);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CustomData::update</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; customer, <span class="hljs-type">const</span> EntryList&amp; entries)</span> </span>&#123;<br>    <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(m_mutex)</span></span>;  <span class="hljs-comment">// must leverage the lock in the whole time</span><br>    <span class="hljs-keyword">if</span> (!m_data.<span class="hljs-built_in">unique</span>()) &#123;                     <span class="hljs-comment">// distinguish if it&#x27;s been reading</span><br>        MapPtr newData = std::<span class="hljs-built_in">make_shared</span>&lt;Map&gt;(*m_data);<br>        m_data.<span class="hljs-built_in">swap</span>(newData);<br>    &#125;<br>    <span class="hljs-built_in">assert</span>(m_data.<span class="hljs-built_in">unique</span>());<br>    (*m_data)[customer] = entries;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>library</category>
      
      <category>muduo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>library</tag>
      
      <tag>muduo</tag>
      
      <tag>thread_safe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Move semantics and Rule of five</title>
    <link href="/Dev/C++/Miscellaneous/Move-semantics-and-Rule-of-five/"/>
    <url>/Dev/C++/Miscellaneous/Move-semantics-and-Rule-of-five/</url>
    
    <content type="html"><![CDATA[<h2 id="Move-semantics"><a href="#Move-semantics" class="headerlink" title="Move semantics"></a>Move semantics</h2><p>The semantics of <code>move</code> is actually to transfer the ownership of resources.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utility&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Copy</span><span class="hljs-params">(<span class="hljs-type">char</span>** dst, <span class="hljs-type">char</span>** src, <span class="hljs-type">size_t</span> size)</span> </span>&#123;<br>    *dst = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[size];<br>    <span class="hljs-built_in">memcpy</span>(*dst, src, size);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Move</span><span class="hljs-params">(<span class="hljs-type">char</span>** dst, <span class="hljs-type">char</span>** src)</span> </span>&#123;<br>    <span class="hljs-comment">// normal form</span><br>    <span class="hljs-comment">// *dst = *src;</span><br>    <span class="hljs-comment">// *src = nullptr;</span><br><br>    <span class="hljs-comment">// write it in a line</span><br>    *dst = std::<span class="hljs-built_in">exchange</span>(*src, <span class="hljs-literal">nullptr</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Rule-of-five"><a href="#Rule-of-five" class="headerlink" title="Rule of five"></a>Rule of five</h2><p>Any class for which move semantics are desirable, has to declare all five special member functions: destructor, copy-constructor, copy-assignment operator, move constructor and move-assignment operator.</p><p>When move constructor or move-assignment operator are provided, copy-constructor and copy-assignment operator are deleted implicitly.</p><p>Unlike Rule of Three, failing to provide move constructor and move assignment is usually not an error, but a missed optimization opportunity.</p><p>Therefore, the best practice is to provide the five special member functions.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Foo</span>() = <span class="hljs-keyword">default</span>;<br>    <span class="hljs-built_in">Foo</span>(<span class="hljs-type">const</span> Foo&amp; other) : <span class="hljs-built_in">m_size</span>(other.m_size), <span class="hljs-built_in">m_data</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[m_size]) &#123;<br>        std::<span class="hljs-built_in">copy_n</span>(other.m_data, m_size, m_data);<br>    &#125;<br>    Foo&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> Foo&amp; other) &#123;<br>        <span class="hljs-comment">// Remember to check self assignment</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == &amp;other) &#123;<br>            <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// for exception safety</span><br>        <span class="hljs-type">size_t</span> new_size = other.m_size;<br>        <span class="hljs-type">char</span>* new_data = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[m_size];<br>        std::<span class="hljs-built_in">copy_n</span>(other.m_data, new_size, new_data);<br><br>        <span class="hljs-built_in">reset</span>();<br><br>        m_size = new_size;<br>        m_data = new_data;<br><br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    ~<span class="hljs-built_in">Foo</span>() &#123;<br>        <span class="hljs-built_in">reset</span>();<br>    &#125;<br><br>    <span class="hljs-built_in">Foo</span>(Foo&amp;&amp; other) <span class="hljs-keyword">noexcept</span> : <span class="hljs-built_in">m_size</span>(std::<span class="hljs-built_in">exchange</span>(other.m_size, <span class="hljs-number">0</span>)), <span class="hljs-built_in">m_data</span>(std::<span class="hljs-built_in">exchange</span>(other.m_data, <span class="hljs-literal">nullptr</span>)) &#123;<br>    &#125;<br>    Foo&amp; <span class="hljs-keyword">operator</span>=(Foo&amp;&amp; other) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == &amp;other) &#123;<br>            <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>        &#125;<br><br>        m_size = std::<span class="hljs-built_in">exchange</span>(other.m_size, <span class="hljs-number">0</span>);<br>        m_data = std::<span class="hljs-built_in">exchange</span>(other.m_data, <span class="hljs-literal">nullptr</span>);<br><br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reset</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (m_data != <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">delete</span>[] m_data;<br>            m_size = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">size_t</span> m_size&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">char</span>* m_data&#123;<span class="hljs-literal">nullptr</span>&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://en.cppreference.com/w/cpp/language/rule_of_three">https://en.cppreference.com/w/cpp/language/rule_of_three</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>cpp11</tag>
      
      <tag>move</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Some examples about CTAD</title>
    <link href="/Dev/C++/Miscellaneous/Some-examples-about-CTAD/"/>
    <url>/Dev/C++/Miscellaneous/Some-examples-about-CTAD/</url>
    
    <content type="html"><![CDATA[<p>CTAD is <strong>C</strong>lass <strong>T</strong>emplate <strong>A</strong>rgument <strong>D</strong>eduction in C++17. With CTAD, we can write so-called deduction guides to tell the compiler how to instantiate a class template. Thanks to CTAD, class templates can look more like function templates. There we usually don’t have to state the types other than passing the parameters. The compiler then derives the types from these parameters.</p><h2 id="CTAD-in-std-vector"><a href="#CTAD-in-std-vector" class="headerlink" title="CTAD in std::vector"></a>CTAD in <code>std::vector</code></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// Before</span><br>std::vector&lt;<span class="hljs-type">int</span>&gt; v&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-comment">// After</span><br>std::vector v&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br></code></pre></td></tr></table></figure><h2 id="CTAD-in-array"><a href="#CTAD-in-array" class="headerlink" title="CTAD in array"></a>CTAD in <code>array</code></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstddef&gt;</span></span><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-type">size_t</span> N&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">array</span> &#123;<br>  T data[N];<br>&#125;;<br><br><span class="hljs-comment">// A Deduction guide</span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span>... Args&gt;</span><br><span class="hljs-function"><span class="hljs-title">array</span><span class="hljs-params">(T, Args...)</span> -&gt; array&lt;T, 1 + <span class="hljs-keyword">sizeof</span>...<span class="hljs-params">(Args)</span>&gt;</span>;<br><br>array a0&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Custom-CTAD"><a href="#Custom-CTAD" class="headerlink" title="Custom CTAD"></a>Custom CTAD</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ReturnCode</span> &#123;<br>    T value;<br>&#125;;<br><span class="hljs-comment">// Guide compiler to deduct the type in template argument list</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-built_in">ReturnCode</span>(T) -&gt; ReturnCode&lt;T&gt;;<br><br>ReturnCode return_code&#123;<span class="hljs-number">1</span>&#125;;<br></code></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;variant&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std::literals;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span>... Ts&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Overload</span> : Ts... &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">using</span> <span class="hljs-title">Ts::operator</span><span class="hljs-params">()</span>...</span>;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span>... Ts&gt;<br><span class="hljs-built_in">Overload</span>(Ts&amp;&amp;...) -&gt; Overload&lt;Ts...&gt;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::variant&lt;<span class="hljs-type">int</span>, std::string&gt; variant&#123;<span class="hljs-string">&quot;Hello World&quot;</span>s&#125;;<br>    std::<span class="hljs-built_in">visit</span>(Overload&#123;[](<span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; i) &#123;<br>                            std::cout &lt;&lt; i &lt;&lt; std::endl;<br>                        &#125;,<br>                        [](<span class="hljs-type">const</span> std::string&amp; s) &#123;<br>                            std::cout &lt;&lt; s &lt;&lt; std::endl;<br>                        &#125;&#125;,<br>               variant);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://en.cppreference.com/w/cpp/language/class_template_argument_deduction">https://en.cppreference.com/w/cpp/language/class_template_argument_deduction</a></li><li><a href="https://andreasfertig.blog/2022/11/cpp17s-ctad-a-sometimes-underrated-feature/">C++17’s CTAD a sometimes underrated feature</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>template</tag>
      
      <tag>cpp17</tag>
      
      <tag>ctad</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Some deduction examples about auto/decltype</title>
    <link href="/Dev/C++/Miscellaneous/Some-deduction-examples-about-auto-decltype/"/>
    <url>/Dev/C++/Miscellaneous/Some-deduction-examples-about-auto-decltype/</url>
    
    <content type="html"><![CDATA[<h2 id="lvalue"><a href="#lvalue" class="headerlink" title="lvalue"></a>lvalue</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> i&#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-keyword">auto</span> a = i;            <span class="hljs-comment">// int</span><br><span class="hljs-keyword">decltype</span>(<span class="hljs-keyword">auto</span>) b = i;  <span class="hljs-comment">// int</span><br><br><span class="hljs-keyword">auto</span> c = (i);            <span class="hljs-comment">// int</span><br><span class="hljs-keyword">decltype</span>(<span class="hljs-keyword">auto</span>) d = (i);  <span class="hljs-comment">// int&amp;</span><br><br><span class="hljs-keyword">auto</span>&amp; e = i;    <span class="hljs-comment">// int&amp;</span><br><span class="hljs-keyword">auto</span>&amp; f = (i);  <span class="hljs-comment">// int&amp;</span><br><br><span class="hljs-keyword">auto</span>&amp;&amp; g = i;    <span class="hljs-comment">// int&amp;</span><br><span class="hljs-keyword">auto</span>&amp;&amp; h = (i);  <span class="hljs-comment">// int&amp;</span><br></code></pre></td></tr></table></figure><h2 id="rvalue"><a href="#rvalue" class="headerlink" title="rvalue"></a>rvalue</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">auto</span> a = <span class="hljs-number">1</span>;            <span class="hljs-comment">// int</span><br><span class="hljs-keyword">decltype</span>(<span class="hljs-keyword">auto</span>) b = <span class="hljs-number">1</span>;  <span class="hljs-comment">// int</span><br><br><span class="hljs-keyword">auto</span> c = (<span class="hljs-number">1</span>);            <span class="hljs-comment">// int</span><br><span class="hljs-keyword">decltype</span>(<span class="hljs-keyword">auto</span>) d = (<span class="hljs-number">1</span>);  <span class="hljs-comment">// int</span><br><br><span class="hljs-comment">// auto&amp; e = 1;    // wrong</span><br><span class="hljs-comment">// auto&amp; f = (1);  // wrong</span><br><span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; e = <span class="hljs-number">1</span>;    <span class="hljs-comment">// const int&amp;</span><br><span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; f = (<span class="hljs-number">1</span>);  <span class="hljs-comment">// const int&amp;</span><br><br><span class="hljs-keyword">auto</span>&amp;&amp; g = <span class="hljs-number">1</span>;    <span class="hljs-comment">// int&amp;&amp;</span><br><span class="hljs-keyword">auto</span>&amp;&amp; h = (<span class="hljs-number">1</span>);  <span class="hljs-comment">// int&amp;&amp;</span><br></code></pre></td></tr></table></figure><h2 id="xvalue"><a href="#xvalue" class="headerlink" title="xvalue"></a>xvalue</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Foo</span> &#123;&#125;;<br><br><span class="hljs-keyword">auto</span> a = Foo&#123;&#125;;            <span class="hljs-comment">// Foo</span><br><span class="hljs-keyword">decltype</span>(<span class="hljs-keyword">auto</span>) b = Foo&#123;&#125;;  <span class="hljs-comment">// Foo</span><br><br><span class="hljs-keyword">auto</span> c = (Foo&#123;&#125;);            <span class="hljs-comment">// Foo</span><br><span class="hljs-keyword">decltype</span>(<span class="hljs-keyword">auto</span>) d = (Foo&#123;&#125;);  <span class="hljs-comment">// Foo</span><br><br><span class="hljs-comment">// auto&amp; e = Foo&#123;&#125;;    // wrong</span><br><span class="hljs-comment">// auto&amp; f = (Foo&#123;&#125;);  // wrong</span><br><span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; e = Foo&#123;&#125;;    <span class="hljs-comment">// const Foo&amp;</span><br><span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; f = (Foo&#123;&#125;);  <span class="hljs-comment">// const Foo&amp;</span><br><br><span class="hljs-keyword">auto</span>&amp;&amp; g = Foo&#123;&#125;;    <span class="hljs-comment">// Foo&amp;&amp;</span><br><span class="hljs-keyword">auto</span>&amp;&amp; h = (Foo&#123;&#125;);  <span class="hljs-comment">// Foo&amp;&amp;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>cpp11</tag>
      
      <tag>auto</tag>
      
      <tag>decltype</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Introduction to some interesting operator overloads</title>
    <link href="/Dev/C++/Miscellaneous/Introduction-to-some-interesting-operator-overloads/"/>
    <url>/Dev/C++/Miscellaneous/Introduction-to-some-interesting-operator-overloads/</url>
    
    <content type="html"><![CDATA[<h2 id="operator-quot-quot-ms-x2F-operator-quot-quot-sv"><a href="#operator-quot-quot-ms-x2F-operator-quot-quot-sv" class="headerlink" title="operator&quot;&quot;ms &#x2F; operator&quot;&quot;sv"></a><code>operator&quot;&quot;ms</code> &#x2F; <code>operator&quot;&quot;sv</code></h2><p>In general occasions, we use <code>std::chrono::milliseconds(1024)</code> to indicate a duration about milliseconds. Actually, STL provides another convenient way to write it as well as other duration units.</p><p>After C++11 (<code>_LIBCPP_STD_VER &gt; 11</code>), there is a set of operator overloads about chrono. e.g.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std::chrono;<br><span class="hljs-number">1024</span>ms;<br></code></pre></td></tr></table></figure><p>Its implementation is as follows:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">constexpr</span> chrono::milliseconds <span class="hljs-keyword">operator</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-built_in">ms</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> __ms) &#123;<br>    <span class="hljs-keyword">return</span> chrono::<span class="hljs-built_in">milliseconds</span>(<span class="hljs-built_in">static_cast</span>&lt;chrono::milliseconds::rep&gt;(__ms));<br>&#125;<br></code></pre></td></tr></table></figure><p>The operator overload <code>operator&quot;&quot;ms</code> looks pretty awesome. Other durations have Similarly overloads such as <code>h</code> <code>min</code> <code>s</code> <code>ms</code> <code>us</code> <code>ns</code>.</p><p>We can also write custom operator overloads like below. Note that the literal operator parameter type must be <code>unsigned long long</code> or <code>long double</code>, otherwise compiler will complain and throw errors even if it’s <code>int</code> or <code>double</code>. It seems like it’s specific form required by compiler.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Foo</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> data;<br>&#125;;<br><br><span class="hljs-keyword">constexpr</span> Foo <span class="hljs-keyword">operator</span><span class="hljs-string">&quot;&quot;</span> <span class="hljs-built_in">foo</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> i) &#123;<br>    <span class="hljs-keyword">return</span> Foo&#123;i&#125;;<br>&#125;<br><br><span class="hljs-keyword">auto</span> ff = <span class="hljs-number">1024f</span>oo;<br></code></pre></td></tr></table></figure><p>Unfortunately, it can’t pass compiling because user-defined literal suffixes not starting with ‘_’ are reserved and no literal will invoke this operator. In order to achieve our purpose with user-defined literal suffixes, we can fix it like this:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Foo</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> data;<br>&#125;;<br><br><span class="hljs-keyword">constexpr</span> Foo <span class="hljs-keyword">operator</span><span class="hljs-string">&quot;&quot;</span> _foo(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> i) &#123;<br>    <span class="hljs-keyword">return</span> Foo&#123;i&#125;;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">auto</span> ff = <span class="hljs-number">1024</span>_foo;<br>    std::cout &lt;&lt; ff.data &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>In fact, the familiar <code>sv</code> works the same way.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string_view&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std::string_view_literals;<br><br><span class="hljs-string">&quot;abc&quot;</span>sv;<br></code></pre></td></tr></table></figure><p>In the same way, we can rewrite the operator overload <code>_foo</code>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Foo</span> &#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* data;<br>    <span class="hljs-type">size_t</span> size;<br>&#125;;<br><br><span class="hljs-keyword">constexpr</span> Foo <span class="hljs-keyword">operator</span><span class="hljs-string">&quot;&quot;</span> _foo(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* s, <span class="hljs-type">size_t</span> size) &#123;<br>    <span class="hljs-keyword">return</span> Foo&#123;s, size&#125;;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">auto</span> ff = <span class="hljs-string">&quot;abc&quot;</span>_foo;<br>    std::cout &lt;&lt; ff.data &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="operator"><a href="#operator" class="headerlink" title="operator ,"></a><code>operator ,</code></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Foo</span> &#123;<br>    <span class="hljs-type">int</span> data;<br>&#125;;<br><br><span class="hljs-keyword">constexpr</span> Foo&amp; <span class="hljs-keyword">operator</span>,(Foo&amp; foo, <span class="hljs-type">int</span> i) &#123;<br>    foo.data += i;<br>    <span class="hljs-keyword">return</span> foo;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Foo foo&#123;&#125;;<br>    std::cout &lt;&lt; foo.data &lt;&lt; std::endl;<br>    foo, <span class="hljs-number">1024</span>;<br>    std::cout &lt;&lt; foo.data &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">0<br>1024<br></code></pre></td></tr></table></figure><h2 id="special-operator-overloads"><a href="#special-operator-overloads" class="headerlink" title="special operator overloads"></a>special operator overloads</h2><p>A usage with overloaded <code>operator --</code> and <code>operator &gt;</code> that makes it like linked nodes in a line. This skill is implemented in <a href="https://github.com/sogou/workflow">the library workflow</a>‘s data structure <code>WFGraphNode</code>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> data;<br><br>    Node&amp; <span class="hljs-keyword">operator</span>--(<span class="hljs-type">int</span>) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;when --, current data: &quot;</span> &lt;&lt; data &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    Node&amp; <span class="hljs-keyword">operator</span>&gt;(<span class="hljs-type">const</span> Node&amp; other) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;when &gt;, current data: &quot;</span> &lt;&lt; data &lt;&lt; std::endl;<br>        data += other.data;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Node a&#123;<span class="hljs-number">1</span>&#125;, b&#123;<span class="hljs-number">2</span>&#125;, c&#123;<span class="hljs-number">9</span>&#125;;<br><br>    a--&gt;b--&gt;c;<br><br>    std::cout &lt;&lt; a.data &lt;&lt; std::endl;<br>    std::cout &lt;&lt; b.data &lt;&lt; std::endl;<br>    std::cout &lt;&lt; c.data &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs log">when --, current data: 1<br>when --, current data: 2<br>when &gt;, current data: 1<br>when &gt;, current data: 3<br>12<br>2<br>9<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>cpp</category>
      
      <category>overload</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>cpp11</tag>
      
      <tag>operator</tag>
      
      <tag>overload</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Learn muduo - Part 1 thread_safe Objects Lifecycle Management</title>
    <link href="/Dev/Library/muduo/Learn-muduo-Part-1-thread-safe-Objects-Lifecycle-Management/"/>
    <url>/Dev/Library/muduo/Learn-muduo-Part-1-thread-safe-Objects-Lifecycle-Management/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>muduo: <a href="https://github.com/chenshuo/muduo">https://github.com/chenshuo/muduo</a></p>          </div><div class="note note-primary">            <p>本系列是 <a href="https://chenshuo.com/book/">《Linux 多线程服务端编程：使用 muduo C++ 网络库》</a> 学习笔记。</p><p><strong>Part 1: 线程安全的对象生命期管理</strong></p>          </div><h2 id="线程安全的-Counter"><a href="#线程安全的-Counter" class="headerlink" title="线程安全的 Counter"></a>线程安全的 Counter</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cinttypes&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mutex&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">noncopyable</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">noncopyable</span>(<span class="hljs-type">const</span> noncopyable&amp;) = <span class="hljs-keyword">delete</span>;<br>    <span class="hljs-type">void</span> <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> noncopyable&amp;) = <span class="hljs-keyword">delete</span>;<br><br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-built_in">noncopyable</span>() = <span class="hljs-keyword">default</span>;<br>    ~<span class="hljs-built_in">noncopyable</span>() = <span class="hljs-keyword">default</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter</span> : <span class="hljs-keyword">public</span> noncopyable &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Counter</span>() : <span class="hljs-built_in">value_</span>(<span class="hljs-number">0</span>) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">int64_t</span> <span class="hljs-title">value</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int64_t</span> <span class="hljs-title">getAndIncrease</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int64_t</span> value_;<br>    <span class="hljs-keyword">mutable</span> std::mutex mutex_;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int64_t</span> <span class="hljs-title">Counter::value</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>    <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(mutex_)</span></span>;<br>    <span class="hljs-keyword">return</span> value_;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int64_t</span> <span class="hljs-title">Counter::getAndIncrease</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(mutex_)</span></span>;<br>    <span class="hljs-type">int64_t</span> ret = value_++;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>此处有一点需要注意，为了使成员函数 <code>Counter::value()</code> 是 const 成员函数，且 <code>mutex_</code> 在语义上不可变，故将其设为 <code>mutable</code> 的。</p><h2 id="对象构造期线程安全"><a href="#对象构造期线程安全" class="headerlink" title="对象构造期线程安全"></a>对象构造期线程安全</h2><p>对象构造要实现线程安全，唯一要求是不要在构造期间泄露 <code>this</code> 指针：</p><ul><li>不要在构造函数中注册回调；</li><li>不要在构造函数中将 <code>this</code> 传给跨线程的对象；</li><li>即便在构造函数最后一行也不行。</li></ul><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> : <span class="hljs-keyword">public</span> Observer &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Foo</span>(Observable* s) &#123;<br>        s-&gt;<span class="hljs-built_in">register_</span>(<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="正确"><a href="#正确" class="headerlink" title="正确"></a>正确</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> : <span class="hljs-keyword">public</span> Observer &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Foo</span>();<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">observer</span><span class="hljs-params">(Observable* s)</span> </span>&#123;<br>        s-&gt;<span class="hljs-built_in">register_</span>(<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="shared-ptr-亮点"><a href="#shared-ptr-亮点" class="headerlink" title="shared_ptr 亮点"></a><code>shared_ptr</code> 亮点</h2><h3 id="析构动作在创建时被捕获"><a href="#析构动作在创建时被捕获" class="headerlink" title="析构动作在创建时被捕获"></a>析构动作在创建时被捕获</h3><p>这意味着：</p><ul><li>虚析构函数不再是必需的（参考：<a href="/Dev/C++/STL/What-is-std-shared-ptr/#Deleter-in-shared-ptr">What is std::shared_ptr</a>）。</li><li><code>std::shared_ptr&lt;void&gt;</code> 可以持有任何对象，而且能安全释放。</li><li>……</li></ul><h2 id="对象池优化过程"><a href="#对象池优化过程" class="headerlink" title="对象池优化过程"></a>对象池优化过程</h2><h3 id="1-std-shared-ptr-lt-Stock-gt-in-map"><a href="#1-std-shared-ptr-lt-Stock-gt-in-map" class="headerlink" title="1. std::shared_ptr&lt;Stock&gt; in map"></a>1. <code>std::shared_ptr&lt;Stock&gt;</code> in <code>map</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stock</span> &#123;&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StockFactory</span> : <span class="hljs-keyword">public</span> noncopyable &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">std::shared_ptr&lt;Stock&gt; <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; key)</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">mutable</span> std::mutex mutex_;<br>    std::map&lt;std::string, std::shared_ptr&lt;Stock&gt;&gt; stocks_;<br>&#125;;<br></code></pre></td></tr></table></figure><p>但是在 <code>StockFactory</code> 销毁前，<code>Stock</code> 对象永远不会销毁，毕竟逻辑上 <code>Stock</code> 本是可以在 <code>StockFactory</code> 销毁前销毁的，此处约等于内存泄漏。</p><h3 id="2-std-weak-ptr-lt-Stock-gt-in-map"><a href="#2-std-weak-ptr-lt-Stock-gt-in-map" class="headerlink" title="2. std::weak_ptr&lt;Stock&gt; in map"></a>2. <code>std::weak_ptr&lt;Stock&gt;</code> in <code>map</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stock</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Stock</span>(<span class="hljs-type">const</span> std::string&amp; key) : <span class="hljs-built_in">key_</span>(key) &#123;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    std::string key_;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StockFactory</span> : <span class="hljs-keyword">public</span> noncopyable &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">std::shared_ptr&lt;Stock&gt; <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; key)</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">mutable</span> std::mutex mutex_;<br>    std::map&lt;std::string, std::weak_ptr&lt;Stock&gt;&gt; stocks_;<br>&#125;;<br><br><span class="hljs-function">std::shared_ptr&lt;Stock&gt; <span class="hljs-title">StockFactory::get</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; key)</span> </span>&#123;<br>    <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(mutex_)</span></span>;<br>    std::weak_ptr&lt;Stock&gt;&amp; wkStock = stocks_[key];<br>    std::shared_ptr&lt;Stock&gt; pStock = wkStock.<span class="hljs-built_in">lock</span>();<br>    <span class="hljs-keyword">if</span> (pStock == <span class="hljs-literal">nullptr</span>) &#123;<br>        pStock.<span class="hljs-built_in">reset</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Stock</span>(key));<br>        wkStock = pStock;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pStock;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>stocks_.size</code> 只增不减，可认为有内存泄漏。解决办法是，利用 <code>std::shared_ptr</code> 的定制 deleter 功能。</p><h3 id="3-定制-deleter"><a href="#3-定制-deleter" class="headerlink" title="3. 定制 deleter"></a>3. 定制 deleter</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">std::shared_ptr&lt;Stock&gt; <span class="hljs-title">StockFactory::get</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; key)</span> </span>&#123;<br>    <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(mutex_)</span></span>;<br>    std::weak_ptr&lt;Stock&gt;&amp; wkStock = stocks_[key];<br>    std::shared_ptr&lt;Stock&gt; pStock = wkStock.<span class="hljs-built_in">lock</span>();<br>    <span class="hljs-keyword">if</span> (pStock == <span class="hljs-literal">nullptr</span>) &#123;<br>        pStock.<span class="hljs-built_in">reset</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Stock</span>(key), [<span class="hljs-keyword">this</span>](Stock* stock) &#123; <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">deleteStock</span>(stock); &#125;);<br>        wkStock = pStock;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pStock;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">StockFactory::deleteStock</span><span class="hljs-params">(Stock* stock)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (stock) &#123;<br>        <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(mutex_)</span></span>;<br>        stocks_.<span class="hljs-built_in">erase</span>(stock-&gt;<span class="hljs-built_in">key</span>());<br>    &#125;<br><br>    <span class="hljs-keyword">delete</span> stock;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是，此处将 <code>StockFactory</code> 的 <code>this</code> 指针交给了 <code>Stock</code> 析构函数。如果 <code>StockFactory</code> 先于 <code>Stock</code> 析构，就会 core dump。</p><h3 id="4-enable-shared-from-this"><a href="#4-enable-shared-from-this" class="headerlink" title="4. enable_shared_from_this"></a>4. <code>enable_shared_from_this</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StockFactory</span> : <span class="hljs-keyword">public</span> std::enable_shared_from_this&lt;StockFactory&gt;, <span class="hljs-keyword">public</span> noncopyable &#123;<br>    ...<br>&#125;;<br><br><span class="hljs-function">std::shared_ptr&lt;Stock&gt; <span class="hljs-title">StockFactory::get</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; key)</span> </span>&#123;<br>    <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(mutex_)</span></span>;<br>    std::weak_ptr&lt;Stock&gt;&amp; wkStock = stocks_[key];<br>    std::shared_ptr&lt;Stock&gt; pStock = wkStock.<span class="hljs-built_in">lock</span>();<br>    <span class="hljs-keyword">if</span> (pStock == <span class="hljs-literal">nullptr</span>) &#123;<br>        pStock.<span class="hljs-built_in">reset</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Stock</span>(key),<br>                     [shared_this = <span class="hljs-built_in">shared_from_this</span>()](Stock* stock) &#123; shared_this-&gt;<span class="hljs-built_in">deleteStock</span>(stock); &#125;);<br>        wkStock = pStock;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pStock;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">StockFactory::deleteStock</span><span class="hljs-params">(Stock* stock)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (stock) &#123;<br>        <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(mutex_)</span></span>;<br>        stocks_.<span class="hljs-built_in">erase</span>(stock-&gt;<span class="hljs-built_in">key</span>());<br>    &#125;<br><br>    <span class="hljs-keyword">delete</span> stock;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是这样一来，<code>StockFactory</code> 的生命周期被意外延长了。</p><p>我们实际想做的是——如果 <code>StockFactory</code> 还活着，就调用它的成员函数，否则忽略之。</p><h3 id="5-弱引用"><a href="#5-弱引用" class="headerlink" title="5. 弱引用"></a>5. 弱引用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StockFactory</span> : <span class="hljs-keyword">public</span> std::enable_shared_from_this&lt;StockFactory&gt;, <span class="hljs-keyword">public</span> noncopyable &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">std::shared_ptr&lt;Stock&gt; <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; key)</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">weakDeleteStock</span><span class="hljs-params">(<span class="hljs-type">const</span> std::weak_ptr&lt;StockFactory&gt;&amp; wkFactory, Stock* stock)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">removeStock</span><span class="hljs-params">(Stock* stock)</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">mutable</span> std::mutex mutex_;<br>    std::map&lt;std::string, std::weak_ptr&lt;Stock&gt;&gt; stocks_;<br>&#125;;<br><br><span class="hljs-function">std::shared_ptr&lt;Stock&gt; <span class="hljs-title">StockFactory::get</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; key)</span> </span>&#123;<br>    <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(mutex_)</span></span>;<br>    std::weak_ptr&lt;Stock&gt;&amp; wkStock = stocks_[key];<br>    std::shared_ptr&lt;Stock&gt; pStock = wkStock.<span class="hljs-built_in">lock</span>();<br>    <span class="hljs-keyword">if</span> (pStock == <span class="hljs-literal">nullptr</span>) &#123;<br>        pStock.<span class="hljs-built_in">reset</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Stock</span>(key), [weak_this = std::<span class="hljs-built_in">weak_ptr</span>&lt;StockFactory&gt;(<span class="hljs-built_in">shared_from_this</span>())](Stock* stock) &#123;<br>            StockFactory::<span class="hljs-built_in">weakDeleteStock</span>(weak_this, stock);<br>        &#125;);<br>        wkStock = pStock;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pStock;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">StockFactory::weakDeleteStock</span><span class="hljs-params">(<span class="hljs-type">const</span> std::weak_ptr&lt;StockFactory&gt;&amp; wkFactory, Stock* stock)</span> </span>&#123;<br>    std::shared_ptr&lt;StockFactory&gt; pFactory = wkFactory.<span class="hljs-built_in">lock</span>();<br>    <span class="hljs-keyword">if</span> (pFactory) &#123;<br>        pFactory-&gt;<span class="hljs-built_in">removeStock</span>(stock);<br>    &#125;<br><br>    <span class="hljs-keyword">delete</span> stock;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">StockFactory::removeStock</span><span class="hljs-params">(Stock* stock)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (stock) &#123;<br>        <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(mutex_)</span></span>;<br>        stocks_.<span class="hljs-built_in">erase</span>(stock-&gt;<span class="hljs-built_in">key</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>library</category>
      
      <category>muduo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>library</tag>
      
      <tag>muduo</tag>
      
      <tag>thread_safe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Genetic Algorithm</title>
    <link href="/SystemDesign/Genetic-Algorithm/"/>
    <url>/SystemDesign/Genetic-Algorithm/</url>
    
    <content type="html"><![CDATA[<h2 id="Code-Example"><a href="#Code-Example" class="headerlink" title="Code Example"></a>Code Example</h2><p>A genetic algorithm for optimizing the minimum value of a function.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-comment"># Define objective function</span><br><span class="hljs-comment"># 定义目标函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">objective_function</span>(<span class="hljs-params">x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">return</span> x**<span class="hljs-number">2</span><br><br><br><span class="hljs-comment"># Define genetic algorithm parameters</span><br><span class="hljs-comment"># 定义遗传算法的参数</span><br>population_size = <span class="hljs-number">50</span><br>mutation_rate = <span class="hljs-number">0.1</span><br>generations = <span class="hljs-number">100</span><br><br><br><span class="hljs-comment"># Define population initialization function</span><br><span class="hljs-comment"># 定义种群的初始化函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">initialize_population</span>(<span class="hljs-params">population_size: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>    population = []  <span class="hljs-comment"># size = population_size * 4</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(population_size):<br>        chromosome = [random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br>        population.append(chromosome)<br><br>    <span class="hljs-keyword">return</span> population<br><br><br><span class="hljs-comment"># Define selection function</span><br><span class="hljs-comment"># 定义选择函数（数量减半）</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">selection</span>(<span class="hljs-params">population: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>    fitness_values = []<br>    <span class="hljs-keyword">for</span> chromosome <span class="hljs-keyword">in</span> population:<br>        x = <span class="hljs-built_in">sum</span>([(chromosome[i] * <span class="hljs-number">2</span>**i)<br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)])  <span class="hljs-comment"># x = random.randint(0, 15)</span><br>        fitness_values.append((chromosome, objective_function(x)))<br>    fitness_values.sort(key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>])<br>    selected_population = [x[<span class="hljs-number">0</span>]<br>                           <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> fitness_values[: <span class="hljs-built_in">int</span>(population_size / <span class="hljs-number">2</span>)]]<br>    <span class="hljs-keyword">return</span> selected_population<br><br><br><span class="hljs-comment"># Define crossover function</span><br><span class="hljs-comment"># 定义交叉函数（恢复种群数量）</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crossover</span>(<span class="hljs-params">selected_population: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>    new_population = []<br><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(population_size):<br>        parent1 = random.choice(selected_population)<br>        parent2 = random.choice(selected_population)<br><br>        child = []<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            <span class="hljs-keyword">if</span> random.random() &lt; <span class="hljs-number">0.5</span>:<br>                child.append(parent1[j])<br>            <span class="hljs-keyword">else</span>:<br>                child.append(parent2[j])<br>        new_population.append(child)<br><br>    <span class="hljs-keyword">return</span> new_population<br><br><br><span class="hljs-comment"># Define mutation function</span><br><span class="hljs-comment"># 定义突变函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mutation</span>(<span class="hljs-params">new_population: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(population_size):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            <span class="hljs-keyword">if</span> random.random() &lt; mutation_rate:<br>                new_population[i][j] = <span class="hljs-number">1</span> - new_population[i][j]<br><br>    <span class="hljs-keyword">return</span> new_population<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># Run genetic algorithm</span><br>    <span class="hljs-comment"># 运行遗传算法</span><br>    population = initialize_population(population_size)<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(generations):<br>        selected_population = selection(population)<br>        new_population = crossover(selected_population)<br>        new_population = mutation(new_population)<br>        population = new_population<br><br>    <span class="hljs-comment"># Print final result</span><br>    <span class="hljs-comment"># 打印最终结果</span><br>    fitness_values = []<br>    <span class="hljs-keyword">for</span> chromosome <span class="hljs-keyword">in</span> population:<br>        x = <span class="hljs-built_in">sum</span>([(chromosome[i] * <span class="hljs-number">2</span>**i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)])<br>        fitness_values.append(objective_function(x))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;fitness_values:&quot;</span>, fitness_values)<br>    best_fitness_value = <span class="hljs-built_in">min</span>(fitness_values)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Best fitness value:&quot;</span>, best_fitness_value)<br></code></pre></td></tr></table></figure><p>In this example, we use a simple binary string to represent each chromosome, where each gene position can take a value of 0 or 1. Our objective function is $f(x) &#x3D; x^2$, and we attempt to find the minimum value of the function. We use an initialization function to generate an initial population, a selection function to select individuals with higher fitness, a crossover function to create new individuals, and a mutation function to introduce diversity. We run 100 generations and output the best fitness value.</p>]]></content>
    
    
    <categories>
      
      <category>system_design</category>
      
    </categories>
    
    
    <tags>
      
      <tag>system_design</tag>
      
      <tag>genetic_algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>与数学有关的悖论</title>
    <link href="/Math/Paradox/%E4%B8%8E%E6%95%B0%E5%AD%A6%E6%9C%89%E5%85%B3%E7%9A%84%E6%82%96%E8%AE%BA/"/>
    <url>/Math/Paradox/%E4%B8%8E%E6%95%B0%E5%AD%A6%E6%9C%89%E5%85%B3%E7%9A%84%E6%82%96%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="一本相关的书"><a href="#一本相关的书" class="headerlink" title="一本相关的书"></a>一本相关的书</h2><p><img src="/resources/%E4%B8%8E%E6%95%B0%E5%AD%A6%E6%9C%89%E5%85%B3%E7%9A%84%E6%82%96%E8%AE%BA/img/paradox_book.jpg" alt="《悖论：破解科学史上最复杂的9大谜团》"><br><a href="https://book.douban.com/subject/26171042">《悖论：破解科学史上最复杂的9大谜团》</a></p><ul><li>真悖论<ul><li>先有鸡还是先有蛋</li><li>时间悖论<ul><li>祖父悖论：穿越回到过去杀了你年轻的祖父</li><li>先知悖论：某人到达未来，得知将发生的不幸结果A，他在现在做出了避免导致结果A的行动，到达结果B。那么结果A在未来根本没有发生，他又是如何得知结果A的呢？</li></ul></li><li>说谎者悖论：“这句话是假的”</li></ul></li><li>认知悖论<ul><li><a href="https://en.wikipedia.org/wiki/Monty_Hall_problem">蒙提霍尔问题（三门问题）</a></li><li><a href="https://en.wikipedia.org/wiki/Zeno%27s_paradoxes">芝诺悖论</a></li></ul></li></ul><h2 id="蒙提霍尔问题（三门问题）"><a href="#蒙提霍尔问题（三门问题）" class="headerlink" title="蒙提霍尔问题（三门问题）"></a>蒙提霍尔问题（三门问题）</h2><p>假设你在参加某个电视节目比赛。</p><p>你会看见三扇关闭的门，</p><ul><li>其中一扇的后面有一辆汽车，选中后面有车的那扇门可赢得该汽车；</li><li>另外两扇门后面则各藏有一只山羊，选中有山羊的门空手而归。</li></ul><p>你选定了一扇门，但未开启它，随后节目主持人蒙提霍尔（Monty Hall）开启了剩下的两扇门中的一扇并且发现后面是一只山羊，此时主持人会给予你重新选择的机会。</p><p>此时，场上只有两扇门，一扇后是汽车，一扇后是山羊，你要不要换成另一扇门呢？</p><ul><li>换？$\frac{1}{2}$？</li><li>不换？$\frac{1}{2}$？</li></ul><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><p>换后得汽车的概率 $\frac{2}{3}$，不换得汽车的概率 $\frac{1}{3}$，不是直觉上的 $\frac{1}{2} : \frac{1}{2}$</p><h3 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h3><ul><li>初始选中汽车概率 $\frac{1}{3}$<ul><li>主持人开启剩下的任意一扇山羊门（二选一）</li><li>换后得汽车概率：$0$ （换后只有山羊）</li><li>不换得汽车概率：$1$</li></ul></li><li>初始选中山羊概率 $\frac{2}{3}$<ul><li>主持人开启剩下的任意一扇山羊门（实则主持人只能打开剩下的非汽车的那一扇山羊门）</li><li>换后得汽车概率：$1$</li><li>不换得汽车概率：$0$</li></ul></li></ul><p>综上：</p><ul><li>换后得汽车概率 $\frac{1}{3} \times 0 + \frac{2}{3} \times 1 &#x3D; \frac{2}{3}$</li><li>不换得汽车概率 $\frac{1}{3} \times 1 + \frac{2}{3} \times 0 &#x3D; \frac{1}{3}$</li></ul><h3 id="朴素的极限分析法"><a href="#朴素的极限分析法" class="headerlink" title="朴素的极限分析法"></a>朴素的极限分析法</h3><p>$3$ 扇门使得矛盾并不是体现得特别突出，激化一下条件试试看。</p><p>假如有 $100$ 扇门，其中只有 $1$ 扇门后有汽车，其他 $99$ 扇门后是山羊。</p><ol><li>我们初始时大概率选中的是后面是山羊的门（$\frac{99}{100}$），概率非常接近 1，属于极大概率事件。</li><li>主持人打开后面是山羊的 $98$ 扇门后，直觉上非常容易感觉到主持人留下来的那扇门后就是汽车。</li></ol><blockquote><p><strong>关键：</strong></p><p>主持人【为了保证】打开特定数量的门后【场上仍存在汽车门】，打开门的过程是有意识打开特定的门的，并不是随机打开的。</p><p>所以结果不满足能体现随机性的 $\frac{1}{2} : \frac{1}{2}$。</p></blockquote><h2 id="芝诺悖论"><a href="#芝诺悖论" class="headerlink" title="芝诺悖论"></a>芝诺悖论</h2><p>源于亚里士多德的《物理学》一书。</p><p>在龟兔赛跑中，无疑兔子的移动速度比乌龟快。</p><ol><li>乌龟被允许率先出发；</li><li>当兔子起跑时，乌龟已经抵达路途中的某处（姑且称为 A 点）；</li><li>当兔子抵达 A 点时，乌龟已经抵达稍远的 B 点；</li><li>当兔子抵达 B 点时，乌龟又已经抵达更远的 C 点；</li><li>……</li></ol><p>尽管兔子不断追赶乌龟，但兔子好像永远追不上乌龟？</p><h3 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h3><p>设乌龟速度 $v_1 &#x3D; 1$，兔子速度 $v_2 &#x3D; n$，乌龟被允许率先出发 $t$ s。</p><ol><li>乌龟率先移动了 $t$ 路程抵达 A 点，兔子花了 $\frac{t}{n}$ s 抵达 A 点；</li><li>此时乌龟又已移动 $\frac{t}{n}$ 路程抵达 B 点，兔子又花 $\frac{t}{n^2}$ 抵达 B 点；</li><li>此时乌龟又已移动 $\frac{t}{n^2}$ 路程抵达 C 点，兔子又花 $\frac{t}{n^3}$ 抵达 C 点；</li><li>……</li></ol><p>总时间 $T &#x3D; t + \frac{t}{n} + \frac{t}{n^2} + \frac{t}{n^3} + … + \frac{t}{n^\infty} &#x3D; \frac{t(1-\frac{1}{n^\infty})}{1-\frac{1}{n}} &#x3D; \frac{nt(1-\frac{1}{n^\infty})}{n-1} \Rightarrow \frac{nt}{n-1}$</p><p>算出无穷累加起来的流逝时间为收敛级数，无限逼近 $\frac{nt}{n-1}$，而实际流逝时间可以达到。与实际相悖，故为悖论。</p><h3 id="实际总时间"><a href="#实际总时间" class="headerlink" title="实际总时间"></a>实际总时间</h3><p>$$<br>\begin{align*}<br>&amp; 兔子路程 &#x3D; 乌龟路程 \newline<br>&amp; n(T - t) &#x3D; T \newline<br>&amp; T &#x3D; \frac{nt}{n-1} \newline<br>\end{align*}<br>$$</p>]]></content>
    
    
    <categories>
      
      <category>math</category>
      
      <category>paradox</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
      <tag>paradox</tag>
      
      <tag>monty_hall_problem</tag>
      
      <tag>zeno_paradoxes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Configure Visual Studio Code (VSCode)</title>
    <link href="/Configuration/VSCode/Configure-Visual-Studio-Code-VSCode/"/>
    <url>/Configuration/VSCode/Configure-Visual-Studio-Code-VSCode/</url>
    
    <content type="html"><![CDATA[<p>List some extensions I get used to using.</p><h2 id="General"><a href="#General" class="headerlink" title="General"></a>General</h2><h3 id="Font"><a href="#Font" class="headerlink" title="Font"></a>Font</h3><p><a href="https://github.com/tonsky/FiraCode">Download FiraCode font</a></p><blockquote><p><strong>font family setting:</strong> ‘Fira Code Retina’, Monaco, ‘Courier New’, monospace’</p></blockquote><h3 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h3><ul><li><code>One Dark Pro</code>: An awesome theme!</li><li><code>vscode-icons</code>: A set of good-looking icons for folders and files.</li></ul><h3 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h3><ul><li><code>Better Comments</code>: Highlight comments.</li></ul><h3 id="Run-code"><a href="#Run-code" class="headerlink" title="Run code"></a>Run code</h3><ul><li><p><code>Code Runner</code>: Run a single file on the spot conveniently with shortcut key <code>control + option + N</code> in MacOS.</p>  <div class="note note-info">            <p><strong>How to edit its executor map:</strong></p><ol><li>Click the gear icon in the lower right corner</li><li>Click <code>Settings - Open Settings (JSON)</code> icon</li><li>Edit in <code>settings.json</code></li></ol>          </div>  <div class="note note-info">            <p><strong>An available executor map:</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code-runner.executorMap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;javascript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;java&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; javac $fileName &amp;&amp; java $fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; gcc $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cpp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; g++ -std=c++2a $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;objective-c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; gcc -framework Cocoa $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;php&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;php&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;python&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;python3 -u&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;perl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;perl&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;perl6&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;perl6&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;ruby&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ruby&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;go&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;go run&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;lua&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lua&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;groovy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;groovy&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;powershell&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;powershell -ExecutionPolicy ByPass -File&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;bat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cmd /c&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;shellscript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bash&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;fsharp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fsi&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;csharp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scriptcs&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;vbscript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cscript //Nologo&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;typescript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ts-node&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;coffeescript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;coffee&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;scala&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scala&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;swift&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;swift&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;julia&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;julia&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;crystal&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;crystal&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;ocaml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ocaml&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;r&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Rscript&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;applescript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;osascript&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;clojure&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lein exec&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;haxe&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;rust&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; rustc $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;racket&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;racket&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;scheme&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;csi -script&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;ahk&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;autohotkey&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;autoit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;autoit3&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;dart&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dart&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;pascal&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; fpc $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; dmd $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;haskell&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;runhaskell&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;nim&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nim compile --verbosity:0 --hints:off --run&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;lisp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sbcl --script&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;kit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kitc --run&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;v&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;v run&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sass&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sass --style expanded&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;scss&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scss --style expanded&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;less&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; lessc $fileName $fileNameWithoutExt.css&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;FortranFreeForm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;fortran-modern&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;fortran_fixed-form&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;fortran&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; sml $fileName&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>          </div></li></ul><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><ul><li><code>git-commit-plugin</code>: Type git commit with some templates and emojis.</li><li><code>GitLens — Git supercharged</code>: Reveiw git log graphically.</li></ul><h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><ul><li><code>Markdown All in One</code>: Markdown format especially for filling in spaces in tables</li><li><code>markdownlint</code>: Markdown lint and format.</li><li><code>Markdown Preview Enhanced</code>: Markdown preview.</li></ul><h3 id="Autocomplete"><a href="#Autocomplete" class="headerlink" title="Autocomplete"></a>Autocomplete</h3><ul><li><code>Tabnine</code>: An AI autocomplete tool whose full name is <code>Tabnine AI Autocomplete for Javascript, Python, Typescript, PHP, Go, Java, Ruby &amp; more</code>.</li></ul><h2 id="Containers"><a href="#Containers" class="headerlink" title="Containers"></a>Containers</h2><ul><li><code>Dev Containers</code>: Create containers environment such as Linux for development quickly.</li></ul><h2 id="Language"><a href="#Language" class="headerlink" title="Language"></a>Language</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><ul><li><code>clangd</code>: Awesome clang server with clang-format and clang-tidy.</li><li><code>Cmake</code></li><li><code>Cmake Tools</code></li></ul><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><ul><li><code>Python</code>: IntelliSense (Pylance), Linting, Debugging (multi-threaded, remote), Jupyter Notebooks, code formatting, refactoring, unit tests, and more.</li><li><code>Pylance</code>: A performant, feature-rich language server for Python in VS Code</li><li><code>isort</code>: Sort imports automatically.</li></ul>]]></content>
    
    
    <categories>
      
      <category>configuration</category>
      
      <category>vscode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>configuration</tag>
      
      <tag>vscode</tag>
      
      <tag>extension</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Configure clang-tidy</title>
    <link href="/Configuration/clang/Configure-clang-tidy/"/>
    <url>/Configuration/clang/Configure-clang-tidy/</url>
    
    <content type="html"><![CDATA[<p>A <code>.clang-tidy</code> configuration template I prefer to use.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">Checks:</span>     <span class="hljs-string">&#x27;</span><br><span class="hljs-string">            bugprone-*,</span><br><span class="hljs-string">            -bugprone-exception-escape,</span><br><span class="hljs-string">            -bugprone-easily-swappable-parameters,</span><br><span class="hljs-string"></span><br><span class="hljs-string">            clang-analyzer-*,</span><br><span class="hljs-string"></span><br><span class="hljs-string">            concurrency-*,</span><br><span class="hljs-string"></span><br><span class="hljs-string">            cppcoreguidelines-*,</span><br><span class="hljs-string">            -cppcoreguidelines-macro-usage,</span><br><span class="hljs-string">            -cppcoreguidelines-owning-memory,</span><br><span class="hljs-string">            -cppcoreguidelines-avoid-magic-numbers,</span><br><span class="hljs-string">            -cppcoreguidelines-pro-type-vararg,</span><br><span class="hljs-string">            -cppcoreguidelines-pro-bounds-pointer-arithmetic,</span><br><span class="hljs-string">            -cppcoreguidelines-pro-bounds-array-to-pointer-decay,</span><br><span class="hljs-string">            -cppcoreguidelines-pro-type-reinterpret-cast,</span><br><span class="hljs-string"></span><br><span class="hljs-string">            google-*,</span><br><span class="hljs-string">            -google-readability-casting,</span><br><span class="hljs-string">            -google-readability-todo,</span><br><span class="hljs-string">            -google-runtime-int,</span><br><span class="hljs-string"></span><br><span class="hljs-string">            hicpp-*,</span><br><span class="hljs-string">            -hicpp-vararg,</span><br><span class="hljs-string">            -hicpp-use-auto,</span><br><span class="hljs-string">            -hicpp-no-array-decay,</span><br><span class="hljs-string">            -hicpp-avoid-c-arrays,</span><br><span class="hljs-string">            -hicpp-signed-bitwise,</span><br><span class="hljs-string"></span><br><span class="hljs-string">            modernize-*,</span><br><span class="hljs-string">            -modernize-use-trailing-return-type,</span><br><span class="hljs-string">            -modernize-avoid-bind,</span><br><span class="hljs-string">            -modernize-avoid-c-arrays,</span><br><span class="hljs-string">            -modernize-use-auto,</span><br><span class="hljs-string"></span><br><span class="hljs-string">            performance-*,</span><br><span class="hljs-string"></span><br><span class="hljs-string">            portability-*,</span><br><span class="hljs-string"></span><br><span class="hljs-string">            readability-*,</span><br><span class="hljs-string">            -readability-magic-numbers,</span><br><span class="hljs-string">            -readability-make-member-function-const,</span><br><span class="hljs-string">            -readability-implicit-bool-conversion,</span><br><span class="hljs-string">            -readability-identifier-length,</span><br><span class="hljs-string">            -readability-redundant-access-specifiers,</span><br><span class="hljs-string">            -readability-qualified-auto</span><br><span class="hljs-string">            &#x27;</span><br><span class="hljs-attr">FormatStyle:</span> <span class="hljs-string">google</span><br><span class="hljs-attr">CheckOptions:</span><br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">readability-identifier-naming.ClassCase</span>,           <span class="hljs-attr">value:</span> <span class="hljs-string">CamelCase</span>  &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">readability-identifier-naming.EnumCase</span>,            <span class="hljs-attr">value:</span> <span class="hljs-string">CamelCase</span>  &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">readability-identifier-naming.FunctionCase</span>,        <span class="hljs-attr">value:</span> <span class="hljs-string">lower_case</span>  &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">readability-identifier-naming.GlobalConstantCase</span>,  <span class="hljs-attr">value:</span> <span class="hljs-string">UPPER_CASE</span> &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">readability-identifier-naming.MemberCase</span>,          <span class="hljs-attr">value:</span> <span class="hljs-string">lower_case</span> &#125;<br>  <span class="hljs-comment"># - &#123; key: readability-identifier-naming.MemberSuffix,        value: _          &#125;</span><br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">readability-identifier-naming.NamespaceCase</span>,       <span class="hljs-attr">value:</span> <span class="hljs-string">lower_case</span> &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">readability-identifier-naming.StructCase</span>,          <span class="hljs-attr">value:</span> <span class="hljs-string">CamelCase</span>  &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">readability-identifier-naming.UnionCase</span>,           <span class="hljs-attr">value:</span> <span class="hljs-string">CamelCase</span>  &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">readability-identifier-naming.VariableCase</span>,        <span class="hljs-attr">value:</span> <span class="hljs-string">lower_case</span> &#125;<br><span class="hljs-attr">WarningsAsErrors:</span> <span class="hljs-string">&#x27;*&#x27;</span><br><span class="hljs-attr">HeaderFilterRegex:</span> <span class="hljs-string">&#x27;/(src|test)/include&#x27;</span><br><span class="hljs-attr">AnalyzeTemporaryDtors:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>configuration</category>
      
      <category>clang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>configuration</tag>
      
      <tag>clang</tag>
      
      <tag>clang-tidy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Configure clang-format</title>
    <link href="/Configuration/clang/Configure-clang-format/"/>
    <url>/Configuration/clang/Configure-clang-format/</url>
    
    <content type="html"><![CDATA[<p>A <code>.clang-format</code> configuration template I prefer to use.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># .clang-format</span><br><span class="hljs-comment"># Run manually to reformat a file:</span><br><span class="hljs-comment"># clang-format -i --style=file &lt;file&gt;</span><br><span class="hljs-comment"># find . -iname &#x27;*.cc&#x27; -o -iname &#x27;*.h&#x27; -o -iname &#x27;*.h.in&#x27; | xargs clang-format -i --style=file</span><br><br><span class="hljs-attr">Language:</span> <span class="hljs-string">Cpp</span><br><span class="hljs-attr">BasedOnStyle:</span> <span class="hljs-string">Google</span><br><span class="hljs-comment"># The offset of Access specifier(public/protected/private)</span><br><span class="hljs-attr">AccessModifierOffset:</span> <span class="hljs-number">-4</span><br><span class="hljs-attr">AllowShortBlocksOnASingleLine:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">AllowShortFunctionsOnASingleLine:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">AllowShortLambdasOnASingleLine:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">ColumnLimit:</span> <span class="hljs-number">120</span><br><span class="hljs-attr">DerivePointerAlignment:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">IndentWidth:</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>configuration</category>
      
      <category>clang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>configuration</tag>
      
      <tag>clang</tag>
      
      <tag>clang-format</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Learn coroutine - A asymmetric coroutine library for C</title>
    <link href="/Dev/Library/coroutine/Learn-coroutine-A-asymmetric-coroutine-library-for-C/"/>
    <url>/Dev/Library/coroutine/Learn-coroutine-A-asymmetric-coroutine-library-for-C/</url>
    
    <content type="html"><![CDATA[<p>Recently I learned a library that implements asymmetric coroutine in C, and added some comments to help understand. Actually, it’s a brief library so that we don’t have to cost too much time to read.</p><p>Repository address: <a href="https://github.com/cloudwu/coroutine">https://github.com/cloudwu/coroutine</a><br>Blog thread by author (云风): <a href="https://blog.codingnow.com/2012/07/c_coroutine.html">https://blog.codingnow.com/2012/07/c_coroutine.html</a> (its comments are helpful)</p><h2 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h2><p>There are some interfaces to read and write current execution context in <code>ucontext.h</code> - <code>getcontext</code> &#x2F; <code>makecontext</code> &#x2F; <code>swapcontext</code>.</p><h3 id="getcontext"><a href="#getcontext" class="headerlink" title="getcontext"></a><code>getcontext</code></h3><p>In POSIX, <code>getcontext</code> is a function that retrieves the current execution context of a thread and stores it in a <code>ucontext_t</code> object.</p><p>The execution context includes the values of the CPU registers, the stack pointer, and the signal mask. This information can be used to save and restore the state of a thread, allowing it to be suspended and resumed at a later time.</p><p><code>getcontext</code> is typically used in conjunction with other functions such as <code>setcontext</code> and <code>makecontext</code> to implement user-level thread libraries, cooperative multitasking, and other advanced programming techniques that require low-level control over thread execution.</p><p><strong>Note that</strong> the <code>ucontext_t</code> type is not part of the POSIX standard, but is defined by the Single UNIX Specification (SUS) and is commonly supported on POSIX-compliant systems.</p><h3 id="makecontext"><a href="#makecontext" class="headerlink" title="makecontext"></a><code>makecontext</code></h3><p>In POSIX, <code>makecontext</code> is a function that initializes a new execution context for a thread by specifying a new stack and a function to execute within that context.</p><p>The <code>makecontext</code> function takes several arguments, including a pointer to a <code>ucontext_t</code> object that will be initialized with the new context, a pointer to the function to execute, and a variable-length argument list that contains the arguments to pass to the function.</p><p>Once the <code>ucontext_t</code> object has been initialized by <code>makecontext</code>, it can be passed to setcontext to switch the execution context of the current thread to the new context, allowing the specified function to be executed within that context.</p><h3 id="swapcontext"><a href="#swapcontext" class="headerlink" title="swapcontext"></a><code>swapcontext</code></h3><p>In POSIX, <code>swapcontext</code> is a function that saves the current execution context of a thread and switches to a new execution context specified by a <code>ucontext_t</code> object.</p><p>The <code>swapcontext</code> function takes two arguments: a pointer to a <code>ucontext_t</code> object representing the current context, and a pointer to a <code>ucontext_t</code> object representing the new context to switch to. When <code>swapcontext</code> is called, it saves the current context in the first <code>ucontext_t</code> object, and then switches to the new context specified in the second <code>ucontext_t</code> object.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;coroutine.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __APPLE__ &amp;&amp; __MACH__</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ucontext.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ucontext.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STACK_SIZE (1024 * 1024)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEFAULT_COROUTINE 16</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">coroutine</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">schedule</span> &#123;</span><br>    <span class="hljs-type">char</span> <span class="hljs-built_in">stack</span>[STACK_SIZE];<br>    <span class="hljs-type">ucontext_t</span> main;<br>    <span class="hljs-type">int</span> nco;                <span class="hljs-comment">// used coroutine size</span><br>    <span class="hljs-type">int</span> cap;                <span class="hljs-comment">// maximum coroutine capacity</span><br>    <span class="hljs-type">int</span> running;            <span class="hljs-comment">// the index of the running coroutine</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">coroutine</span>** <span class="hljs-title">co</span>;</span>  <span class="hljs-comment">// coroutine array that can expand dynamically</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">coroutine</span> &#123;</span><br>    coroutine_func func;<br>    <span class="hljs-type">void</span>* ud;  <span class="hljs-comment">// parameter</span><br>    <span class="hljs-type">ucontext_t</span> ctx;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">schedule</span>* <span class="hljs-title">sch</span>;</span><br>    <span class="hljs-type">ptrdiff_t</span> cap;   <span class="hljs-comment">// the capacity of the coroutine&#x27;s stack</span><br>    <span class="hljs-type">ptrdiff_t</span> size;  <span class="hljs-comment">// the used size of the coroutine&#x27;s stack</span><br>    <span class="hljs-type">int</span> status;      <span class="hljs-comment">// enum value: COROUTINE_READY / COROUTINE_RUNNING / COROUTINE_SUSPEND</span><br>    <span class="hljs-type">char</span>* <span class="hljs-built_in">stack</span>;     <span class="hljs-comment">// the stack of the coroutine</span><br>&#125;;<br><br><span class="hljs-comment">// Create a coroutine</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">coroutine</span>* _<span class="hljs-title">co_new</span>(<span class="hljs-keyword">struct</span> <span class="hljs-title">schedule</span>* <span class="hljs-title">S</span>, <span class="hljs-title">coroutine_func</span> <span class="hljs-title">func</span>, <span class="hljs-title">void</span>* <span class="hljs-title">ud</span>) &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">coroutine</span>* <span class="hljs-title">co</span> =</span> <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(*co));<br>    co-&gt;func = func;<br>    co-&gt;ud = ud;<br>    co-&gt;sch = S;<br>    co-&gt;cap = <span class="hljs-number">0</span>;<br>    co-&gt;size = <span class="hljs-number">0</span>;<br>    co-&gt;status = COROUTINE_READY;<br>    co-&gt;<span class="hljs-built_in">stack</span> = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> co;<br>&#125;<br><br><span class="hljs-type">void</span> _co_delete(<span class="hljs-keyword">struct</span> coroutine* co) &#123;<br>    <span class="hljs-built_in">free</span>(co-&gt;<span class="hljs-built_in">stack</span>);<br>    <span class="hljs-built_in">free</span>(co);<br>&#125;<br><br><span class="hljs-keyword">struct</span> schedule* <span class="hljs-title function_">coroutine_open</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">schedule</span>* <span class="hljs-title">S</span> =</span> <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(*S));<br>    S-&gt;nco = <span class="hljs-number">0</span>;<br>    S-&gt;cap = DEFAULT_COROUTINE;<br>    S-&gt;running = <span class="hljs-number">-1</span>;<br>    S-&gt;co = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> coroutine*) * S-&gt;cap);<br>    <span class="hljs-built_in">memset</span>(S-&gt;co, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> coroutine*) * S-&gt;cap);<br>    <span class="hljs-keyword">return</span> S;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">coroutine_close</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> schedule* S)</span> &#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; S-&gt;cap; i++) &#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">coroutine</span>* <span class="hljs-title">co</span> =</span> S-&gt;co[i];<br>        <span class="hljs-keyword">if</span> (co) &#123;<br>            _co_delete(co);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(S-&gt;co);<br>    S-&gt;co = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">free</span>(S);<br>&#125;<br><br><span class="hljs-type">int</span>  <span class="hljs-comment">// return index of the new coroutine in slots</span><br>coroutine_new(<span class="hljs-keyword">struct</span> schedule* S, coroutine_func func, <span class="hljs-type">void</span>* ud) &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">coroutine</span>* <span class="hljs-title">co</span> =</span> _co_new(S, func, ud);<br>    <span class="hljs-keyword">if</span> (S-&gt;nco &gt;= S-&gt;cap) &#123;  <span class="hljs-comment">// Expand space if it&#x27;s full</span><br>        <span class="hljs-type">int</span> id = S-&gt;cap;<br>        S-&gt;co = <span class="hljs-built_in">realloc</span>(S-&gt;co, S-&gt;cap * <span class="hljs-number">2</span> * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> coroutine*));  <span class="hljs-comment">// double</span><br>        <span class="hljs-built_in">memset</span>(S-&gt;co + S-&gt;cap, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> coroutine*) * S-&gt;cap);<br>        S-&gt;co[S-&gt;cap] = co;<br>        S-&gt;cap *= <span class="hljs-number">2</span>;<br>        ++S-&gt;nco;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">int</span> i;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; S-&gt;cap; i++) &#123;<br>            <span class="hljs-type">int</span> id = (i + S-&gt;nco) % S-&gt;cap;<br>            <span class="hljs-keyword">if</span> (S-&gt;co[id] == <span class="hljs-literal">NULL</span>) &#123;<br>                S-&gt;co[id] = co;<br>                ++S-&gt;nco;<br>                <span class="hljs-keyword">return</span> id;<br>            &#125;<br>        &#125;<br>    &#125;<br>    assert(<span class="hljs-number">0</span>);  <span class="hljs-comment">// impossible to arrive it</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">mainfunc</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> low32, <span class="hljs-type">uint32_t</span> hi32)</span> &#123;<br>    <span class="hljs-comment">// initialize</span><br>    <span class="hljs-type">uintptr_t</span> ptr = (<span class="hljs-type">uintptr_t</span>)low32 | ((<span class="hljs-type">uintptr_t</span>)hi32 &lt;&lt; <span class="hljs-number">32</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">schedule</span>* <span class="hljs-title">S</span> =</span> (<span class="hljs-keyword">struct</span> schedule*)ptr;<br>    <span class="hljs-type">int</span> id = S-&gt;running;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">coroutine</span>* <span class="hljs-title">C</span> =</span> S-&gt;co[id];<br><br>    <span class="hljs-comment">// run</span><br>    C-&gt;func(S, C-&gt;ud);<br><br>    <span class="hljs-comment">// delete coroutine and reset status</span><br>    _co_delete(C);<br>    S-&gt;co[id] = <span class="hljs-literal">NULL</span>;<br>    --S-&gt;nco;<br>    S-&gt;running = <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">coroutine_resume</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> schedule* S, <span class="hljs-type">int</span> id)</span> &#123;<br>    assert(S-&gt;running == <span class="hljs-number">-1</span>);<br>    assert(id &gt;= <span class="hljs-number">0</span> &amp;&amp; id &lt; S-&gt;cap);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">coroutine</span>* <span class="hljs-title">C</span> =</span> S-&gt;co[id];<br>    <span class="hljs-keyword">if</span> (C == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> status = C-&gt;status;<br>    <span class="hljs-keyword">switch</span> (status) &#123;<br>        <span class="hljs-keyword">case</span> COROUTINE_READY:  <span class="hljs-comment">// the first time to run</span><br>            getcontext(&amp;C-&gt;ctx);<br>            C-&gt;ctx.uc_stack.ss_sp = S-&gt;<span class="hljs-built_in">stack</span>;  <span class="hljs-comment">// specify the stack address of the coroutine</span><br>            C-&gt;ctx.uc_stack.ss_size = STACK_SIZE;<br>            C-&gt;ctx.uc_link = &amp;S-&gt;main;<br>            S-&gt;running = id;<br>            C-&gt;status = COROUTINE_RUNNING;<br>            <span class="hljs-type">uintptr_t</span> ptr = (<span class="hljs-type">uintptr_t</span>)S;<br>            makecontext(&amp;C-&gt;ctx, (<span class="hljs-type">void</span> (*)(<span class="hljs-type">void</span>))mainfunc, <span class="hljs-number">2</span>, (<span class="hljs-type">uint32_t</span>)ptr,<br>                        (<span class="hljs-type">uint32_t</span>)(ptr &gt;&gt; <span class="hljs-number">32</span>));  <span class="hljs-comment">// transfer schedule pointer by lower 32 bits and high 32 bits</span><br>            swapcontext(&amp;S-&gt;main,<br>                        &amp;C-&gt;ctx);  <span class="hljs-comment">// save the current context in S-&gt;main and switch to the context from C-&gt;ctx</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> COROUTINE_SUSPEND:                                          <span class="hljs-comment">// not the first time to run</span><br>            <span class="hljs-built_in">memcpy</span>(S-&gt;<span class="hljs-built_in">stack</span> + STACK_SIZE - C-&gt;size, C-&gt;<span class="hljs-built_in">stack</span>, C-&gt;size);  <span class="hljs-comment">// resume the stack of the coroutine</span><br>            S-&gt;running = id;<br>            C-&gt;status = COROUTINE_RUNNING;<br>            swapcontext(&amp;S-&gt;main, &amp;C-&gt;ctx);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            assert(<span class="hljs-number">0</span>);  <span class="hljs-comment">// impossible</span><br>    &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> _save_stack(<span class="hljs-keyword">struct</span> coroutine* C, <span class="hljs-type">char</span>* top) &#123;<br>    <span class="hljs-type">char</span> dummy = <span class="hljs-number">0</span>;<br>    assert(top - &amp;dummy &lt;= STACK_SIZE);  <span class="hljs-comment">// make sure that the size of the current context is less than the limit</span><br>    <span class="hljs-comment">// store the current stack of the coroutine</span><br>    <span class="hljs-keyword">if</span> (C-&gt;cap &lt; top - &amp;dummy) &#123;<br>        <span class="hljs-built_in">free</span>(C-&gt;<span class="hljs-built_in">stack</span>);<br>        C-&gt;cap = top - &amp;dummy;<br>        C-&gt;<span class="hljs-built_in">stack</span> = <span class="hljs-built_in">malloc</span>(C-&gt;cap);<br>    &#125;<br>    C-&gt;size = top - &amp;dummy;<br>    <span class="hljs-built_in">memcpy</span>(C-&gt;<span class="hljs-built_in">stack</span>, &amp;dummy, C-&gt;size);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">coroutine_yield</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> schedule* S)</span> &#123;<br>    <span class="hljs-type">int</span> id = S-&gt;running;<br>    assert(id &gt;= <span class="hljs-number">0</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">coroutine</span>* <span class="hljs-title">C</span> =</span> S-&gt;co[id];<br>    assert((<span class="hljs-type">char</span>*)&amp;C &gt; S-&gt;<span class="hljs-built_in">stack</span>);<br>    _save_stack(C, S-&gt;<span class="hljs-built_in">stack</span> + STACK_SIZE);<br>    C-&gt;status = COROUTINE_SUSPEND;<br>    S-&gt;running = <span class="hljs-number">-1</span>;<br>    swapcontext(&amp;C-&gt;ctx, &amp;S-&gt;main);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">coroutine_status</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> schedule* S, <span class="hljs-type">int</span> id)</span> &#123;<br>    assert(id &gt;= <span class="hljs-number">0</span> &amp;&amp; id &lt; S-&gt;cap);<br>    <span class="hljs-keyword">if</span> (S-&gt;co[id] == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> COROUTINE_DEAD;<br>    &#125;<br>    <span class="hljs-keyword">return</span> S-&gt;co[id]-&gt;status;<br>&#125;<br><br><span class="hljs-type">int</span>  <span class="hljs-comment">// return the index of the current running coroutine</span><br>coroutine_running(<span class="hljs-keyword">struct</span> schedule* S) &#123;<br>    <span class="hljs-keyword">return</span> S-&gt;running;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;coroutine.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">args</span> &#123;</span><br>    <span class="hljs-type">int</span> n;<br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">foo</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> schedule* S, <span class="hljs-type">void</span>* ud)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">args</span>* <span class="hljs-title">arg</span> =</span> ud;<br>    <span class="hljs-type">int</span> start = arg-&gt;n;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;coroutine %d : %d\n&quot;</span>, coroutine_running(S), start + i);<br>        coroutine_yield(S);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> schedule* S)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">args</span> <span class="hljs-title">arg1</span> =</span> &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">args</span> <span class="hljs-title">arg2</span> =</span> &#123;<span class="hljs-number">100</span>&#125;;<br><br>    <span class="hljs-type">int</span> co1 = coroutine_new(S, foo, &amp;arg1);<br>    <span class="hljs-type">int</span> co2 = coroutine_new(S, foo, &amp;arg2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;main start\n&quot;</span>);<br>    <span class="hljs-keyword">while</span> (coroutine_status(S, co1) &amp;&amp; coroutine_status(S, co2)) &#123;<br>        coroutine_resume(S, co1);<br>        coroutine_resume(S, co2);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;main end\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">schedule</span>* <span class="hljs-title">S</span> =</span> coroutine_open();<br>    test(S);<br>    coroutine_close(S);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs log">main start<br>coroutine 0 : 0<br>coroutine 1 : 100<br>coroutine 0 : 1<br>coroutine 1 : 101<br>coroutine 0 : 2<br>coroutine 1 : 102<br>coroutine 0 : 3<br>coroutine 1 : 103<br>coroutine 0 : 4<br>coroutine 1 : 104<br>main end<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>library</category>
      
      <category>coroutine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>library</tag>
      
      <tag>coroutine</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Introduction to std::string_view/std::span</title>
    <link href="/Dev/C++/STL/Introduction-to-std-string-view-std-span/"/>
    <url>/Dev/C++/STL/Introduction-to-std-string-view-std-span/</url>
    
    <content type="html"><![CDATA[<h2 id="std-string-view"><a href="#std-string-view" class="headerlink" title="std::string_view"></a><code>std::string_view</code></h2><p><code>std::string_view</code> is imported in C++17.</p><p>It stores the address of a string and its length. In some cases, it can avoid the overhead of copying strings such as in the parameter of function <code>void foo(const std::string&amp;)</code>.</p><p>Note that it can only be used for reading, not writing.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string_view&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std::literals;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_string_view</span><span class="hljs-params">(std::string_view sv)</span> </span>&#123;<br>    std::cout &lt;&lt; sv &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">print_string_view</span>(<span class="hljs-string">&quot;Hello\0 World&quot;</span>);<br>    <span class="hljs-built_in">print_string_view</span>(<span class="hljs-string">&quot;Hello\0 World&quot;</span>s);<br>    <span class="hljs-built_in">print_string_view</span>(<span class="hljs-string">&quot;Hello\0 World&quot;</span>sv);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Hello<br>Hello World<br>Hello World<br></code></pre></td></tr></table></figure><h2 id="std-span"><a href="#std-span" class="headerlink" title="std::span"></a><code>std::span</code></h2><p><code>std::span</code> is imported in C++20.</p><p>It’s similar to <code>std::string_view</code>, and it describes a continuous sequence of memory. The most important thing is that it can be used instead of an array as a function argument, because when we use an array as a parameter (non-reference), it will degrade to a pointer, so we have to pass the length of the array additionally, which is a hassle.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;span&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ARRAY_SIZE(array) (sizeof(array) / sizeof(array[0]))</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_span</span><span class="hljs-params">(std::span&lt;<span class="hljs-type">int</span>&gt; array)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> item : array) &#123;<br>        std::cout &lt;&lt; item &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    std::cout &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_array</span><span class="hljs-params">(<span class="hljs-type">int</span>* array, <span class="hljs-type">int</span> length)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; ++i) &#123;<br>        std::cout &lt;&lt; array[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    std::cout &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> array[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-built_in">print_array</span>(array, <span class="hljs-built_in">ARRAY_SIZE</span>(array));<br>    <span class="hljs-built_in">print_span</span>(array);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/589182023">C++的那些事——std::string_view和std::span</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>cpp</category>
      
      <category>stl</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>stl</tag>
      
      <tag>cpp17</tag>
      
      <tag>cpp20</tag>
      
      <tag>string_view</tag>
      
      <tag>span</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 28 - Find the Index of the First Occurrence in a String</title>
    <link href="/Algorithm/LeetCode/LeetCode-28-Find-the-Index-of-the-First-Occurrence-in-a-String/"/>
    <url>/Algorithm/LeetCode/LeetCode-28-Find-the-Index-of-the-First-Occurrence-in-a-String/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-warning">medium</span></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Find-the-Index-of-the-First-Occurrence-in-a-String"><a href="#English-Find-the-Index-of-the-First-Occurrence-in-a-String" class="headerlink" title="English (Find the Index of the First Occurrence in a String)"></a>English (Find the Index of the First Occurrence in a String)</h3><p>Given two strings <code>needle</code> and <code>haystack</code>, return the index of the first occurrence of <code>needle</code> in <code>haystack</code>, or <code>-1</code> if <code>needle</code> is not part of <code>haystack</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: haystack = &quot;sadbutsad&quot;, needle = &quot;sad&quot;<br>Output: 0<br>Explanation: &quot;sad&quot; occurs at index 0 and 6.<br>The first occurrence is at index 0, so we return 0.<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: haystack = &quot;leetcode&quot;, needle = &quot;leeto&quot;<br>Output: -1<br>Explanation: &quot;leeto&quot; did not occur in &quot;leetcode&quot;, so we return -1.<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= haystack.length, needle.length &lt;= 10^4</code></li><li><code>haystack</code> and <code>needle</code> consist of only lowercase English characters.</li></ul><h3 id="Chinese-找出字符串中第一个匹配项的下标"><a href="#Chinese-找出字符串中第一个匹配项的下标" class="headerlink" title="Chinese (找出字符串中第一个匹配项的下标)"></a>Chinese (找出字符串中第一个匹配项的下标)</h3><p>给你两个字符串 <code>haystack</code> 和 <code>needle</code> ，请你在 <code>haystack</code> 字符串中找出 <code>needle</code> 字符串的第一个匹配项的下标（下标从 0 开始）。如果 <code>needle</code> 不是 <code>haystack</code> 的一部分，则返回 <code>-1</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：haystack = &quot;sadbutsad&quot;, needle = &quot;sad&quot;<br>输出：0<br>解释：&quot;sad&quot; 在下标 0 和 6 处匹配。<br>第一个匹配项的下标是 0 ，所以返回 0 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：haystack = &quot;leetcode&quot;, needle = &quot;leeto&quot;<br>输出：-1<br>解释：&quot;leeto&quot; 没有在 &quot;leetcode&quot; 中出现，所以返回 -1 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= haystack.length, needle.length &lt;= 10^4</code></li><li><code>haystack</code> 和 <code>needle</code> 仅由小写英文字符组成</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute-Force"></a>Brute-Force</h3><p>Based on sliding window algorithm.</p><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">strStr</span><span class="hljs-params">(string haystack, string needle)</span> </span>&#123;<br>        <span class="hljs-type">int</span> haystack_size = haystack.<span class="hljs-built_in">size</span>(), needle_size = needle.<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-keyword">auto</span> equal = [&amp;haystack, &amp;needle](<span class="hljs-type">int</span> haystack_begin, <span class="hljs-type">int</span> needle_begin, <span class="hljs-type">int</span> compared_size) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> compared_index = <span class="hljs-number">0</span>; compared_index &lt; compared_size; ++compared_index) &#123;<br>                <span class="hljs-keyword">if</span> (haystack[haystack_begin + compared_index] != needle[needle_begin + compared_index]) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> haystack_begin = <span class="hljs-number">0</span>; haystack_begin &lt;= haystack_size - needle_size; ++haystack_begin) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">equal</span>(haystack_begin, <span class="hljs-number">0</span>, needle_size)) &#123;<br>                <span class="hljs-keyword">return</span> haystack_begin;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="KMP-Knuth-Morris-Pratt"><a href="#KMP-Knuth-Morris-Pratt" class="headerlink" title="KMP (Knuth-Morris-Pratt)"></a>KMP (Knuth-Morris-Pratt)</h3><p>Maintain an array about <code>next</code> which is from the string <code>needle</code>. Its elements means which index needs to be jumped to when fail in comparison.</p><table><thead><tr><th align="center">needle</th><th align="center">a</th><th align="center">b</th><th align="center">c</th><th align="center">a</th><th align="center">b</th><th align="center">f</th></tr></thead><tbody><tr><td align="center">index</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td></tr><tr><td align="center">next</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">0</td></tr></tbody></table><p>Refer to <a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/solution/duo-tu-yu-jing-xiang-jie-kmp-suan-fa-by-w3c9c">https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/solution/duo-tu-yu-jing-xiang-jie-kmp-suan-fa-by-w3c9c</a>.</p><h4 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">strStr</span><span class="hljs-params">(string haystack, string needle)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; next = <span class="hljs-built_in">get_next</span>(needle);<br><br>        <span class="hljs-type">int</span> haystack_size = haystack.<span class="hljs-built_in">size</span>(), needle_size = needle.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; haystack_size; ++i) &#123;<br>            <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; haystack[i] != needle[j]) &#123;<br>                j = next[j - <span class="hljs-number">1</span>];<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (haystack[i] == needle[j]) &#123;<br>                ++j;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (j == needle_size) &#123;<br>                <span class="hljs-keyword">return</span> i - needle_size + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">get_next</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; needle)</span> </span>&#123;<br>        <span class="hljs-type">int</span> needle_size = needle.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">next</span><span class="hljs-params">(needle_size, <span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-comment">// next[0] = 0;</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> right = <span class="hljs-number">1</span>, left = <span class="hljs-number">0</span>; right &lt; needle_size; ++right) &#123;<br>            <span class="hljs-keyword">while</span> (left &gt; <span class="hljs-number">0</span> &amp;&amp; needle[left] != needle[right]) &#123;<br>                left = next[left - <span class="hljs-number">1</span>];<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (needle[left] == needle[right]) &#123;<br>                ++left;<br>            &#125;<br><br>            next[right] = left;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>sliding_window</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>sliding_window</tag>
      
      <tag>leetcode</tag>
      
      <tag>medium</tag>
      
      <tag>string</tag>
      
      <tag>kmp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Introduction to C++20 Coroutines - Part 5 stackful/stackless and Symmetric Transfer</title>
    <link href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-5-stackful-stackless-and-Symmetric-Transfer/"/>
    <url>/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-5-stackful-stackless-and-Symmetric-Transfer/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p><strong>This series is related to C++20 coroutine.</strong></p><p><a href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-1-Generator">part 1: Generator</a><br><a href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-2-co-await-co-return">part 2: co_await&#x2F;co_return</a><br><a href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-3-Some-tips-in-practice">part 3: Some tips about life cycle when using coroutines</a><br><a href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-4-Some-examples-about-co-await">part 4: Some examples about co_await</a><br><strong>part 5: stackful&#x2F;stackless and Symmetric Transfer</strong></p>          </div><h2 id="stackful-x2F-stackless"><a href="#stackful-x2F-stackless" class="headerlink" title="stackful&#x2F;stackless"></a>stackful&#x2F;stackless</h2><p>Coroutines can be divided into stackful coroutines (such as goroutine in Golang) and stackless coroutines (such as <code>async</code>&#x2F;<code>await</code> in JavaScript).</p><p>What the called stackful and stackless stands for is not whether needing a stack or not when coroutines run. As we all know, coroutines can’t run without a stack space. It means whether coroutines can be suspended in their any nested functions.</p><p>For details, please refer to this blog <a href="https://mthli.xyz/stackful-stackless">https://mthli.xyz/stackful-stackless</a>. I think it’s clear.</p><h2 id="Symmetric-Transfer"><a href="#Symmetric-Transfer" class="headerlink" title="Symmetric Transfer"></a>Symmetric Transfer</h2><h3 id="Crash-Case"><a href="#Crash-Case" class="headerlink" title="Crash Case"></a>Crash Case</h3><p>This case in from this blog <a href="https://lewissbaker.github.io/2020/05/11/understanding_symmetric_transfer">https://lewissbaker.github.io/2020/05/11/understanding_symmetric_transfer</a> that is written by the author of the library <a href="https://github.com/lewissbaker/cppcoro"><code>cppcoro</code></a>.</p><p>I modified the case a little to let it run in function <code>main</code>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;coroutine&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;exception&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utility&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">task</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">promise_type</span>;<br><br>    <span class="hljs-built_in">task</span>(task&amp;&amp; t) <span class="hljs-keyword">noexcept</span> : <span class="hljs-built_in">coro_</span>(std::<span class="hljs-built_in">exchange</span>(t.coro_, &#123;&#125;)) &#123;&#125;<br>    ~<span class="hljs-built_in">task</span>() &#123;<br>        <span class="hljs-keyword">if</span> (coro_) &#123;<br>            coro_.<span class="hljs-built_in">destroy</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">awaiter</span>;<br>    <span class="hljs-function">awaiter <span class="hljs-keyword">operator</span> <span class="hljs-title">co_await</span><span class="hljs-params">()</span> &amp;&amp; <span class="hljs-keyword">noexcept</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">resume</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (coro_ &amp;&amp; !coro_.<span class="hljs-built_in">done</span>()) &#123;<br>            coro_.<span class="hljs-built_in">resume</span>();<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">task</span><span class="hljs-params">(std::coroutine_handle&lt;promise_type&gt; h)</span> <span class="hljs-keyword">noexcept</span> : coro_(h) &#123;</span>&#125;<br><br>    std::coroutine_handle&lt;promise_type&gt; coro_;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">task</span>::promise_type &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">final_awaiter</span> &#123;<br>        <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">await_ready</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; &#125;<br><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">await_suspend</span><span class="hljs-params">(std::coroutine_handle&lt;promise_type&gt; h)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>            <span class="hljs-comment">// The coroutine is now suspended at the final-suspend point.</span><br>            <span class="hljs-comment">// Lookup its continuation in the promise and resume it.</span><br>            <span class="hljs-keyword">if</span> (h.<span class="hljs-built_in">promise</span>().continuation) &#123;<br>                h.<span class="hljs-built_in">promise</span>().continuation.<span class="hljs-built_in">resume</span>();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">await_resume</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123;&#125;<br>    &#125;;<br><br>    <span class="hljs-function">task <span class="hljs-title">get_return_object</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> task&#123;std::coroutine_handle&lt;promise_type&gt;::<span class="hljs-built_in">from_promise</span>(*<span class="hljs-keyword">this</span>)&#125;;<br>    &#125;<br>    <span class="hljs-function">std::suspend_always <span class="hljs-title">initial_suspend</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123; <span class="hljs-keyword">return</span> &#123;&#125;; &#125;<br>    <span class="hljs-function">final_awaiter <span class="hljs-title">final_suspend</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123; <span class="hljs-keyword">return</span> &#123;&#125;; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">return_void</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">unhandled_exception</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123; std::<span class="hljs-built_in">terminate</span>(); &#125;<br><br>    std::coroutine_handle&lt;&gt; continuation;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">task</span>::awaiter &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">await_ready</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">await_suspend</span><span class="hljs-params">(std::coroutine_handle&lt;&gt; continuation)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-comment">// Store the continuation in the task&#x27;s promise so that the final_suspend()</span><br>        <span class="hljs-comment">// knows to resume this coroutine when the task completes.</span><br>        coro_.<span class="hljs-built_in">promise</span>().continuation = continuation;<br><br>        <span class="hljs-comment">// Then we resume the task&#x27;s coroutine, which is currently suspended</span><br>        <span class="hljs-comment">// at the initial-suspend-point (ie. at the open curly brace).</span><br>        coro_.<span class="hljs-built_in">resume</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">await_resume</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">awaiter</span><span class="hljs-params">(std::coroutine_handle&lt;task::promise_type&gt; h)</span> <span class="hljs-keyword">noexcept</span> : coro_(h) &#123;</span>&#125;<br><br>    std::coroutine_handle&lt;task::promise_type&gt; coro_;<br>&#125;;<br><br><span class="hljs-function">task::awaiter task::<span class="hljs-keyword">operator</span> <span class="hljs-title">co_await</span><span class="hljs-params">()</span> &amp;&amp; <span class="hljs-keyword">noexcept</span> </span>&#123; <span class="hljs-keyword">return</span> task::awaiter&#123;coro_&#125;; &#125;<br><br><span class="hljs-function">task <span class="hljs-title">completes_synchronously</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">co_return</span>;<br>&#125;<br><br><span class="hljs-function">task <span class="hljs-title">loop_synchronously</span><span class="hljs-params">(<span class="hljs-type">int</span> count)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; count; ++i) &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">co_await</span> <span class="hljs-title">completes_synchronously</span><span class="hljs-params">()</span></span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    task t = <span class="hljs-built_in">loop_synchronously</span>(<span class="hljs-number">1000000</span>);<br>    t.<span class="hljs-built_in">resume</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>In my machine, it works with <code>loop_synchronously(100000)</code> while it can’t with <code>loop_synchronously(1000000)</code>. It will crash due to segmentation fault, and its call stack is very very deep when viewed in GDB. It’s because this kind of symmetric transfer is called by <code>h.promise().continuation.resume()</code> and <code>coro_.resume()</code> bidirectionally, and the call stack only becomes deeper and never releases. In this way, stack overflow will happen sooner or later as the size of loop is growing. The details of the call stack and the analysis of the crash can be found refer to the above mentioned blog.</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol><li><p>Change the <code>task::awaiter::await_suspend</code> method from this:</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">void</span> task::awaiter::<span class="hljs-built_in">await_suspend</span>(std::coroutine_handle&lt;&gt; continuation) <span class="hljs-keyword">noexcept</span> &#123;<br>    <span class="hljs-comment">// Store the continuation in the task&#x27;s promise so that the final_suspend()</span><br>    <span class="hljs-comment">// knows to resume this coroutine when the task completes.</span><br>    coro_.<span class="hljs-built_in">promise</span>().continuation = continuation;<br><br>    <span class="hljs-comment">// Then we resume the task&#x27;s coroutine, which is currently suspended</span><br>    <span class="hljs-comment">// at the initial-suspend-point (ie. at the open curly brace).</span><br>    coro_.<span class="hljs-built_in">resume</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p> to this:</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::coroutine_handle&lt;&gt; task::awaiter::<span class="hljs-built_in">await_suspend</span>(std::coroutine_handle&lt;&gt; continuation) <span class="hljs-keyword">noexcept</span> &#123;<br>    <span class="hljs-comment">// Store the continuation in the task&#x27;s promise so that the final_suspend()</span><br>    <span class="hljs-comment">// knows to resume this coroutine when the task completes.</span><br>    coro_.<span class="hljs-built_in">promise</span>().continuation = continuation;<br><br>    <span class="hljs-comment">// Then we tail-resume the task&#x27;s coroutine, which is currently suspended</span><br>    <span class="hljs-comment">// at the initial-suspend-point (ie. at the open curly brace), by returning</span><br>    <span class="hljs-comment">// its handle from await_suspend().</span><br>    <span class="hljs-keyword">return</span> coro_;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Update the <code>task::promise_type::final_awaiter::await_suspend</code> method from this:</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">void</span> task::promise_type::final_awaiter::<span class="hljs-built_in">await_suspend</span>(std::coroutine_handle&lt;promise_type&gt; h) <span class="hljs-keyword">noexcept</span> &#123;<br>    <span class="hljs-comment">// The coroutine is now suspended at the final-suspend point.</span><br>    <span class="hljs-comment">// Lookup its continuation in the promise and resume it.</span><br>    <span class="hljs-keyword">if</span> (h.<span class="hljs-built_in">promise</span>().continuation) &#123;<br>        h.<span class="hljs-built_in">promise</span>().continuation.<span class="hljs-built_in">resume</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> to this:</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::coroutine_handle&lt;&gt; task::promise_type::final_awaiter::<span class="hljs-built_in">await_suspend</span>(std::coroutine_handle&lt;promise_type&gt; h) <span class="hljs-keyword">noexcept</span> &#123;<br>    <span class="hljs-comment">// The coroutine is now suspended at the final-suspend point.</span><br>    <span class="hljs-comment">// Lookup its continuation in the promise and resume it symmetrically.</span><br>    <span class="hljs-keyword">return</span> (h.<span class="hljs-built_in">promise</span>().continuation) ? h.<span class="hljs-built_in">promise</span>().continuation : std::<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>In this way, stack overflow would never happen.</p>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>cpp</category>
      
      <category>stl</category>
      
      <category>coroutine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>stl</tag>
      
      <tag>cpp20</tag>
      
      <tag>coroutine</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Introduction to C++20 Coroutines - Part 4 Some examples about co_await</title>
    <link href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-4-Some-examples-about-co-await/"/>
    <url>/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-4-Some-examples-about-co-await/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p><strong>This series is related to C++20 coroutine.</strong></p><p><a href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-1-Generator">part 1: Generator</a><br><a href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-2-co-await-co-return">part 2: co_await&#x2F;co_return</a><br><a href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-3-Some-tips-in-practice">part 3: Some tips about life cycle when using coroutines</a><br><strong>part 4: Some examples about co_await</strong><br><a href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-5-stackful-stackless-and-Symmetric-Transfer">part 5: stackful&#x2F;stackless and Symmetric Transfer</a></p>          </div><h2 id="Coroutine-in-Python"><a href="#Coroutine-in-Python" class="headerlink" title="Coroutine in Python"></a>Coroutine in Python</h2><p>In Python, in addition to passing data out from the coroutine, the outside can also pass information in.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> Generator<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sequence</span>() -&gt; Generator[<span class="hljs-built_in">int</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>]:<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">yield</span> i<br>        i += <span class="hljs-number">1</span><br><br>g = sequence()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(g))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> Generator<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sequence</span>() -&gt; Generator[<span class="hljs-built_in">int</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>]:<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        inside_receive = <span class="hljs-keyword">yield</span> i<br>        i += <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;inside receive:&quot;</span>, inside_receive)<br><br><br>g = sequence()<br><span class="hljs-built_in">next</span>(g)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    send_str = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)+i)<br>    outside_receive = g.send(send_str)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;outside receive:&quot;</span>, outside_receive)<br></code></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs log">inside receive: a<br>outside receive: 1<br>inside receive: b<br>outside receive: 2<br>inside receive: c<br>outside receive: 3<br></code></pre></td></tr></table></figure><p>Powerful C++ certainly also can!</p><h2 id="Pass-data-bidirectionally-with-co-await"><a href="#Pass-data-bidirectionally-with-co-await" class="headerlink" title="Pass data bidirectionally with co_await"></a>Pass data bidirectionally with <code>co_await</code></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;coroutine&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;exception&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Generator</span> &#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">promise_type</span> &#123;<br>        <span class="hljs-function">Generator <span class="hljs-title">get_return_object</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Generator</span>(std::coroutine_handle&lt;promise_type&gt;::<span class="hljs-built_in">from_promise</span>(*<span class="hljs-keyword">this</span>));<br>        &#125;<br>        <span class="hljs-function">std::suspend_never <span class="hljs-title">initial_suspend</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> &#123;&#125;; &#125;<br>        <span class="hljs-function">std::suspend_always <span class="hljs-title">final_suspend</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123; <span class="hljs-keyword">return</span> &#123;&#125;; &#125;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">return_void</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">unhandled_exception</span><span class="hljs-params">()</span> </span>&#123; std::<span class="hljs-built_in">terminate</span>(); &#125;<br><br>        <span class="hljs-type">int</span> in_to_out;<br>        <span class="hljs-type">char</span> out_to_in;<br>    &#125;;<br><br>    <span class="hljs-built_in">Generator</span>(std::coroutine_handle&lt;promise_type&gt; handle) : <span class="hljs-built_in">m_coro_handle</span>(handle) &#123;&#125;<br>    ~<span class="hljs-built_in">Generator</span>() &#123;<br>        <span class="hljs-keyword">if</span> (m_coro_handle) &#123;<br>            m_coro_handle.<span class="hljs-built_in">destroy</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">done</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> m_coro_handle.<span class="hljs-built_in">done</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">char</span> out_to_in)</span> </span>&#123;<br>        <span class="hljs-type">int</span> result = m_coro_handle.<span class="hljs-built_in">promise</span>().in_to_out;<br><br>        m_coro_handle.<span class="hljs-built_in">promise</span>().out_to_in = out_to_in;<br>        m_coro_handle.<span class="hljs-built_in">resume</span>();<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    std::coroutine_handle&lt;promise_type&gt; m_coro_handle;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Awaiter</span> &#123;<br>    <span class="hljs-built_in">Awaiter</span>(<span class="hljs-type">int</span> val) : <span class="hljs-built_in">m_value</span>(val) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">await_ready</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">await_suspend</span><span class="hljs-params">(std::coroutine_handle&lt;Generator::promise_type&gt; handle)</span> </span>&#123;<br>        m_handle = handle;<br>        m_handle.<span class="hljs-built_in">promise</span>().in_to_out = m_value;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">char</span> <span class="hljs-title">await_resume</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> m_handle.<span class="hljs-built_in">promise</span>().out_to_in; &#125;<br><br>    std::coroutine_handle&lt;Generator::promise_type&gt; m_handle;<br>    <span class="hljs-type">int</span> m_value;<br>&#125;;<br><br><span class="hljs-function">Generator <span class="hljs-title">sequence</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i) &#123;<br>        <span class="hljs-type">char</span> get_from_outside = <span class="hljs-keyword">co_await</span> Awaiter&#123;i&#125;;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;get_from_outside: &quot;</span> &lt;&lt; get_from_outside &lt;&lt; std::endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Generator g = <span class="hljs-built_in">sequence</span>();<br>    <span class="hljs-type">char</span> send = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">while</span> (!g.<span class="hljs-built_in">done</span>()) &#123;<br>        <span class="hljs-type">int</span> receive = <span class="hljs-built_in">g</span>(send++);<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;get_from_inside: &quot;</span> &lt;&lt; receive &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs log">get_from_outside: a<br>get_from_inside: 0<br>get_from_outside: b<br>get_from_inside: 1<br>get_from_outside: c<br>get_from_inside: 2<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>cpp</category>
      
      <category>stl</category>
      
      <category>coroutine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>stl</tag>
      
      <tag>cpp20</tag>
      
      <tag>coroutine</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Traverse Binary Tree</title>
    <link href="/Algorithm/Design/Traverse-Binary-Tree/"/>
    <url>/Algorithm/Design/Traverse-Binary-Tree/</url>
    
    <content type="html"><![CDATA[<p>Binary tree traversal is a typical problem to implement. I suppose it’s a required course for every programmer to master. I mean, not only recursive traversals, but also non-recursive traversals in preorder, inorder and postorder.</p><p>The question number on LeetCode are:</p><ul><li><code>LeetCode 144 - Binary Tree Preorder Traversal</code></li><li><code>LeetCode 94 - Binary Tree Inorder Traversal</code></li><li><code>LeetCode 145 - Binary Tree Postorder Traversal</code></li></ul><h2 id="Declaration-of-Binary-Tree"><a href="#Declaration-of-Binary-Tree" class="headerlink" title="Declaration of Binary Tree"></a>Declaration of Binary Tree</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TreeNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    TreeNode* left;<br>    TreeNode* right;<br><br>    <span class="hljs-built_in">TreeNode</span>() : <span class="hljs-built_in">val</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">left</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">right</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">TreeNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">left</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">right</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">TreeNode</span>(<span class="hljs-type">int</span> x, TreeNode* left, TreeNode* right) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">left</span>(left), <span class="hljs-built_in">right</span>(right) &#123;&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, left=<span class="hljs-literal">None</span>, right=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.left = left<br>        self.right = right<br></code></pre></td></tr></table></figure><h2 id="Recursive"><a href="#Recursive" class="headerlink" title="Recursive"></a>Recursive</h2><h3 id="Preorder-Traversal-in-Recursive"><a href="#Preorder-Traversal-in-Recursive" class="headerlink" title="Preorder Traversal in Recursive"></a>Preorder Traversal in Recursive</h3><h4 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span> &#123;&#125;;<br>        &#125;<br><br>        vector&lt;<span class="hljs-type">int</span>&gt; left_result = <span class="hljs-built_in">preorderTraversal</span>(root-&gt;left), right_result = <span class="hljs-built_in">preorderTraversal</span>(root-&gt;right);<br><br>        vector&lt;<span class="hljs-type">int</span>&gt; result;<br>        result.<span class="hljs-built_in">reserve</span>(<span class="hljs-number">1</span> + left_result.<span class="hljs-built_in">size</span>() + right_result.<span class="hljs-built_in">size</span>());<br><br>        result.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>        <span class="hljs-built_in">copy</span>(left_result.<span class="hljs-built_in">begin</span>(), left_result.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">back_inserter</span>(result));<br>        <span class="hljs-built_in">copy</span>(right_result.<span class="hljs-built_in">begin</span>(), right_result.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">back_inserter</span>(result));<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">preorderTraversal</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">return</span> [root.val] + self.preorderTraversal(root.left) + self.preorderTraversal(root.right) <span class="hljs-keyword">if</span> root <span class="hljs-keyword">else</span> []<br></code></pre></td></tr></table></figure><h3 id="Inorder-Traversal-in-Recursive"><a href="#Inorder-Traversal-in-Recursive" class="headerlink" title="Inorder Traversal in Recursive"></a>Inorder Traversal in Recursive</h3><h4 id="C-2"><a href="#C-2" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span> &#123;&#125;;<br>        &#125;<br><br>        vector&lt;<span class="hljs-type">int</span>&gt; left_result = <span class="hljs-built_in">inorderTraversal</span>(root-&gt;left), right_result = <span class="hljs-built_in">inorderTraversal</span>(root-&gt;right);<br><br>        vector&lt;<span class="hljs-type">int</span>&gt; result;<br>        result.<span class="hljs-built_in">reserve</span>(left_result.<span class="hljs-built_in">size</span>() + <span class="hljs-number">1</span> + right_result.<span class="hljs-built_in">size</span>());<br><br>        <span class="hljs-built_in">copy</span>(left_result.<span class="hljs-built_in">begin</span>(), left_result.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">back_inserter</span>(result));<br>        result.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>        <span class="hljs-built_in">copy</span>(right_result.<span class="hljs-built_in">begin</span>(), right_result.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">back_inserter</span>(result));<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="Python-2"><a href="#Python-2" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inorderTraversal</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">return</span> self.inorderTraversal(root.left) + [root.val] + self.inorderTraversal(root.right) <span class="hljs-keyword">if</span> root <span class="hljs-keyword">else</span> []<br></code></pre></td></tr></table></figure><h3 id="Postorder-Traversal-in-Recursive"><a href="#Postorder-Traversal-in-Recursive" class="headerlink" title="Postorder Traversal in Recursive"></a>Postorder Traversal in Recursive</h3><h4 id="C-3"><a href="#C-3" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">postorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span> &#123;&#125;;<br>        &#125;<br><br>        vector&lt;<span class="hljs-type">int</span>&gt; left_result = <span class="hljs-built_in">postorderTraversal</span>(root-&gt;left), right_result = <span class="hljs-built_in">postorderTraversal</span>(root-&gt;right);<br><br>        vector&lt;<span class="hljs-type">int</span>&gt; result;<br>        result.<span class="hljs-built_in">reserve</span>(left_result.<span class="hljs-built_in">size</span>() + right_result.<span class="hljs-built_in">size</span>() + <span class="hljs-number">1</span>);<br><br>        <span class="hljs-built_in">copy</span>(left_result.<span class="hljs-built_in">begin</span>(), left_result.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">back_inserter</span>(result));<br>        <span class="hljs-built_in">copy</span>(right_result.<span class="hljs-built_in">begin</span>(), right_result.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">back_inserter</span>(result));<br>        result.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="Python-3"><a href="#Python-3" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">postorderTraversal</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">return</span> self.postorderTraversal(root.left) + self.postorderTraversal(root.right) + [root.val] <span class="hljs-keyword">if</span> root <span class="hljs-keyword">else</span> []<br></code></pre></td></tr></table></figure><h2 id="Non-Recursive"><a href="#Non-Recursive" class="headerlink" title="Non-Recursive"></a>Non-Recursive</h2><h3 id="Preorder-Traversal-in-Non-Recursive"><a href="#Preorder-Traversal-in-Non-Recursive" class="headerlink" title="Preorder Traversal in Non-Recursive"></a>Preorder Traversal in Non-Recursive</h3><h4 id="C-4"><a href="#C-4" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        stack&lt;TreeNode*&gt; node_stack;<br>        vector&lt;<span class="hljs-type">int</span>&gt; result;<br><br>        TreeNode* cur = root;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">nullptr</span> || !node_stack.<span class="hljs-built_in">empty</span>()) &#123;<br>            <span class="hljs-keyword">if</span> (cur == <span class="hljs-literal">nullptr</span>) &#123;<br>                cur = node_stack.<span class="hljs-built_in">top</span>();<br>                node_stack.<span class="hljs-built_in">pop</span>();<br>            &#125;<br><br>            result.<span class="hljs-built_in">push_back</span>(cur-&gt;val);<br>            <span class="hljs-keyword">if</span> (cur-&gt;right != <span class="hljs-literal">nullptr</span>) &#123;<br>                node_stack.<span class="hljs-built_in">push</span>(cur-&gt;right);<br>            &#125;<br><br>            cur = cur-&gt;left;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Inorder-Traversal-in-Non-Recursive"><a href="#Inorder-Traversal-in-Non-Recursive" class="headerlink" title="Inorder Traversal in Non-Recursive"></a>Inorder Traversal in Non-Recursive</h3><h4 id="C-5"><a href="#C-5" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        stack&lt;TreeNode*&gt; node_stack;<br>        vector&lt;<span class="hljs-type">int</span>&gt; result;<br><br>        TreeNode* cur = root;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">nullptr</span> || !node_stack.<span class="hljs-built_in">empty</span>()) &#123;<br>            <span class="hljs-keyword">if</span> (cur == <span class="hljs-literal">nullptr</span>) &#123;<br>                cur = node_stack.<span class="hljs-built_in">top</span>();<br>                node_stack.<span class="hljs-built_in">pop</span>();<br><br>                result.<span class="hljs-built_in">push_back</span>(cur-&gt;val);<br>                cur = cur-&gt;right;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                node_stack.<span class="hljs-built_in">push</span>(cur);<br>                cur = cur-&gt;left;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Postorder-Traversal-in-Non-Recursive"><a href="#Postorder-Traversal-in-Non-Recursive" class="headerlink" title="Postorder Traversal in Non-Recursive"></a>Postorder Traversal in Non-Recursive</h3><h4 id="C-6"><a href="#C-6" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">postorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        stack&lt;TreeNode*&gt; node_stack;<br>        vector&lt;<span class="hljs-type">int</span>&gt; result;<br><br>        TreeNode *cur = root, *right_visited = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">nullptr</span> || !node_stack.<span class="hljs-built_in">empty</span>()) &#123;<br>            <span class="hljs-keyword">if</span> (cur == <span class="hljs-literal">nullptr</span>) &#123;<br>                cur = node_stack.<span class="hljs-built_in">top</span>();<br><br>                <span class="hljs-keyword">if</span> (cur-&gt;right == <span class="hljs-literal">nullptr</span> || cur-&gt;right == right_visited) &#123;<br>                    result.<span class="hljs-built_in">push_back</span>(cur-&gt;val);<br>                    node_stack.<span class="hljs-built_in">pop</span>();<br>                    right_visited = cur;<br>                    cur = <span class="hljs-literal">nullptr</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    cur = cur-&gt;right;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                node_stack.<span class="hljs-built_in">push</span>(cur);<br>                cur = cur-&gt;left;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>We can summarize the template for binary tree traversal in non-recursive as below:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">postorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>    stack&lt;TreeNode*&gt; node_stack;<br>    vector&lt;<span class="hljs-type">int</span>&gt; result;<br><br>    TreeNode* cur = root;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">nullptr</span> || !node_stack.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-keyword">if</span> (cur == <span class="hljs-literal">nullptr</span>) &#123;<br>            ...<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ...<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>design</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>design</tag>
      
      <tag>stack</tag>
      
      <tag>binary_tree</tag>
      
      <tag>dfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Calculator for Four Arithmetic with Brackets</title>
    <link href="/Algorithm/Design/Calculator-for-Four-Arithmetic-with-Brackets/"/>
    <url>/Algorithm/Design/Calculator-for-Four-Arithmetic-with-Brackets/</url>
    
    <content type="html"><![CDATA[<p>It’s a typical problem to implement a four arithmetic calculator with brackets.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cassert&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string_view&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calculate</span><span class="hljs-params">(std::string_view s)</span> </span>&#123;<br>        <span class="hljs-built_in">clear</span>();<br><br>        value_stack.<span class="hljs-built_in">push</span>(<span class="hljs-number">0</span>);  <span class="hljs-comment">// for some occasions that starts with a negative digit</span><br><br>        std::<span class="hljs-type">size_t</span> index = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (index &lt; s.<span class="hljs-built_in">size</span>()) &#123;<br>            <span class="hljs-comment">// process digit with high priority</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;0&#x27;</span> &lt;= s[index] &amp;&amp; s[index] &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>                <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">while</span> (index &lt; s.<span class="hljs-built_in">size</span>() &amp;&amp; (<span class="hljs-string">&#x27;0&#x27;</span> &lt;= s[index] &amp;&amp; s[index] &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)) &#123;<br>                    num = num * <span class="hljs-number">10</span> + (s[index] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>                    ++index;<br>                &#125;<br><br>                value_stack.<span class="hljs-built_in">push</span>(num);<br>            &#125;<br><br>            <span class="hljs-keyword">switch</span> (s[index]) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>: &#123;<br>                    <span class="hljs-built_in">process_before_addition_or_subtraction</span>();<br>                    sign_stack.<span class="hljs-built_in">push</span>(s[index]);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>: &#123;<br>                    <span class="hljs-built_in">process_before_multiplication_or_division</span>();<br>                    sign_stack.<span class="hljs-built_in">push</span>(s[index]);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;(&#x27;</span>: &#123;<br>                    sign_stack.<span class="hljs-built_in">push</span>(s[index]);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;)&#x27;</span>: &#123;<br>                    <span class="hljs-built_in">process_before_addition_or_subtraction</span>();<br>                    sign_stack.<span class="hljs-built_in">pop</span>();<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">default</span>: &#123;  <span class="hljs-comment">// just skip if it&#x27;s space</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br><br>            ++index;<br>        &#125;<br><br>        <span class="hljs-built_in">process_before_addition_or_subtraction</span>();<br><br>        <span class="hljs-keyword">return</span> value_stack.<span class="hljs-built_in">top</span>();<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">process_before_addition_or_subtraction</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (!sign_stack.<span class="hljs-built_in">empty</span>() &amp;&amp; sign_stack.<span class="hljs-built_in">top</span>() != <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>            <span class="hljs-built_in">handle</span>();<br>            sign_stack.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">process_before_multiplication_or_division</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (!sign_stack.<span class="hljs-built_in">empty</span>() &amp;&amp; (sign_stack.<span class="hljs-built_in">top</span>() == <span class="hljs-string">&#x27;*&#x27;</span> || sign_stack.<span class="hljs-built_in">top</span>() == <span class="hljs-string">&#x27;/&#x27;</span>)) &#123;<br>            <span class="hljs-built_in">handle</span>();<br>            sign_stack.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Do a calculation once</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-built_in">assert</span>(value_stack.<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">2</span>);<br><br>        <span class="hljs-type">int</span> value2 = value_stack.<span class="hljs-built_in">top</span>();<br>        value_stack.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-type">int</span> value1 = value_stack.<span class="hljs-built_in">top</span>();<br>        value_stack.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">switch</span> (sign_stack.<span class="hljs-built_in">top</span>()) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>: &#123;<br>                value_stack.<span class="hljs-built_in">push</span>(value1 + value2);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>: &#123;<br>                value_stack.<span class="hljs-built_in">push</span>(value1 - value2);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>: &#123;<br>                value_stack.<span class="hljs-built_in">push</span>(value1 * value2);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>: &#123;<br>                <span class="hljs-built_in">assert</span>(value2 != <span class="hljs-number">0</span>);<br><br>                value_stack.<span class="hljs-built_in">push</span>(value1 / value2);  <span class="hljs-comment">// Note that it is NOT a strict division!</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">default</span>: &#123;  <span class="hljs-comment">// impossible in fact</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Note:</span><br>        <span class="hljs-comment">// `sign_stack.pop()` is called outside `handle()` so that the iteration of loop looks more understandable.</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// clear stack with trick since stack does&#x27;t provide `clear()`</span><br>        std::<span class="hljs-built_in">stack</span>&lt;<span class="hljs-type">int</span>&gt;().<span class="hljs-built_in">swap</span>(value_stack);<br>        std::<span class="hljs-built_in">stack</span>&lt;<span class="hljs-type">char</span>&gt;().<span class="hljs-built_in">swap</span>(sign_stack);<br>    &#125;<br><br>    std::stack&lt;<span class="hljs-type">int</span>&gt; value_stack;<br>    std::stack&lt;<span class="hljs-type">char</span>&gt; sign_stack;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ASSERT(expression, expected_result) assert(solution.calculate(expression) == expected_result)</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Solution solution;<br><br>    <span class="hljs-comment">// test cases</span><br>    <span class="hljs-built_in">ASSERT</span>(<span class="hljs-string">&quot; 1 + 2 &quot;</span>, <span class="hljs-number">3</span>);      <span class="hljs-comment">// spaces</span><br>    <span class="hljs-built_in">ASSERT</span>(<span class="hljs-string">&quot;1+2&quot;</span>, <span class="hljs-number">3</span>);          <span class="hljs-comment">// addition</span><br>    <span class="hljs-built_in">ASSERT</span>(<span class="hljs-string">&quot;1-2&quot;</span>, <span class="hljs-number">-1</span>);         <span class="hljs-comment">// subtraction</span><br>    <span class="hljs-built_in">ASSERT</span>(<span class="hljs-string">&quot;2*3&quot;</span>, <span class="hljs-number">6</span>);          <span class="hljs-comment">// multiplication</span><br>    <span class="hljs-built_in">ASSERT</span>(<span class="hljs-string">&quot;6/2&quot;</span>, <span class="hljs-number">3</span>);          <span class="hljs-comment">// division</span><br>    <span class="hljs-built_in">ASSERT</span>(<span class="hljs-string">&quot;1+2-3*4/5&quot;</span>, <span class="hljs-number">1</span>);    <span class="hljs-comment">// mixed expression</span><br>    <span class="hljs-built_in">ASSERT</span>(<span class="hljs-string">&quot;(((1)))&quot;</span>, <span class="hljs-number">1</span>);      <span class="hljs-comment">// brackets</span><br>    <span class="hljs-built_in">ASSERT</span>(<span class="hljs-string">&quot;1+2-3*(4/5)&quot;</span>, <span class="hljs-number">3</span>);  <span class="hljs-comment">// mixed expression with brackets</span><br>    <span class="hljs-built_in">ASSERT</span>(<span class="hljs-string">&quot;-1&quot;</span>, <span class="hljs-number">-1</span>);          <span class="hljs-comment">// start with a negative digit</span><br><br>    <span class="hljs-comment">// invalid test cases</span><br>    <span class="hljs-comment">// ASSERT(&quot;1/0&quot;, -1);  // terminate as expected</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Only support division with result as an integer,</span><br>    <span class="hljs-comment">// hence multiplication and division are not actually perfectly reciprocal.</span><br>    <span class="hljs-comment">// ASSERT(&quot;1/2*2&quot;, 1);</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://blog.csdn.net/qq_28972011/article/details/119499857">带括号的四则运算计算器</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>design</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>design</tag>
      
      <tag>calculator</tag>
      
      <tag>stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 718 - Maximum Length of Repeated Subarray</title>
    <link href="/Algorithm/LeetCode/DynamicProgramming/LeetCode-718-Maximum-Length-of-Repeated-Subarray/"/>
    <url>/Algorithm/LeetCode/DynamicProgramming/LeetCode-718-Maximum-Length-of-Repeated-Subarray/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-warning">medium</span></p>          </div><div class="note note-warning">            <p>Similar problem: <a href="/Algorithm/LeetCode/LeetCode-1143-Longest-Common-Subsequence">LeetCode 1143 - Longest Common Subsequence</a></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Maximum-Length-of-Repeated-Subarray"><a href="#English-Maximum-Length-of-Repeated-Subarray" class="headerlink" title="English (Maximum Length of Repeated Subarray)"></a>English (Maximum Length of Repeated Subarray)</h3><p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, return <em>the maximum length of a subarray that appears in <strong>both</strong> arrays</em>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]<br>Output: 3<br>Explanation: The repeated subarray with maximum length is [3,2,1].<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]<br>Output: 5<br>Explanation: The repeated subarray with maximum length is [0,0,0,0,0].<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li><li><code>0 &lt;= nums1[i], nums2[i] &lt;= 100</code></li></ul><h3 id="Chinese-最长重复子数组"><a href="#Chinese-最长重复子数组" class="headerlink" title="Chinese (最长重复子数组)"></a>Chinese (最长重复子数组)</h3><p>给两个整数数组 <code>nums1</code> 和 <code>nums2</code> ，<em>返回 两个数组中 <strong>公共的</strong> 、长度最长的子数组的长度</em> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]<br>输出：3<br>解释：长度最长的公共子数组是 [3,2,1] 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]<br>输出：5<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li><li><code>0 &lt;= nums1[i], nums2[i] &lt;= 100</code></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>It’s a typical problem about dynamic programming.</p><ul><li><code>dp[0][0]</code> means the maximun length of repeated subarray between two empty strings. Obviously, it’s <code>0</code>.</li><li><code>dp[i+1][j+1]</code> means the maximun length of repeated subarray between two strings, one of them ends with <code>nums1[i]</code> while the other ends with <code>nums2[j]</code>.</li></ul><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findLength</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2)</span> </span>&#123;<br>        <span class="hljs-type">int</span> nums1_size = nums1.<span class="hljs-built_in">size</span>(), nums2_size = nums2.<span class="hljs-built_in">size</span>();<br><br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(nums1_size + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(nums2_size + <span class="hljs-number">1</span>));<br>        <span class="hljs-type">int</span> max_repeated_subarray_size = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums1_size; ++i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; nums2_size; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (nums1[i] == nums2[j]) &#123;<br>                    dp[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] = dp[i][j] + <span class="hljs-number">1</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    dp[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>                &#125;<br><br>                max_repeated_subarray_size = <span class="hljs-built_in">max</span>(max_repeated_subarray_size, dp[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> max_repeated_subarray_size;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findLength</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        nums1_len, nums2_len = <span class="hljs-built_in">len</span>(nums1), <span class="hljs-built_in">len</span>(nums2)<br><br>        dp = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nums2_len+<span class="hljs-number">1</span>)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nums1_len+<span class="hljs-number">1</span>)]<br>        max_repeated_subarray_len = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nums1_len):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nums2_len):<br>                <span class="hljs-keyword">if</span> nums1[i] == nums2[j]:<br>                    dp[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>] = dp[i][j] + <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    dp[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>] = <span class="hljs-number">0</span><br><br>                max_repeated_subarray_len = <span class="hljs-built_in">max</span>(max_repeated_subarray_len, dp[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>])<br><br>        <span class="hljs-keyword">return</span> max_repeated_subarray_len<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>dynamic_programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>medium</tag>
      
      <tag>dynamic_programming</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Visual Studio freezing (crashing) while loading solution</title>
    <link href="/Configuration/VisualStudio/Visual-Studio-freezing-crashing-while-loading-solution/"/>
    <url>/Configuration/VisualStudio/Visual-Studio-freezing-crashing-while-loading-solution/</url>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>When opening a solution, Visual Studio is not responding after displaying “reading the file…”.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ol><li>Close the Visual Studio process.</li><li>Remove the <code>.vs</code> folder in the folder where the solution file in.</li><li>Try to reopen the solution file.</li></ol><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://stackoverflow.com/questions/39703475/visual-studio-freezing-crashing-while-loading-solution">Stackoverflow - Visual Studio freezing (crashing) while loading solution</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>configuration</category>
      
      <category>visual_studio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>configuration</tag>
      
      <tag>visual_studio</tag>
      
      <tag>environment</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Introduction to C++20 Coroutines - Part 3 Some tips about life cycle when using coroutines</title>
    <link href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-3-Some-tips-in-practice/"/>
    <url>/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-3-Some-tips-in-practice/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p><strong>This series is related to C++20 coroutine.</strong></p><p><a href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-1-Generator">part 1: Generator</a><br><a href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-2-co-await-co-return">part 2: co_await&#x2F;co_return</a><br><strong>part 3: Some tips about life cycle when using coroutines</strong><br><a href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-4-Some-examples-about-co-await">part 4: Some examples about co_await</a><br><a href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-5-stackful-stackless-and-Symmetric-Transfer">part 5: stackful&#x2F;stackless and Symmetric Transfer</a></p>          </div><p>In the <a href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-1-Generator">part 1</a> and the <a href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-2-co-await-co-return">part 2</a> of the coroutine’s series, we have learned the basic usage of coroutines. In this post, I would like to provide some tips about life cycle to help avoid to get stuck in some traps.</p><h2 id="The-Life-Cycle-of-The-Return-Type"><a href="#The-Life-Cycle-of-The-Return-Type" class="headerlink" title="The Life Cycle of The Return Type"></a>The Life Cycle of The Return Type</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;coroutine&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;exception&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Generator</span> &#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">promise_type</span> &#123;<br>        <span class="hljs-function">Generator <span class="hljs-title">get_return_object</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> &#123;std::coroutine_handle&lt;promise_type&gt;::<span class="hljs-built_in">from_promise</span>(*<span class="hljs-keyword">this</span>)&#125;; &#125;<br>        <span class="hljs-function">std::suspend_never <span class="hljs-title">initial_suspend</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> &#123;&#125;; &#125;<br>        <span class="hljs-function">std::suspend_always <span class="hljs-title">final_suspend</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123; <span class="hljs-keyword">return</span> &#123;&#125;; &#125;<br>        <span class="hljs-function">std::suspend_always <span class="hljs-title">yield_value</span><span class="hljs-params">(<span class="hljs-type">char</span> ch)</span> </span>&#123;<br>            value = ch;<br>            <span class="hljs-keyword">return</span> &#123;&#125;;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">return_void</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">unhandled_exception</span><span class="hljs-params">()</span> </span>&#123; std::<span class="hljs-built_in">terminate</span>(); &#125;<br><br>        <span class="hljs-type">char</span> value;<br>    &#125;;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">done</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> m_coro_handle.<span class="hljs-built_in">done</span>(); &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">char</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-type">char</span> res = m_coro_handle.<span class="hljs-built_in">promise</span>().value;<br>        m_coro_handle.<span class="hljs-built_in">resume</span>();<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    ~<span class="hljs-built_in">Generator</span>() &#123;<br>        <span class="hljs-keyword">if</span> (m_coro_handle) &#123;<br>            m_coro_handle.<span class="hljs-built_in">destroy</span>();<br>        &#125;<br>    &#125;<br><br>    std::coroutine_handle&lt;promise_type&gt; m_coro_handle;<br>&#125;;<br><br><span class="hljs-function">Generator <span class="hljs-title">tokens</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; str)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> ch : str) &#123;<br>        <span class="hljs-keyword">co_yield</span> ch;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::string str&#123;<span class="hljs-string">&quot;Hello World&quot;</span>&#125;;<br>    Generator g = <span class="hljs-built_in">tokens</span>(str);<br>    <span class="hljs-keyword">while</span> (!g.<span class="hljs-built_in">done</span>()) &#123;<br>        std::cout &lt;&lt; <span class="hljs-built_in">g</span>() &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>In the above example, the program can run happily. However, there are some potential risks.</p><h3 id="A-Crash-Happens"><a href="#A-Crash-Happens" class="headerlink" title="A Crash Happens"></a>A Crash Happens</h3><p>An issue is reproduced easily with little change as below:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// ...</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Generator g;<br>    std::string str&#123;<span class="hljs-string">&quot;Hello World&quot;</span>&#125;;<br>    g = <span class="hljs-built_in">tokens</span>(str);<br>    <span class="hljs-keyword">while</span> (!g.<span class="hljs-built_in">done</span>()) &#123;<br>        std::cout &lt;&lt; <span class="hljs-built_in">g</span>() &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>It would <strong>crash</strong>! We would see <code>Bus error</code> if compiling it with <code>gcc</code>. Why?</p><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>Let’s run it with gdb to observe the stack when it crashes.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gdb">#0  0x0000000aaaaaaac4 in ?? ()<br>#1  0x0000aaaaaaaa0df8 in std::__n4861::coroutine_handle&lt;Generator::promise_type&gt;::resume (this=&lt;synthetic pointer&gt;) at /usr/include/c++/11/coroutine:231<br>#2  Generator::operator() (this=&lt;synthetic pointer&gt;) at /workspaces/CoroutineTutorial/src/life_cycle.cc:36<br>#3  main () at /workspaces/CoroutineTutorial/src/life_cycle.cc:90<br></code></pre></td></tr></table></figure><p>We could find that the closest stack about the crash located when the coroutine was resumed. In this way, we have reason to suspect that the coroutine had been destroyed at that time.</p><p>Anyway, it’s definitely related to the normal construction of the <code>Generator g</code> or <code>Generator</code>‘s assignment.</p><p>The program will run without crash if we keep <code>Generator g;</code> but comment out other code. Obviously, the issue source is from the latter of those two conjectures.</p><p><strong>Note that</strong> we didn’t implement any move constructor and any move assignment in the above code. Therefore, at this statement <code>g = tokens(str);</code>, <code>g</code> was copied from a temporary object and the original object was deleted. At the same time, the coroutine was also destroyed! The crash would certainly happen since the coroutine never existed anymore.</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Now, the reason is clear. Based on that, we can fix the crash.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Generator</span> &#123;<br>    <span class="hljs-built_in">Generator</span>() &#123;&#125;<br>    <span class="hljs-built_in">Generator</span>(std::coroutine_handle&lt;promise_type&gt; handle) : <span class="hljs-built_in">m_coro_handle</span>(handle) &#123;&#125;<br>    <span class="hljs-built_in">Generator</span>(Generator&amp;&amp; other) &#123;<br>        m_coro_handle = other.m_coro_handle;<br>        other.m_coro_handle = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>    Generator&amp; <span class="hljs-keyword">operator</span>=(Generator&amp;&amp; other) &#123;<br>        m_coro_handle = other.m_coro_handle;<br>        other.m_coro_handle = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-comment">// Others...</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="The-Life-Cycle-of-The-parameters"><a href="#The-Life-Cycle-of-The-parameters" class="headerlink" title="The Life Cycle of The parameters"></a>The Life Cycle of The parameters</h2><p>Now let’s look at another case with a very simple form:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// ...</span><br><span class="hljs-function">Generator <span class="hljs-title">tokens</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; str)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> ch : str) &#123;<br>        <span class="hljs-keyword">co_yield</span> ch;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::string str&#123;<span class="hljs-string">&quot;Hello World&quot;</span>&#125;;<br>    Generator g = <span class="hljs-built_in">tokens</span>(str);<br>    <span class="hljs-keyword">while</span> (!g.<span class="hljs-built_in">done</span>()) &#123;<br>        std::cout &lt;&lt; <span class="hljs-built_in">g</span>() &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>It looks pretty fine, and we may have no solution to optimize it anymore.</p><h3 id="Wild-Resources"><a href="#Wild-Resources" class="headerlink" title="Wild Resources"></a>Wild Resources</h3><p>If we just change the form of parameters like this? The difference is the parameters of <code>tokens</code>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// ...</span><br><span class="hljs-function">Generator <span class="hljs-title">tokens</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; str)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> ch : str) &#123;<br>        <span class="hljs-keyword">co_yield</span> ch;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Generator g = <span class="hljs-built_in">tokens</span>(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    <span class="hljs-keyword">while</span> (!g.<span class="hljs-built_in">done</span>()) &#123;<br>        std::cout &lt;&lt; <span class="hljs-built_in">g</span>() &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Actually, there is a risk that is not easy to spot - the <code>std::string</code> was cosntructed from the raw string when <code>tokens(&quot;Hello World&quot;)</code> was called but it was deleted as soon as the execution left the scope of <code>tokens(...)</code>. It means after that it associated with a wild resource, and the wild resources we accessed was never valid!</p><h3 id="Customize-to-Make-it-More-Clearly"><a href="#Customize-to-Make-it-More-Clearly" class="headerlink" title="Customize to Make it More Clearly"></a>Customize to Make it More Clearly</h3><p>We can customize the parameters to reflect the life cycle more clearly.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MyString</span> &#123;<br>    <span class="hljs-built_in">MyString</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* str) : <span class="hljs-built_in">m_str</span>(str) &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;MyString&quot;</span> &lt;&lt; std::endl; &#125;<br>    ~<span class="hljs-built_in">MyString</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;~MyString&quot;</span> &lt;&lt; std::endl; &#125;<br><br>    std::string m_str;<br>&#125;;<br><br><span class="hljs-function">Generator <span class="hljs-title">tokens</span><span class="hljs-params">(<span class="hljs-type">const</span> MyString&amp; my_str)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> ch : my_str.m_str) &#123;<br>        <span class="hljs-keyword">co_yield</span> ch;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Generator g = <span class="hljs-built_in">tokens</span>(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    <span class="hljs-keyword">while</span> (!g.<span class="hljs-built_in">done</span>()) &#123;<br>        std::cout &lt;&lt; <span class="hljs-built_in">g</span>() &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs log">MyString<br>~MyString<br>H<br>e<br>l<br>l<br>o<br> <br>W<br>o<br>r<br>l<br>d<br></code></pre></td></tr></table></figure><p>My hypothesis gets verified!</p><h3 id="Available-Solutions"><a href="#Available-Solutions" class="headerlink" title="Available Solutions"></a>Available Solutions</h3><p>Therefore, we have 2 possible ways to solve this issue:</p><ul><li>Make sure the life cycle of any parameter covers the coroutine’s.</li><li>Pass value instead of passing short-lived reference or pointer to make resources always valid, even though there is some extra overhead.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MyString</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">MyString</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* str) : <span class="hljs-built_in">m_str</span>(str) &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;MyString&quot;</span> &lt;&lt; std::endl; &#125;<br>    <span class="hljs-built_in">MyString</span>(MyString&amp;&amp; other) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;MyString move&quot;</span> &lt;&lt; std::endl;<br>        m_str = std::<span class="hljs-built_in">move</span>(other.m_str);<br>    &#125;<br>    ~<span class="hljs-built_in">MyString</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;~MyString&quot;</span> &lt;&lt; std::endl; &#125;<br><br>    std::string m_str;<br>&#125;;<br><br><span class="hljs-function">Generator <span class="hljs-title">tokens</span><span class="hljs-params">(MyString my_str)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> ch : my_str.m_str) &#123;<br>        <span class="hljs-keyword">co_yield</span> ch;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Generator g = <span class="hljs-built_in">tokens</span>(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    <span class="hljs-keyword">while</span> (!g.<span class="hljs-built_in">done</span>()) &#123;<br>        std::cout &lt;&lt; <span class="hljs-built_in">g</span>() &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs log">MyString<br>MyString move<br>~MyString<br>H<br>e<br>l<br>l<br>o<br> <br>W<br>o<br>r<br>l<br>d<br>~MyString<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p><strong>Note:</strong></p><p>Remember to implement the move constructor of parameters. After all, those objects will be transferred to the coroutine, and will be transferred again but to <code>promise_type</code>‘s constructor.</p>          </div><h2 id="Manage-Life-Cycle-Carefullly"><a href="#Manage-Life-Cycle-Carefullly" class="headerlink" title="Manage Life Cycle Carefullly"></a>Manage Life Cycle Carefullly</h2><p>Coroutine is powerful but it’s also dangerous. Remember to manage every component’s life cycle carefully and more carefully. Good luck. :)</p>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>cpp</category>
      
      <category>stl</category>
      
      <category>coroutine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>stl</tag>
      
      <tag>cpp20</tag>
      
      <tag>coroutine</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Introduction to C++20 Coroutines - Part 2 co_await/co_return</title>
    <link href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-2-co-await-co-return/"/>
    <url>/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-2-co-await-co-return/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p><strong>This series is related to C++20 coroutine.</strong></p><p><a href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-1-Generator">part 1: Generator</a><br><strong>part 2: co_await&#x2F;co_return</strong><br><a href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-3-Some-tips-in-practice">part 3: Some tips about life cycle when using coroutines</a><br><a href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-4-Some-examples-about-co-await">part 4: Some examples about co_await</a><br><a href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-5-stackful-stackless-and-Symmetric-Transfer">part 5: stackful&#x2F;stackless and Symmetric Transfer</a></p>          </div><p>In the <a href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-1-Generator">part 1</a> of the coroutine’s series, we had learned how to write a generator with the keyword <code>co_yield</code>, as well as the schema of the return type and <code>promise_type</code>.</p><p>In the post, I would like to introduce other new keywords for coroutines - <code>co_await</code> and <code>co_return</code>.</p><h2 id="co-await"><a href="#co-await" class="headerlink" title="co_await"></a><code>co_await</code></h2><p><code>co_await</code> must be used with something like awaiter. As a called awaiter, it should have the below list functions:</p><ul><li><code>bool await_ready()</code><ul><li>If it returns <code>true</code>, the execution will skip <code>await_suspend</code> and run <code>await_resume</code> directly then resume to the coroutine.</li><li>If it returns <code>false</code>, the execution will run <code>await_suspend</code> and suspend. After resumed, it will run <code>await_resume</code> and really resume.</li></ul></li><li><code>await_suspend</code><ul><li>Available input types: <code>std::coroutine_handle&lt;promise_type&gt;</code> &#x2F; <code>std::coroutine_handle&lt;&gt;</code><blockquote><p><code>std::coroutine_handle&lt;promise_type&gt;</code> can be converted to <code>std::coroutine_handle&lt;&gt;</code> implicitly.</p></blockquote></li><li>Available output types:<ul><li><code>void</code>: suspend and return to the caller.</li><li><code>bool</code><ul><li>If returns <code>true</code>, it will suspend and return to the caller.</li><li>If returns <code>false</code>, it will run <code>await_resume</code> and resume directly.</li></ul></li><li><code>std::coroutine_handle&lt;promise_type&gt;</code> &#x2F; <code>std::coroutine_handle&lt;&gt;</code>: Go to the target corountine.<ul><li>a special case: <code>std::noop_coroutine()</code> provides a shortcut to return to caller.</li></ul></li></ul></li></ul></li></ul><p>Actually, we has dealed with the called awaiter before. <code>std::suspend_always</code> and <code>std::suspend_never</code> are both awaiter and they can be callled with <code>co_await</code>.</p><p>We can overload the operator <code>co_await</code> with some specific forms and make it more flexible and more powerful.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">suspend_always</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> <span class="hljs-title">await_ready</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">void</span> <span class="hljs-title">await_suspend</span><span class="hljs-params">(coroutine_handle&lt;&gt;)</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">void</span> <span class="hljs-title">await_resume</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">suspend_never</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> <span class="hljs-title">await_ready</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">void</span> <span class="hljs-title">await_suspend</span><span class="hljs-params">(coroutine_handle&lt;&gt;)</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">void</span> <span class="hljs-title">await_resume</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>There is an interesting point to know. <code>co_yield xx</code> is a syntax sugar of <code>co_await yield_value()</code> as the return type of <code>yield_value</code> is an awaiter. We usually set <code>std::suspend_always</code> as the return type of <code>yield_value</code>.</p>          </div><h2 id="co-return"><a href="#co-return" class="headerlink" title="co_return"></a><code>co_return</code></h2><p>For any coroutine, the <code>promise_type</code> should conatin a function either as <code>void return_void()</code> or as <code>void return_value(...)</code>. They can’t be declared at the same time. In constast, it’s an undefined behaviour if we declare none of them. In this way, we have to trade them off carefully.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/349710180">C++20 新特性 协程 Coroutines(2)</a></li><li><a href="https://zhuanlan.zhihu.com/p/355100152">如何编写 C++ 20 协程(Coroutines)</a><ul><li>multi-thread: <a href="https://en.cppreference.com/w/cpp/language/coroutines">https://en.cppreference.com/w/cpp/language/coroutines</a></li></ul></li><li><a href="https://zhuanlan.zhihu.com/p/356752742">C++20 新特性 协程 Coroutines(3)</a></li><li>critical: <a href="https://lewissbaker.github.io/">https://lewissbaker.github.io/</a><ul><li><a href="https://lewissbaker.github.io/2017/09/25/coroutine-theory">Coroutine Theory</a></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>cpp</category>
      
      <category>stl</category>
      
      <category>coroutine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>stl</tag>
      
      <tag>cpp20</tag>
      
      <tag>coroutine</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Negotiate Reasonable Groups</title>
    <link href="/SystemDesign/Negotiate-Reasonable-Groups/"/>
    <url>/SystemDesign/Negotiate-Reasonable-Groups/</url>
    
    <content type="html"><![CDATA[<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>This problem is from Zhihu <a href="https://www.zhihu.com/question/596919226">https://www.zhihu.com/question/596919226</a></p><p><img src="/resources/Negotiate-Reasonable-Groups/img/problem_description.png" alt="problem_description"></p><p>Write a program to find a reasonable answer.</p><p>Assume there is a meeting and there are 5 possible studunts as attendees - <code>A</code>, <code>B</code>, <code>C</code>, <code>D</code>, and <code>E</code>. Distinguish who will attend the meeting according to the below conditions:</p><ol><li>If <code>A</code> attends, <code>B</code> will also attend.</li><li><code>B</code> and <code>C</code> can’t attend at the same time.</li><li>Either <code>C</code> and <code>D</code> will both attend, or they both won’t attend.</li><li>At least one person from <code>D</code> and <code>E</code> will attend.</li><li>If <code>E</code> attends, then <code>A</code> and <code>D</code> will also attend.</li></ol><h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><h3 id="bitset"><a href="#bitset" class="headerlink" title="bitset"></a>bitset</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">const</span> std::bitset&lt;<span class="hljs-number">5</span>&gt;&amp; student)</span> </span>&#123;<br>    <span class="hljs-comment">// Quick fail strategy</span><br>    <span class="hljs-keyword">if</span> (student[<span class="hljs-number">0</span>]) &#123;<br>        <span class="hljs-keyword">if</span> (!student[<span class="hljs-number">1</span>]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (student[<span class="hljs-number">1</span>] &amp;&amp; student[<span class="hljs-number">2</span>]) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (student[<span class="hljs-number">2</span>] != student[<span class="hljs-number">3</span>]) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!student[<span class="hljs-number">3</span>] &amp;&amp; !student[<span class="hljs-number">4</span>]) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (student[<span class="hljs-number">4</span>]) &#123;<br>        <span class="hljs-keyword">if</span> (!student[<span class="hljs-number">0</span>] || !student[<span class="hljs-number">3</span>]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> n = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1</span> &lt;&lt; n; ++i) &#123;<br>        <span class="hljs-function">std::bitset&lt;n&gt; <span class="hljs-title">s</span><span class="hljs-params">(i)</span></span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(s)) &#123;<br>            std::cout &lt;&lt; s.<span class="hljs-built_in">to_string</span>() &lt;&lt; std::endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>The result <code>01100</code> means that two person - <code>C</code> and <code>D</code> - will attend.</p><h3 id="Condition-Conjunction"><a href="#Condition-Conjunction" class="headerlink" title="Condition Conjunction"></a>Condition Conjunction</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">const</span> std::bitset&lt;<span class="hljs-number">5</span>&gt;&amp; student)</span> </span>&#123;<br>    <span class="hljs-keyword">auto</span> cond1 = [&amp;]() &#123;<br>        <span class="hljs-keyword">return</span> !student[<span class="hljs-number">0</span>] || student[<span class="hljs-number">1</span>];<br>    &#125;;<br>    <span class="hljs-keyword">auto</span> cond2 = [&amp;]() &#123;<br>        <span class="hljs-keyword">return</span> !student[<span class="hljs-number">1</span>] || !student[<span class="hljs-number">2</span>];<br>    &#125;;<br>    <span class="hljs-keyword">auto</span> cond3 = [&amp;]() &#123;<br>        <span class="hljs-keyword">return</span> student[<span class="hljs-number">2</span>] == student[<span class="hljs-number">3</span>];<br>    &#125;;<br>    <span class="hljs-keyword">auto</span> cond4 = [&amp;]() &#123;<br>        <span class="hljs-keyword">return</span> student[<span class="hljs-number">3</span>] || student[<span class="hljs-number">4</span>];<br>    &#125;;<br>    <span class="hljs-keyword">auto</span> cond5 = [&amp;]() &#123;<br>        <span class="hljs-keyword">return</span> !student[<span class="hljs-number">4</span>] || (student[<span class="hljs-number">0</span>] &amp;&amp; student[<span class="hljs-number">3</span>]);<br>    &#125;;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">cond1</span>() &amp;&amp; <span class="hljs-built_in">cond2</span>() &amp;&amp; <span class="hljs-built_in">cond3</span>() &amp;&amp; <span class="hljs-built_in">cond4</span>() &amp;&amp; <span class="hljs-built_in">cond5</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Plug-in-Transformation"><a href="#Plug-in-Transformation" class="headerlink" title="Plug-in Transformation"></a>Plug-in Transformation</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-type">size_t</span> Size&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solver</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">using</span> ConditionCallback = std::function&lt;<span class="hljs-built_in">bool</span>(<span class="hljs-type">const</span> std::bitset&lt;Size&gt;&amp;)&gt;;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">register_condition</span><span class="hljs-params">(ConditionCallback condition)</span> </span>&#123;<br>        m_conditions.<span class="hljs-built_in">push_back</span>(std::<span class="hljs-built_in">move</span>(condition));<br>        m_is_clean = <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// return directly if the result is clean</span><br>        <span class="hljs-keyword">if</span> (m_is_clean) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-built_in">clear_result</span>();<br><br>        <span class="hljs-keyword">auto</span> check = [<span class="hljs-keyword">this</span>]() &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> ConditionCallback&amp; condition : m_conditions) &#123;<br>                <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">condition</span>(m_bitset)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-number">1</span> &lt;&lt; Size); ++i) &#123;<br>            m_bitset = i;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>()) &#123;<br>                m_results.<span class="hljs-built_in">push_back</span>(m_bitset.<span class="hljs-built_in">to_string</span>());<br>            &#125;<br>        &#125;<br><br>        m_is_clean = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> std::string&amp; result : m_results) &#123;<br>            std::cout &lt;&lt; result &lt;&lt; std::endl;<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear_result</span><span class="hljs-params">()</span> </span>&#123;<br>        m_bitset = <span class="hljs-number">0</span>;<br>        m_results.<span class="hljs-built_in">clear</span>();<br>    &#125;<br><br>    std::bitset&lt;Size&gt; m_bitset;<br>    std::vector&lt;ConditionCallback&gt; m_conditions;<br>    std::vector&lt;std::string&gt; m_results;<br><br>    <span class="hljs-type">bool</span> m_is_clean&#123;<span class="hljs-literal">true</span>&#125;;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Solver&lt;<span class="hljs-number">5</span>&gt; solver;<br><br>    solver.<span class="hljs-built_in">register_condition</span>([](<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; student) &#123;<br>        <span class="hljs-keyword">return</span> !student[<span class="hljs-number">0</span>] || student[<span class="hljs-number">1</span>];<br>    &#125;);<br>    solver.<span class="hljs-built_in">register_condition</span>([](<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; student) &#123;<br>        <span class="hljs-keyword">return</span> !student[<span class="hljs-number">1</span>] || !student[<span class="hljs-number">2</span>];<br>    &#125;);<br>    solver.<span class="hljs-built_in">register_condition</span>([](<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; student) &#123;<br>        <span class="hljs-keyword">return</span> student[<span class="hljs-number">2</span>] == student[<span class="hljs-number">3</span>];<br>    &#125;);<br>    solver.<span class="hljs-built_in">register_condition</span>([](<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; student) &#123;<br>        <span class="hljs-keyword">return</span> student[<span class="hljs-number">3</span>] || student[<span class="hljs-number">4</span>];<br>    &#125;);<br>    solver.<span class="hljs-built_in">register_condition</span>([](<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; student) &#123;<br>        <span class="hljs-keyword">return</span> !student[<span class="hljs-number">4</span>] || (student[<span class="hljs-number">0</span>] &amp;&amp; student[<span class="hljs-number">3</span>]);<br>    &#125;);<br><br>    solver.<span class="hljs-built_in">solve</span>();<br>    solver.<span class="hljs-built_in">print</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>system_design</category>
      
    </categories>
    
    
    <tags>
      
      <tag>system_design</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 9 - Palindrome Number</title>
    <link href="/Algorithm/LeetCode/LeetCode-9-Palindrome-Number/"/>
    <url>/Algorithm/LeetCode/LeetCode-9-Palindrome-Number/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-success">easy</span></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Palindrome-Number"><a href="#English-Palindrome-Number" class="headerlink" title="English (Palindrome Number)"></a>English (Palindrome Number)</h3><p>Given an integer <code>x</code>, return <code>true</code> if <code>x</code> is a <strong>palindrome</strong>, and <code>false</code> otherwise.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: x = 121<br>Output: true<br>Explanation: 121 reads as 121 from left to right and from right to left.<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: x = -121<br>Output: false<br>Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.<br></code></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: x = 10<br>Output: false<br>Explanation: Reads 01 from right to left. Therefore it is not a palindrome.<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>-2^31 &lt;= x &lt;= 2^31 - 1</code></li></ul><p><strong>Follow up:</strong> Could you solve it without converting the integer to a string?</p><h3 id="Chinese-回文数"><a href="#Chinese-回文数" class="headerlink" title="Chinese (回文数)"></a>Chinese (回文数)</h3><p>给你一个整数 <code>x</code> ，如果 <code>x</code> 是一个回文整数，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><ul><li>例如，<code>121</code> 是回文，而 <code>123</code> 不是。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：x = 121<br>输出：true<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：x = -121<br>输出：false<br>解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：x = 10<br>输出：false<br>解释：从右向左读, 为 01 。因此它不是一个回文数。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>-2^31 &lt;= x &lt;= 2^31 - 1</code></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><div class="note note-warning">            <p><strong>Notice some edge cases:</strong></p><ul><li>negative number</li><li>zero</li><li>multiples of 10</li><li>the number after palindrome is over the threshold of integer</li></ul>          </div><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-comment">// below is the occasion that x &gt; 0</span><br>        <span class="hljs-keyword">if</span> (x % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> palindrome_num = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (x &gt; palindrome_num) &#123;<br>            palindrome_num = palindrome_num * <span class="hljs-number">10</span> + x % <span class="hljs-number">10</span>;<br>            x /= <span class="hljs-number">10</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> (palindrome_num == x) || (palindrome_num / <span class="hljs-number">10</span> == x);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>mathematical</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>mathematical</tag>
      
      <tag>easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 5 - Longest Palindromic Substring</title>
    <link href="/Algorithm/LeetCode/DynamicProgramming/LeetCode-5-Longest-Palindromic-Substring/"/>
    <url>/Algorithm/LeetCode/DynamicProgramming/LeetCode-5-Longest-Palindromic-Substring/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-warning">medium</span></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Longest-Palindromic-Substring"><a href="#English-Longest-Palindromic-Substring" class="headerlink" title="English (Longest Palindromic Substring)"></a>English (Longest Palindromic Substring)</h3><p>Given a string <code>s</code>, return <em>the longest palindromic substring</em> in <code>s</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: s = &quot;babad&quot;<br>Output: &quot;bab&quot;<br>Explanation: &quot;aba&quot; is also a valid answer.<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: s = &quot;cbbd&quot;<br>Output: &quot;bb&quot;<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> consist of only digits and English letters.</li></ul><h3 id="Chinese-最长回文子串"><a href="#Chinese-最长回文子串" class="headerlink" title="Chinese (最长回文子串)"></a>Chinese (最长回文子串)</h3><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p><p>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：s = &quot;babad&quot;<br>输出：&quot;bab&quot;<br>解释：&quot;aba&quot; 同样是符合题意的答案。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：s = &quot;cbbd&quot;<br>输出：&quot;bb&quot;<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> 仅由数字和英文字母组成</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br>        vector&lt;vector&lt;<span class="hljs-type">bool</span>&gt;&gt; <span class="hljs-built_in">is_palindrome</span>(n, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">bool</span>&gt;(n, <span class="hljs-literal">false</span>));<br><br>        <span class="hljs-comment">// a single character must be a palindrome</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            is_palindrome[i][i] = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> max_palindrome_size = <span class="hljs-number">1</span>;<br>        string max_palindrome = s.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// verify any continious two characters are a palindrome</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (s[i] == s[i + <span class="hljs-number">1</span>]) &#123;<br>                is_palindrome[i][i + <span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br><br>                max_palindrome_size = <span class="hljs-number">2</span>;<br>                max_palindrome = s.<span class="hljs-built_in">substr</span>(i, <span class="hljs-number">2</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// verify any continious string whose length is larger than or equal to 3.</span><br>        <span class="hljs-comment">// its state is related to 2 factors - its boundary characters, and its substring without the boundary characters</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> sub_size = <span class="hljs-number">3</span>; sub_size &lt;= n; ++sub_size) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> begin_index = <span class="hljs-number">0</span>; begin_index &lt;= n - sub_size; ++begin_index) &#123;<br>                <span class="hljs-type">int</span> end_index = begin_index + sub_size - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (s[begin_index] == s[end_index] &amp;&amp; is_palindrome[begin_index + <span class="hljs-number">1</span>][end_index - <span class="hljs-number">1</span>]) &#123;<br>                    is_palindrome[begin_index][end_index] = <span class="hljs-literal">true</span>;<br><br>                    <span class="hljs-keyword">if</span> (sub_size &gt; max_palindrome_size) &#123;<br>                        max_palindrome_size = sub_size;<br>                        max_palindrome = s.<span class="hljs-built_in">substr</span>(begin_index, sub_size);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> max_palindrome;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>dynamic_programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>medium</tag>
      
      <tag>dynamic_programming</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 53 - Maximum Subarray</title>
    <link href="/Algorithm/LeetCode/DynamicProgramming/LeetCode-53-Maximum-Subarray/"/>
    <url>/Algorithm/LeetCode/DynamicProgramming/LeetCode-53-Maximum-Subarray/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-warning">medium</span></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Maximum-Subarray"><a href="#English-Maximum-Subarray" class="headerlink" title="English (Maximum Subarray)"></a>English (Maximum Subarray)</h3><p>Given an integer array <code>nums</code>, find the subarray with the largest sum, and return its sum.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: nums = [-2,1,-3,4,-1,2,1,-5,4]<br>Output: 6<br>Explanation: The subarray [4,-1,2,1] has the largest sum 6.<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: nums = [1]<br>Output: 1<br>Explanation: The subarray [1] has the largest sum 1.<br></code></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: nums = [5,4,-1,7,8]<br>Output: 23<br>Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li></ul><p><strong>Follow up:</strong> If you have figured out the <code>O(n)</code> solution, try coding another solution using the <strong>divide and conquer</strong> approach, which is more subtle.</p><h3 id="Chinese-最大子数组和"><a href="#Chinese-最大子数组和" class="headerlink" title="Chinese (最大子数组和)"></a>Chinese (最大子数组和)</h3><p>给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p><strong>子数组</strong> 是数组中的一个连续部分。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：nums = [-2,1,-3,4,-1,2,1,-5,4]<br>输出：6<br>解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：nums = [1]<br>输出：1<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：nums = [5,4,-1,7,8]<br>输出：23<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li></ul><p><strong>进阶：</strong>如果你已经实现复杂度为 <code>O(n)</code> 的解法，尝试使用更为精妙的 <strong>分治法</strong> 求解。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-comment">// Note:</span><br>        <span class="hljs-comment">// If fragment_sum is initialized as `0`,</span><br>        <span class="hljs-comment">// it will return `0` rather than `-1` when `nums = [-1]`</span><br>        <span class="hljs-type">int</span> fragment_sum = INT_MIN;<br>        <span class="hljs-type">int</span> max_fragment_sum = INT_MIN;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>            <span class="hljs-keyword">if</span> (fragment_sum &gt; <span class="hljs-number">0</span>) &#123;<br>                fragment_sum += num;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                fragment_sum = num;<br>            &#125;<br><br>            max_fragment_sum = <span class="hljs-built_in">max</span>(max_fragment_sum, fragment_sum);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> max_fragment_sum;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>It’s also available to initialize <code>fragment_sum</code> with <code>nums[0]</code> as below code, but I prefer the above way due to the integrated for-range loop. :)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> fragment_sum = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> max_fragment_sum = fragment_sum;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, n = nums.<span class="hljs-built_in">size</span>(); i &lt; n; ++i) &#123;<br>            <span class="hljs-type">int</span> num = nums[i];<br>            <span class="hljs-keyword">if</span> (fragment_sum &gt; <span class="hljs-number">0</span>) &#123;<br>                fragment_sum += num;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                fragment_sum = num;<br>            &#125;<br><br>            max_fragment_sum = <span class="hljs-built_in">max</span>(max_fragment_sum, fragment_sum);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> max_fragment_sum;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>dynamic_programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>medium</tag>
      
      <tag>dynamic_programming</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 239 - Sliding Window Maximum</title>
    <link href="/Algorithm/LeetCode/LeetCode-239-Sliding-Window-Maximum/"/>
    <url>/Algorithm/LeetCode/LeetCode-239-Sliding-Window-Maximum/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-danger">hard</span></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Sliding-Window-Maximum"><a href="#English-Sliding-Window-Maximum" class="headerlink" title="English (Sliding Window Maximum)"></a>English (Sliding Window Maximum)</h3><p>You are given an array of integers <code>nums</code>, there is a sliding window of size <code>k</code> which is moving from the very left of the array to the very right. You can only see the <code>k</code> numbers in the window. Each time the sliding window moves right by one position.</p><p>Return <em>the max sliding window</em>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: nums = [1,3,-1,-3,5,3,6,7], k = 3<br>Output: [3,3,5,5,6,7]<br>Explanation: <br>Window position                Max<br>---------------               -----<br>[1  3  -1] -3  5  3  6  7       3<br> 1 [3  -1  -3] 5  3  6  7       3<br> 1  3 [-1  -3  5] 3  6  7       5<br> 1  3  -1 [-3  5  3] 6  7       5<br> 1  3  -1  -3 [5  3  6] 7       6<br> 1  3  -1  -3  5 [3  6  7]      7<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: nums = [1], k = 1<br>Output: [1]<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li><li><code>1 &lt;= k &lt;= nums.length</code></li></ul><h3 id="Chinese-滑动窗口最大值"><a href="#Chinese-滑动窗口最大值" class="headerlink" title="Chinese (滑动窗口最大值)"></a>Chinese (滑动窗口最大值)</h3><p>给你一个整数数组 <code>nums</code>，有一个大小为 <code>k</code> 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 <code>k</code> 个数字。滑动窗口每次只向右移动一位。</p><p>返回 <em>滑动窗口中的最大值</em> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：nums = [1,3,-1,-3,5,3,6,7], k = 3<br>输出：[3,3,5,5,6,7]<br>解释：<br>滑动窗口的位置                  最大值<br>---------------               -----<br>[1  3  -1] -3  5  3  6  7       3<br> 1 [3  -1  -3] 5  3  6  7       3<br> 1  3 [-1  -3  5] 3  6  7       5<br> 1  3  -1 [-3  5  3] 6  7       5<br> 1  3  -1  -3 [5  3  6] 7       6<br> 1  3  -1  -3  5 [3  6  7]      7<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：nums = [1], k = 1<br>输出：[1]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li><li><code>1 &lt;= k &lt;= nums.length</code></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">maxSlidingWindow</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        vector&lt;<span class="hljs-type">int</span>&gt; res;<br>        res.<span class="hljs-built_in">reserve</span>(n - k + <span class="hljs-number">1</span>);<br><br>        deque&lt;<span class="hljs-type">int</span>&gt; q;<br>        <span class="hljs-comment">// prepare (k - 1) elements</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k - <span class="hljs-number">1</span>; ++i) &#123;<br>            <span class="hljs-type">int</span> value = nums[i];<br>            <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>() &amp;&amp; value &gt; q.<span class="hljs-built_in">back</span>()) &#123;<br>                q.<span class="hljs-built_in">pop_back</span>();<br>            &#125;<br>            q.<span class="hljs-built_in">push_back</span>(value);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = k - <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-comment">// add an element to construct a window whose size is k</span><br>            <span class="hljs-type">int</span> value = nums[i];<br>            <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>() &amp;&amp; value &gt; q.<span class="hljs-built_in">back</span>()) &#123;<br>                q.<span class="hljs-built_in">pop_back</span>();<br>            &#125;<br>            q.<span class="hljs-built_in">push_back</span>(value);<br><br>            <span class="hljs-comment">// get the max value in the window</span><br>            <span class="hljs-comment">// this procedure will repeat (n - k + 1) times</span><br>            <span class="hljs-type">int</span> max_value = q.<span class="hljs-built_in">front</span>();<br>            res.<span class="hljs-built_in">push_back</span>(max_value);<br><br>            <span class="hljs-comment">// remove the max value if it&#x27;s the front of the window and</span><br>            <span class="hljs-comment">// resume with (k - 1) elements in the window for next iteration</span><br>            <span class="hljs-keyword">if</span> (nums[i - (k - <span class="hljs-number">1</span>)] == max_value) &#123;<br>                q.<span class="hljs-built_in">pop_front</span>();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxSlidingWindow</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">import</span> collections<br><br>        n = <span class="hljs-built_in">len</span>(nums)<br><br>        q = collections.deque()<br>        <span class="hljs-comment"># prepare (k - 1) elements</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k-<span class="hljs-number">1</span>):<br>            value = nums[i]<br>            <span class="hljs-keyword">while</span> q <span class="hljs-keyword">and</span> value &gt; q[-<span class="hljs-number">1</span>]:<br>                q.pop()<br>            q.append(value)<br><br>        res = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k-<span class="hljs-number">1</span>, n):<br>            <span class="hljs-comment"># add an element to construct a window whose size is k</span><br>            value = nums[i]<br>            <span class="hljs-keyword">while</span> q <span class="hljs-keyword">and</span> value &gt; q[-<span class="hljs-number">1</span>]:<br>                q.pop()<br>            q.append(value)<br><br>            <span class="hljs-comment"># get the max value in the window</span><br>            <span class="hljs-comment"># this procedure will repeat (n - k + 1) times</span><br>            max_value = q[<span class="hljs-number">0</span>]<br>            res.append(max_value)<br><br>            <span class="hljs-comment"># remove the max value if it&#x27;s the front of the window and</span><br>            <span class="hljs-comment"># resume with (k - 1) elements in the window for next iteration</span><br>            <span class="hljs-keyword">if</span> nums[i-(k-<span class="hljs-number">1</span>)] == max_value:<br>                q.popleft()<br><br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>sliding_window</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>sliding_window</tag>
      
      <tag>leetcode</tag>
      
      <tag>hard</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 146 - LRU Cache</title>
    <link href="/Algorithm/LeetCode/LeetCode-146-LRU-Cache/"/>
    <url>/Algorithm/LeetCode/LeetCode-146-LRU-Cache/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-warning">medium</span></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-LRU-Cache"><a href="#English-LRU-Cache" class="headerlink" title="English (LRU Cache)"></a>English (LRU Cache)</h3><p>Design a data structure that follows the constraints of a <strong>Least Recently Used (LRU) cache</strong>.</p><p>Implement the <code>LRUCache</code> class:</p><ul><li><code>LRUCache(int capacity)</code> Initialize the LRU cache with <strong>positive</strong> size <code>capacity</code>.</li><li><code>int get(int key)</code> Return the value of the <code>key</code> if the key exists, otherwise return <code>-1</code>.</li><li><code>void put(int key, int value)</code> Update the value of the <code>key</code> if the <code>key</code> exists. Otherwise, add the <code>key-value</code> pair to the cache. If the number of keys exceeds the <code>capacity</code> from this operation, <strong>evict</strong> the least recently used key.</li></ul><p>The functions <code>get</code> and <code>put</code> must each run in <code>O(1)</code> average time complexity.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs log">Input<br>[&quot;LRUCache&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;get&quot;]<br>[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]<br>Output<br>[null, null, null, 1, null, -1, null, -1, 3, 4]<br><br>Explanation<br>LRUCache lRUCache = new LRUCache(2);<br>lRUCache.put(1, 1); // cache is &#123;1=1&#125;<br>lRUCache.put(2, 2); // cache is &#123;1=1, 2=2&#125;<br>lRUCache.get(1);    // return 1<br>lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is &#123;1=1, 3=3&#125;<br>lRUCache.get(2);    // returns -1 (not found)<br>lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is &#123;4=4, 3=3&#125;<br>lRUCache.get(1);    // return -1 (not found)<br>lRUCache.get(3);    // return 3<br>lRUCache.get(4);    // return 4<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= capacity &lt;= 3000</code></li><li><code>0 &lt;= key &lt;= 10^4</code></li><li><code>0 &lt;= value &lt;= 10^5</code></li><li>At most <code>2 * 10^5</code> calls will be made to get and put.</li></ul><h3 id="Chinese-LRU-缓存"><a href="#Chinese-LRU-缓存" class="headerlink" title="Chinese (LRU 缓存)"></a>Chinese (LRU 缓存)</h3><p>请你设计并实现一个满足 <code>LRU (最近最少使用) 缓存</code> 约束的数据结构。<br>实现 <code>LRUCache</code> 类：</p><ul><li><code>LRUCache(int capacity)</code> 以 <strong>正整数</strong> 作为容量 <code>capacity</code> 初始化 LRU 缓存</li><li><code>int get(int key)</code> 如果关键字 <code>key</code> 存在于缓存中，则返回关键字的值，否则返回 <code>-1</code> 。</li><li><code>void put(int key, int value)</code> 如果关键字 key 已经存在，则变更其数据值 <code>value</code> ；如果不存在，则向缓存中插入该组 <code>key-value</code> 。如果插入操作导致关键字数量超过 <code>capacity</code> ，则应该 <strong>逐出</strong> 最久未使用的关键字。<br>函数 <code>get</code> 和 <code>put</code> 必须以 <code>O(1)</code> 的平均时间复杂度运行。</li></ul><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs log">输入<br>[&quot;LRUCache&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;get&quot;]<br>[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]<br>输出<br>[null, null, null, 1, null, -1, null, -1, 3, 4]<br><br>解释<br>LRUCache lRUCache = new LRUCache(2);<br>lRUCache.put(1, 1); // 缓存是 &#123;1=1&#125;<br>lRUCache.put(2, 2); // 缓存是 &#123;1=1, 2=2&#125;<br>lRUCache.get(1);    // 返回 1<br>lRUCache.put(3, 3); // 该操作会使得关键字 2 作废，缓存是 &#123;1=1, 3=3&#125;<br>lRUCache.get(2);    // 返回 -1 (未找到)<br>lRUCache.put(4, 4); // 该操作会使得关键字 1 作废，缓存是 &#123;4=4, 3=3&#125;<br>lRUCache.get(1);    // 返回 -1 (未找到)<br>lRUCache.get(3);    // 返回 3<br>lRUCache.get(4);    // 返回 4<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= capacity &lt;= 3000</code></li><li><code>0 &lt;= key &lt;= 10000</code></li><li><code>0 &lt;= value &lt;= 10^5</code></li><li>最多调用 <code>2 * 10^5</code> 次 <code>get</code> 和 <code>put</code></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LRUCache</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>        <span class="hljs-type">int</span> key&#123;<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-type">int</span> value&#123;<span class="hljs-number">0</span>&#125;;<br>        ListNode* prev&#123;<span class="hljs-literal">nullptr</span>&#125;;<br>        ListNode* next&#123;<span class="hljs-literal">nullptr</span>&#125;;<br>    &#125;;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">LRUCache</span>(<span class="hljs-type">int</span> capacity) : <span class="hljs-built_in">m_size</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">m_capacity</span>(capacity) &#123;<br>        m_head = <span class="hljs-keyword">new</span> ListNode;<br>        m_tail = <span class="hljs-keyword">new</span> ListNode;<br>        m_head-&gt;next = m_tail;<br>        m_tail-&gt;prev = m_head;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> </span>&#123;<br>        <span class="hljs-keyword">auto</span> it = m_node_by_key.<span class="hljs-built_in">find</span>(key);<br>        <span class="hljs-keyword">if</span> (it == m_node_by_key.<span class="hljs-built_in">end</span>()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br><br>        ListNode* node = it-&gt;second;<br>        <span class="hljs-built_in">extract_node</span>(node);<br>        <span class="hljs-built_in">place_node_at_first</span>(node);<br><br>        <span class="hljs-keyword">return</span> node-&gt;value;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">put</span><span class="hljs-params">(<span class="hljs-type">int</span> key, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">auto</span> it = m_node_by_key.<span class="hljs-built_in">find</span>(key);<br>        <span class="hljs-keyword">if</span> (it != m_node_by_key.<span class="hljs-built_in">end</span>()) &#123;  <span class="hljs-comment">// find it and replace its value</span><br>            ListNode* node = it-&gt;second;<br>            <span class="hljs-built_in">extract_node</span>(node);<br>            node-&gt;value = value;<br>            <span class="hljs-built_in">place_node_at_first</span>(node);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (m_size &gt;= m_capacity) &#123;<br>            <span class="hljs-comment">// retire the least recently used element</span><br>            ListNode* oldest = m_tail-&gt;prev;<br>            <span class="hljs-built_in">extract_node</span>(oldest);<br>            m_node_by_key.<span class="hljs-built_in">erase</span>(oldest-&gt;key);<br>            <span class="hljs-keyword">delete</span> oldest;<br>            --m_size;<br>        &#125;<br><br>        <span class="hljs-comment">// insert a new node</span><br>        ListNode* new_node = <span class="hljs-keyword">new</span> ListNode;<br>        new_node-&gt;key = key;<br>        new_node-&gt;value = value;<br>        <span class="hljs-built_in">place_node_at_first</span>(new_node);<br>        m_node_by_key[key] = new_node;<br>        ++m_size;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">extract_node</span><span class="hljs-params">(ListNode* node)</span> </span>&#123;<br>        ListNode* prev = node-&gt;prev;<br>        ListNode* next = node-&gt;next;<br><br>        node-&gt;prev = <span class="hljs-literal">nullptr</span>;<br>        node-&gt;next = <span class="hljs-literal">nullptr</span>;<br><br>        prev-&gt;next = next;<br>        next-&gt;prev = prev;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">place_node_at_first</span><span class="hljs-params">(ListNode* node)</span> </span>&#123;<br>        node-&gt;prev = m_head;<br>        node-&gt;next = m_head-&gt;next;<br><br>        m_head-&gt;next-&gt;prev = node;<br>        m_head-&gt;next = node;<br>    &#125;<br><br>    <span class="hljs-type">int</span> m_size;<br>    <span class="hljs-type">int</span> m_capacity;<br><br>    ListNode* m_head;<br>    ListNode* m_tail;<br>    unordered_map&lt;<span class="hljs-type">int</span>, ListNode*&gt; m_node_by_key;<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your LRUCache object will be instantiated and called as such:</span><br><span class="hljs-comment"> * LRUCache* obj = new LRUCache(capacity);</span><br><span class="hljs-comment"> * int param_1 = obj-&gt;get(key);</span><br><span class="hljs-comment"> * obj-&gt;put(key,value);</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>linked_list</category>
      
      <category>hashmap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>linked_list</tag>
      
      <tag>hashmap</tag>
      
      <tag>medium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 42 - Trapping Rain Water</title>
    <link href="/Algorithm/LeetCode/LeetCode-42-Trapping-Rain-Water/"/>
    <url>/Algorithm/LeetCode/LeetCode-42-Trapping-Rain-Water/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-danger">hard</span></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Trapping-Rain-Water"><a href="#English-Trapping-Rain-Water" class="headerlink" title="English (Trapping Rain Water)"></a>English (Trapping Rain Water)</h3><p>Given <code>n</code> non-negative integers representing an elevation map where the width of each bar is <code>1</code>, compute how much water it can trap after raining.</p><p><strong>Example 1:</strong></p><p><img src="/resources/LeetCode-42-Trapping-Rain-Water/img/trapping_rain_water.png" alt="trapping_rain_water"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]<br>Output: 6<br>Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: height = [4,2,0,3,2,5]<br>Output: 9<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>n == height.length</code></li><li><code>1 &lt;= n &lt;= 2 * 10^4</code></li><li><code>0 &lt;= height[i] &lt;= 10^5</code></li></ul><h3 id="Chinese-接雨水"><a href="#Chinese-接雨水" class="headerlink" title="Chinese (接雨水)"></a>Chinese (接雨水)</h3><p>给定 <code>n</code> 个非负整数表示每个宽度为 <code>1</code> 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><p><strong>示例 1：</strong></p><p><img src="/resources/LeetCode-42-Trapping-Rain-Water/img/trapping_rain_water.png" alt="trapping_rain_water"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]<br>输出：6<br>解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：height = [4,2,0,3,2,5]<br>输出：9<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == height.length</code></li><li><code>1 &lt;= n &lt;= 2 * 10^4</code></li><li><code>0 &lt;= height[i] &lt;= 10^5</code></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">trap</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; height)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = height.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">left</span><span class="hljs-params">(n)</span>, <span class="hljs-title">right</span><span class="hljs-params">(n)</span></span>;<br><br>        <span class="hljs-type">int</span> left_max = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            left_max = <span class="hljs-built_in">max</span>(left_max, height[i]);<br>            left[i] = left_max - height[i];<br>        &#125;<br><br>        <span class="hljs-type">int</span> right_max = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>            right_max = <span class="hljs-built_in">max</span>(right_max, height[i]);<br>            right[i] = right_max - height[i];<br>        &#125;<br><br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            res += <span class="hljs-built_in">min</span>(left[i], right[i]);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">trap</span>(<span class="hljs-params">self, height: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n = <span class="hljs-built_in">len</span>(height)<br>        left, right = [<span class="hljs-number">0</span>] * n, [<span class="hljs-number">0</span>] * n<br><br>        left_max = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            left_max = <span class="hljs-built_in">max</span>(left_max, height[i])<br>            left[i] = left_max - height[i]<br><br>        right_max = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            right_max = <span class="hljs-built_in">max</span>(right_max, height[i])<br>            right[i] = right_max - height[i]<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>([<span class="hljs-built_in">min</span>(left[i], right[i]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>greedy_algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>greedy_algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>hard</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>unused variable when using std::views::iota in C++20</title>
    <link href="/Dev/C++/STL/unused-variable-when-using-std-views-iota-in-C-20/"/>
    <url>/Dev/C++/STL/unused-variable-when-using-std-views-iota-in-C-20/</url>
    
    <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>In traditional C++, we used to use an integer to make an iteration as below:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = begin; i &lt; end; ++i) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>However, this way looks verbose. We potentially need a simple and convenient way like in Python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(begin, end):<br>    ...<br></code></pre></td></tr></table></figure><h2 id="std-views-iota"><a href="#std-views-iota" class="headerlink" title="std::views::iota"></a><code>std::views::iota</code></h2><p>Fortunately, we can achieve it in C++20 as the below code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ranges&gt;</span></span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : std::views::<span class="hljs-built_in">iota</span>(begin, end)) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>namespace <code>std::views</code> is an alias to namespace <code>std::ranges::views</code> with <code>namespace views = ranges::views;</code>. Therefore, <code>std::views::iota</code> is an abbreviation of <code>std::ranges::views::iota</code>.</p><p>Actually, their return type is <code>std::ranges::iota_view</code> so it’s also available to use <code>std::ranges::iota_view(begin, end)</code>.</p><p>In conclusion, it’s suggested to use <code>std::views::iota</code> in everywhere for unification.</p>          </div><h2 id="unused-variable"><a href="#unused-variable" class="headerlink" title="unused variable"></a>unused variable</h2><p>There is an issue that the compiler would complained there was an unused variable <code>i</code> if it was only for iteration and it wasn’t used in the loop body.</p><p>In previous code, there was no such issue because the iterator <code>i</code> had been not only read but also written.</p><p>We might add attribute <code>[[maybe_unused]]</code> (C++17) to silence that warning:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span> ([[maybe_unused]] <span class="hljs-type">int</span> i : std::views::<span class="hljs-built_in">iota</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>)) &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;dummy&quot;</span> &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://stackoverflow.com/questions/70622617/for-loop-counter-gives-an-unused-variable-warning">for-loop counter gives an unused-variable warning</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>cpp</category>
      
      <category>stl</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>stl</tag>
      
      <tag>cpp20</tag>
      
      <tag>ranges</tag>
      
      <tag>maybe_unused</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 23 - Merge k Sorted Lists</title>
    <link href="/Algorithm/LeetCode/LeetCode-23-Merge-k-Sorted-Lists/"/>
    <url>/Algorithm/LeetCode/LeetCode-23-Merge-k-Sorted-Lists/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-danger">hard</span></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Merge-k-Sorted-Lists"><a href="#English-Merge-k-Sorted-Lists" class="headerlink" title="English (Merge k Sorted Lists)"></a>English (Merge k Sorted Lists)</h3><p>You are given an array of <code>k</code> linked-lists <code>lists</code>, each linked-list is sorted in ascending order.</p><p><em>Merge all the linked-lists into one sorted linked-list and return it.</em></p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: lists = [[1,4,5],[1,3,4],[2,6]]<br>Output: [1,1,2,3,4,4,5,6]<br>Explanation: The linked-lists are:<br>[<br>  1-&gt;4-&gt;5,<br>  1-&gt;3-&gt;4,<br>  2-&gt;6<br>]<br>merging them into one sorted list:<br>1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: lists = []<br>Output: []<br></code></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: lists = [[]]<br>Output: []<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>k == lists.length</code></li><li><code>0 &lt;= k &lt;= 104</code></li><li><code>0 &lt;= lists[i].length &lt;= 500</code></li><li><code>-104 &lt;= lists[i][j] &lt;= 104</code></li><li><code>lists[i]</code> is sorted in <strong>ascending order</strong>.</li><li>The sum of <code>lists[i].length</code> will not exceed $10^4$.</li></ul><h3 id="Chinese-合并-K-个升序链表"><a href="#Chinese-合并-K-个升序链表" class="headerlink" title="Chinese (合并 K 个升序链表)"></a>Chinese (合并 K 个升序链表)</h3><p>给你一个链表数组，每个链表都已经按升序排列。</p><p>请你将所有链表合并到一个升序链表中，返回合并后的链表。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：lists = [[1,4,5],[1,3,4],[2,6]]<br>输出：[1,1,2,3,4,4,5,6]<br>解释：链表数组如下：<br>[<br>  1-&gt;4-&gt;5,<br>  1-&gt;3-&gt;4,<br>  2-&gt;6<br>]<br>将它们合并到一个有序链表中得到。<br>1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：lists = []<br>输出：[]<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：lists = [[]]<br>输出：[]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>k == lists.length</code></li><li><code>0 &lt;= k &lt;= 10^4</code></li><li><code>0 &lt;= lists[i].length &lt;= 500</code></li><li><code>-10^4 &lt;= lists[i][j] &lt;= 10^4</code></li><li><code>lists[i]</code> 按 <strong>升序</strong> 排列</li><li><code>lists[i].length</code> 的总和不超过 $10^4$</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode* next;<br>    <span class="hljs-built_in">ListNode</span>() : <span class="hljs-built_in">val</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x, ListNode* next) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(next) &#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">mergeKLists</span><span class="hljs-params">(vector&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;<br>        priority_queue&lt;ListNode*, vector&lt;ListNode*&gt;, cmp&gt; pq;<br>        <span class="hljs-keyword">for</span> (ListNode* list : lists) &#123;<br>            <span class="hljs-keyword">if</span> (list != <span class="hljs-literal">nullptr</span>) &#123;<br>                pq.<span class="hljs-built_in">push</span>(list);<br>            &#125;<br>        &#125;<br><br>        ListNode* dummy = <span class="hljs-keyword">new</span> ListNode;<br>        ListNode* last = dummy;<br>        <span class="hljs-keyword">while</span> (!pq.<span class="hljs-built_in">empty</span>()) &#123;<br>            ListNode* cur = pq.<span class="hljs-built_in">top</span>();<br>            pq.<span class="hljs-built_in">pop</span>();<br>            last-&gt;next = cur;<br>            last = cur;<br>            <span class="hljs-keyword">if</span> (cur-&gt;next != <span class="hljs-literal">nullptr</span>) &#123;<br>                pq.<span class="hljs-built_in">push</span>(cur-&gt;next);<br>            &#125;<br>        &#125;<br><br>        ListNode* res = dummy-&gt;next;<br>        <span class="hljs-keyword">delete</span> dummy;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">cmp</span> &#123;<br>        <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(ListNode* a, ListNode* b)</span> </span>&#123; <span class="hljs-keyword">return</span> a-&gt;val &lt; b-&gt;val; &#125;<br>    &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><div class="note note-warning">            <p>In LeetCode’s code template, we are unable to change the declaration of <code>ListNode</code> which means we can’t add a <code>__lt__</code> method inside  <code>ListNode</code>. Fortunately, there is a workaround with <code>ListNode.__lt__ = ...</code> dynamically.</p>          </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, <span class="hljs-built_in">next</span>=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">next</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mergeKLists</span>(<span class="hljs-params">self, lists: <span class="hljs-type">List</span>[<span class="hljs-type">Optional</span>[ListNode]]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        <span class="hljs-keyword">import</span> queue<br><br>        ListNode.__lt__ = <span class="hljs-keyword">lambda</span> self, other: self.val &lt; other.val<br>        pq = queue.PriorityQueue()<br>        <span class="hljs-keyword">for</span> <span class="hljs-built_in">list</span> <span class="hljs-keyword">in</span> lists:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">list</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                pq.put(<span class="hljs-built_in">list</span>)<br><br>        dummy = ListNode()<br>        last = dummy<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> pq.empty():<br>            cur = pq.get()<br>            last.<span class="hljs-built_in">next</span> = cur<br>            last = cur<br><br>            <span class="hljs-keyword">if</span> cur.<span class="hljs-built_in">next</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                pq.put(cur.<span class="hljs-built_in">next</span>)<br><br>        <span class="hljs-keyword">return</span> dummy.<span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>linked_list</category>
      
      <category>priority_queue</category>
      
      <category>heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>linked_list</tag>
      
      <tag>priority_queue</tag>
      
      <tag>heap</tag>
      
      <tag>hard</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 72 - Edit Distance</title>
    <link href="/Algorithm/LeetCode/DynamicProgramming/LeetCode-72-Edit-Distance/"/>
    <url>/Algorithm/LeetCode/DynamicProgramming/LeetCode-72-Edit-Distance/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-danger">hard</span></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Edit-Distance"><a href="#English-Edit-Distance" class="headerlink" title="English (Edit Distance)"></a>English (Edit Distance)</h3><p>Given two strings <code>word1</code> and <code>word2</code>, return <em>the minimum number of operations required to convert <code>word1</code> to <code>word2</code></em>.</p><p>You have the following three operations permitted on a word:</p><ul><li>Insert a character</li><li>Delete a character</li><li>Replace a character</li></ul><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: word1 = &quot;horse&quot;, word2 = &quot;ros&quot;<br>Output: 3<br>Explanation:<br>horse -&gt; rorse (replace &#x27;h&#x27; with &#x27;r&#x27;)<br>rorse -&gt; rose (remove &#x27;r&#x27;)<br>rose -&gt; ros (remove &#x27;e&#x27;)<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: word1 = &quot;intention&quot;, word2 = &quot;execution&quot;<br>Output: 5<br>Explanation:<br>intention -&gt; inention (remove &#x27;t&#x27;)<br>inention -&gt; enention (replace &#x27;i&#x27; with &#x27;e&#x27;)<br>enention -&gt; exention (replace &#x27;n&#x27; with &#x27;x&#x27;)<br>exention -&gt; exection (replace &#x27;n&#x27; with &#x27;c&#x27;)<br>exection -&gt; execution (insert &#x27;u&#x27;)<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>0 &lt;&#x3D; word1.length, word2.length &lt;&#x3D; 500</li><li><code>word1</code> and <code>word2</code> consist of lowercase English letters.</li></ul><h3 id="Chinese-编辑距离"><a href="#Chinese-编辑距离" class="headerlink" title="Chinese (编辑距离)"></a>Chinese (编辑距离)</h3><p>给你两个单词 <code>word1</code> 和 <code>word2</code>，请返回 <em>将 <code>word1</code> 转换成 <code>word2</code> 所使用的最少操作数</em>。</p><p>你可以对一个单词进行如下三种操作：</p><ul><li>插入一个字符</li><li>删除一个字符</li><li>替换一个字符</li></ul><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：word1 = &quot;horse&quot;, word2 = &quot;ros&quot;<br>输出：3<br>解释：<br>horse -&gt; rorse (将 &#x27;h&#x27; 替换为 &#x27;r&#x27;)<br>rorse -&gt; rose (删除 &#x27;r&#x27;)<br>rose -&gt; ros (删除 &#x27;e&#x27;)<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：word1 = &quot;intention&quot;, word2 = &quot;execution&quot;<br>输出：5<br>解释：<br>intention -&gt; inention (删除 &#x27;t&#x27;)<br>inention -&gt; enention (将 &#x27;i&#x27; 替换为 &#x27;e&#x27;)<br>enention -&gt; exention (将 &#x27;n&#x27; 替换为 &#x27;x&#x27;)<br>exention -&gt; exection (将 &#x27;n&#x27; 替换为 &#x27;c&#x27;)<br>exection -&gt; execution (插入 &#x27;u&#x27;)<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= word1.length, word2.length &lt;= 500</code></li><li><code>word1</code> 和 <code>word2</code> 由小写英文字母组成</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minDistance</span><span class="hljs-params">(string word1, string word2)</span> </span>&#123;<br>        <span class="hljs-type">int</span> word1_size = word1.<span class="hljs-built_in">size</span>(), word2_size = word2.<span class="hljs-built_in">size</span>();<br><br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(word1_size + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(word2_size + <span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= word1_size; ++i) &#123;<br>            dp[i][<span class="hljs-number">0</span>] = i;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= word2_size; ++j) &#123;<br>            dp[<span class="hljs-number">0</span>][j] = j;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; word1_size; ++i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; word2_size; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (word1[i] == word2[j]) &#123;<br>                    dp[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] = dp[i][j];<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    dp[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] = <span class="hljs-built_in">min</span>(dp[i][j], <span class="hljs-built_in">min</span>(dp[i][j + <span class="hljs-number">1</span>], dp[i + <span class="hljs-number">1</span>][j])) + <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> dp[word1_size][word2_size];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minDistance</span>(<span class="hljs-params">self, word1: <span class="hljs-built_in">str</span>, word2: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        word1_len, word2_len = <span class="hljs-built_in">len</span>(word1), <span class="hljs-built_in">len</span>(word2)<br><br>        dp = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(word2_len+<span class="hljs-number">1</span>)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(word1_len+<span class="hljs-number">1</span>)]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, word1_len+<span class="hljs-number">1</span>):<br>            dp[i][<span class="hljs-number">0</span>] = i<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, word2_len+<span class="hljs-number">1</span>):<br>            dp[<span class="hljs-number">0</span>][j] = j<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(word1_len):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(word2_len):<br>                <span class="hljs-keyword">if</span> word1[i] == word2[j]:<br>                    dp[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>] = dp[i][j]<br>                <span class="hljs-keyword">else</span>:<br>                    dp[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>] = <span class="hljs-built_in">min</span>([dp[i][j], dp[i][j+<span class="hljs-number">1</span>], dp[i+<span class="hljs-number">1</span>][j]]) + <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">return</span> dp[-<span class="hljs-number">1</span>][-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h2 id="Advanced-Strategy-for-Less-Space-Occupied"><a href="#Advanced-Strategy-for-Less-Space-Occupied" class="headerlink" title="Advanced Strategy for Less Space Occupied"></a>Advanced Strategy for Less Space Occupied</h2><p>It’s available to compress the dp array into one dimension.</p><h2 id="Advanced-Count-the-Number-of-Times-Each-Operation-Takes"><a href="#Advanced-Count-the-Number-of-Times-Each-Operation-Takes" class="headerlink" title="Advanced: Count the Number of Times Each Operation Takes"></a>Advanced: Count the Number of Times Each Operation Takes</h2><h3 id="Solution-for-counting-the-number-of-times-each-operation-takes"><a href="#Solution-for-counting-the-number-of-times-each-operation-takes" class="headerlink" title="Solution for counting the number of times each operation takes"></a>Solution for counting the number of times each operation takes</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">OperationCount</span> &#123;<br>    <span class="hljs-type">int</span> add&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> remove&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> replace&#123;<span class="hljs-number">0</span>&#125;;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DPState</span> &#123;<br>    <span class="hljs-type">int</span> min_distance;<br>    OperationCount operation_count&#123;&#125;;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> DPState <span class="hljs-title">minDistanceWithCountOfOperations</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; word1, <span class="hljs-type">const</span> std::string&amp; word2)</span> </span>&#123;<br>        <span class="hljs-type">int</span> word1_size = word1.<span class="hljs-built_in">size</span>(), word2_size = word2.<span class="hljs-built_in">size</span>();<br><br>        std::vector&lt;std::vector&lt;DPState&gt;&gt; <span class="hljs-built_in">dp</span>(word1_size + <span class="hljs-number">1</span>, std::<span class="hljs-built_in">vector</span>&lt;DPState&gt;(word2_size + <span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= word1_size; ++i) &#123;<br>            dp[i][<span class="hljs-number">0</span>].min_distance = i;<br>            dp[i][<span class="hljs-number">0</span>].operation_count.remove = i;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= word2_size; ++j) &#123;<br>            dp[<span class="hljs-number">0</span>][j].min_distance = j;<br>            dp[<span class="hljs-number">0</span>][j].operation_count.add = j;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; word1_size; ++i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; word2_size; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (word1[i] == word2[j]) &#123;<br>                    dp[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] = dp[i][j];<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-type">int</span> min_previous_state =<br>                        std::<span class="hljs-built_in">min</span>(&#123;dp[i][j].min_distance, dp[i][j + <span class="hljs-number">1</span>].min_distance, dp[i + <span class="hljs-number">1</span>][j].min_distance&#125;);<br><br>                    <span class="hljs-keyword">if</span> (min_previous_state == dp[i][j + <span class="hljs-number">1</span>].min_distance) &#123;<br>                        dp[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] = dp[i][j + <span class="hljs-number">1</span>];<br>                        dp[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>].min_distance = dp[i][j + <span class="hljs-number">1</span>].min_distance + <span class="hljs-number">1</span>;<br>                        dp[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>].operation_count.remove = dp[i][j + <span class="hljs-number">1</span>].operation_count.remove + <span class="hljs-number">1</span>;<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (min_previous_state == dp[i + <span class="hljs-number">1</span>][j].min_distance) &#123;<br>                        dp[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] = dp[i + <span class="hljs-number">1</span>][j];<br>                        dp[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>].min_distance = dp[i + <span class="hljs-number">1</span>][j].min_distance + <span class="hljs-number">1</span>;<br>                        dp[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>].operation_count.add = dp[i + <span class="hljs-number">1</span>][j].operation_count.add + <span class="hljs-number">1</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        dp[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] = dp[i][j];<br>                        dp[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>].min_distance = dp[i][j].min_distance + <span class="hljs-number">1</span>;<br>                        dp[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>].operation_count.replace = dp[i][j].operation_count.replace + <span class="hljs-number">1</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> dp[word1_size][word2_size];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Test-Cases"><a href="#Test-Cases" class="headerlink" title="Test Cases"></a>Test Cases</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cassert&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> DPState&amp; lhs, <span class="hljs-type">const</span> DPState&amp; rhs) &#123;<br>    <span class="hljs-keyword">return</span> lhs.min_distance == rhs.min_distance &amp;&amp; (lhs.operation_count.add == rhs.operation_count.add &amp;&amp;<br>                                                    lhs.operation_count.remove == rhs.operation_count.remove &amp;&amp;<br>                                                    lhs.operation_count.replace == rhs.operation_count.replace);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">using</span> Input = std::pair&lt;std::string, std::string&gt;;<br>    <span class="hljs-keyword">using</span> Output = DPState;<br>    std::vector&lt;std::pair&lt;Input, Output&gt;&gt; test_cases&#123;<br>        <span class="hljs-comment">// no change for empty string</span><br>        &#123;&#123;<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>&#125;, DPState&#123;.min_distance = <span class="hljs-number">0</span>, .operation_count = &#123;.add = <span class="hljs-number">0</span>, .remove = <span class="hljs-number">0</span>, .replace = <span class="hljs-number">0</span>&#125;&#125;&#125;,<br>        <span class="hljs-comment">// no change for non-empty string</span><br>        &#123;&#123;<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;abc&quot;</span>&#125;, DPState&#123;.min_distance = <span class="hljs-number">0</span>, .operation_count = &#123;.add = <span class="hljs-number">0</span>, .remove = <span class="hljs-number">0</span>, .replace = <span class="hljs-number">0</span>&#125;&#125;&#125;,<br>        <span class="hljs-comment">// add</span><br>        &#123;&#123;<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;abc&quot;</span>&#125;, DPState&#123;.min_distance = <span class="hljs-number">3</span>, .operation_count = &#123;.add = <span class="hljs-number">3</span>, .remove = <span class="hljs-number">0</span>, .replace = <span class="hljs-number">0</span>&#125;&#125;&#125;,<br>        <span class="hljs-comment">// remove</span><br>        &#123;&#123;<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;&quot;</span>&#125;, DPState&#123;.min_distance = <span class="hljs-number">3</span>, .operation_count = &#123;.add = <span class="hljs-number">0</span>, .remove = <span class="hljs-number">3</span>, .replace = <span class="hljs-number">0</span>&#125;&#125;&#125;,<br>        <span class="hljs-comment">// replace</span><br>        &#123;&#123;<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;def&quot;</span>&#125;, DPState&#123;.min_distance = <span class="hljs-number">3</span>, .operation_count = &#123;.add = <span class="hljs-number">0</span>, .remove = <span class="hljs-number">0</span>, .replace = <span class="hljs-number">3</span>&#125;&#125;&#125;,<br>        <span class="hljs-comment">// partial replace</span><br>        &#123;&#123;<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;aef&quot;</span>&#125;, DPState&#123;.min_distance = <span class="hljs-number">2</span>, .operation_count = &#123;.add = <span class="hljs-number">0</span>, .remove = <span class="hljs-number">0</span>, .replace = <span class="hljs-number">2</span>&#125;&#125;&#125;,<br>        &#123;&#123;<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;dec&quot;</span>&#125;, DPState&#123;.min_distance = <span class="hljs-number">2</span>, .operation_count = &#123;.add = <span class="hljs-number">0</span>, .remove = <span class="hljs-number">0</span>, .replace = <span class="hljs-number">2</span>&#125;&#125;&#125;,<br>        &#123;&#123;<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;dbf&quot;</span>&#125;, DPState&#123;.min_distance = <span class="hljs-number">2</span>, .operation_count = &#123;.add = <span class="hljs-number">0</span>, .remove = <span class="hljs-number">0</span>, .replace = <span class="hljs-number">2</span>&#125;&#125;&#125;,<br>    &#125;;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; test_case : test_cases) &#123;<br>        Input input = test_case.first;<br>        DPState actual_res = Solution::<span class="hljs-built_in">minDistanceWithCountOfOperations</span>(input.first, input.second);<br>        <span class="hljs-type">const</span> DPState&amp; expected_res = test_case.second;<br>        <span class="hljs-built_in">assert</span>(actual_res == expected_res);<br>        <span class="hljs-built_in">assert</span>(actual_res.min_distance ==<br>               actual_res.operation_count.add + actual_res.operation_count.remove + actual_res.operation_count.replace);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>dynamic_programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>hard</tag>
      
      <tag>dynamic_programming</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 1143 - Longest Common Subsequence</title>
    <link href="/Algorithm/LeetCode/DynamicProgramming/LeetCode-1143-Longest-Common-Subsequence/"/>
    <url>/Algorithm/LeetCode/DynamicProgramming/LeetCode-1143-Longest-Common-Subsequence/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Difficulty: <span class="label label-warning">medium</span></p>          </div><div class="note note-warning">            <p>Similar problem: <a href="/Algorithm/LeetCode/LeetCode-718-Maximum-Length-of-Repeated-Subarray">LeetCode 718 - Maximum Length of Repeated Subarray</a></p>          </div><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><h3 id="English-Longest-Common-Subsequence"><a href="#English-Longest-Common-Subsequence" class="headerlink" title="English (Longest Common Subsequence)"></a>English (Longest Common Subsequence)</h3><p>Given two strings <code>text1</code> and <code>text2</code>, return <em>the length of their longest <strong>common subsequence</strong></em>. If there is no <strong>common subsequence</strong>, return <code>0</code>.</p><p>A <strong>subsequence</strong> of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.</p><ul><li>For example, <code>&quot;ace&quot;</code> is a subsequence of <code>&quot;abcde&quot;</code>.<br>A <strong>common subsequence</strong> of two strings is a subsequence that is common to both strings.</li></ul><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: text1 = &quot;abcde&quot;, text2 = &quot;ace&quot;<br>Output: 3<br>Explanation: The longest common subsequence is &quot;ace&quot; and its length is 3.<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: text1 = &quot;abc&quot;, text2 = &quot;abc&quot;<br>Output: 3<br>Explanation: The longest common subsequence is &quot;abc&quot; and its length is 3.<br></code></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">Input: text1 = &quot;abc&quot;, text2 = &quot;def&quot;<br>Output: 0<br>Explanation: There is no such common subsequence, so the result is 0.<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= text1.length, text2.length &lt;= 1000</code></li><li><code>text1</code> and <code>text2</code> consist of only lowercase English characters.</li></ul><h3 id="Chinese-最长公共子序列"><a href="#Chinese-最长公共子序列" class="headerlink" title="Chinese (最长公共子序列)"></a>Chinese (最长公共子序列)</h3><p>给定两个字符串 <code>text1</code> 和 <code>text2</code>，返回这两个字符串的最长 公共子序列 的长度。如果不存在 <strong>公共子序列</strong>，返回 <code>0</code>。</p><p>一个字符串的 <strong>子序列</strong> 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。</p><p>例如，<code>&quot;ace&quot;</code> 是 <code>&quot;abcde&quot;</code> 的子序列，但 <code>&quot;aec&quot;</code> 不是 <code>&quot;abcde&quot;</code> 的子序列。<br>两个字符串的 <strong>公共子序列</strong> 是这两个字符串所共同拥有的子序列。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：text1 = &quot;abcde&quot;, text2 = &quot;ace&quot;<br>输出：3<br>解释：最长公共子序列是 &quot;ace&quot; ，它的长度为 3 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：text1 = &quot;abc&quot;, text2 = &quot;abc&quot;<br>输出：3<br>解释：最长公共子序列是 &quot;abc&quot; ，它的长度为 3 。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">输入：text1 = &quot;abc&quot;, text2 = &quot;def&quot;<br>输出：0<br>解释：两个字符串没有公共子序列，返回 0 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= text1.length, text2.length &lt;= 1000</code></li><li><code>text1</code> 和 <code>text2</code> 仅由小写英文字符组成。</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">longestCommonSubsequence</span><span class="hljs-params">(string text1, string text2)</span> </span>&#123;<br>        <span class="hljs-type">int</span> text1_size = text1.<span class="hljs-built_in">size</span>(), text2_size = text2.<span class="hljs-built_in">size</span>();<br><br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(text1_size + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(text2_size + <span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; text1_size; ++i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; text2_size; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (text1[i] == text2[j]) &#123;<br>                    dp[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] = dp[i][j] + <span class="hljs-number">1</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    dp[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(dp[i][j + <span class="hljs-number">1</span>], dp[i + <span class="hljs-number">1</span>][j]);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> dp[text1_size][text2_size];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">longestCommonSubsequence</span>(<span class="hljs-params">self, text1: <span class="hljs-built_in">str</span>, text2: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        text1_len, text2_len = <span class="hljs-built_in">len</span>(text1), <span class="hljs-built_in">len</span>(text2)<br><br>        dp = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(text2_len+<span class="hljs-number">1</span>)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(text1_len+<span class="hljs-number">1</span>)]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(text1_len):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(text2_len):<br>                <span class="hljs-keyword">if</span> text1[i] == text2[j]:<br>                    dp[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>] = dp[i][j] + <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    dp[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(dp[i][j+<span class="hljs-number">1</span>], dp[i+<span class="hljs-number">1</span>][j])<br><br>        <span class="hljs-keyword">return</span> dp[-<span class="hljs-number">1</span>][-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h2 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h2><p>It’s available to compress the dp array into one dimension.</p>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode</category>
      
      <category>dynamic_programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>leetcode</tag>
      
      <tag>medium</tag>
      
      <tag>dynamic_programming</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Allocator in STL</title>
    <link href="/Dev/C++/STL/Allocator-in-STL/"/>
    <url>/Dev/C++/STL/Allocator-in-STL/</url>
    
    <content type="html"><![CDATA[<h2 id="new-x2F-delete"><a href="#new-x2F-delete" class="headerlink" title="new&#x2F;delete"></a><code>new</code>&#x2F;<code>delete</code></h2><ul><li><code>new operator</code> as our familiar new operator, includes 2 steps:<ol><li><code>operator new</code> to allocate memory</li><li><code>placement new</code> to call constructor</li></ol></li><li><code>delete operator</code> as our familiar delete operator, also includes 2 steps:<ol><li>call destructor</li><li><code>operator delete</code> to release memory</li></ol></li></ul><div class="note note-warning">            <p><code>new operator</code> and <code>delete operator</code> are not allowed to overload, but <code>operator new</code> and <code>operator delete</code> are allowed.</p>          </div><h2 id="Two-tiers-of-memory-allocators"><a href="#Two-tiers-of-memory-allocators" class="headerlink" title="Two tiers of memory allocators"></a>Two tiers of memory allocators</h2><p>STL provides two tiers of memory allocators:</p><ul><li>When size that allocation needs is large than 128KB, use <code>new operator</code> directly.</li><li>Otherwise for small objects, a secondary memory allocator, or memory pool, is used, which is implemented through a free linked list.</li></ul><p>The reason why to use two tiers of memory allocators is to reduce the frequency of mallocation and to reduce memory fragmentation.</p><h3 id="The-first-tier"><a href="#The-first-tier" class="headerlink" title="The first tier"></a>The first tier</h3><h4 id="operator-new"><a href="#operator-new" class="headerlink" title="operator new"></a><code>operator new</code></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> *<span class="hljs-keyword">operator</span> <span class="hljs-title">new</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span> </span>&#123;<br>        Foo* p = (Foo*)<span class="hljs-built_in">malloc</span>(size);<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-type">void</span>* p, <span class="hljs-type">size_t</span> size)</span></span>&#123;<br>        <span class="hljs-built_in">free</span>(p);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="placement-new"><a href="#placement-new" class="headerlink" title="placement new"></a><code>placement new</code></h4><p>A usage is:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">Object* p = <span class="hljs-built_in">new</span> (address) <span class="hljs-built_in">ClassConstruct</span>(...);<br></code></pre></td></tr></table></figure><p>Another usage is:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;new&gt;</span> <span class="hljs-comment">// for placement new</span></span><br><br><span class="hljs-type">int</span>* ptr = ::<span class="hljs-keyword">operator</span> <span class="hljs-built_in">new</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>::<span class="hljs-keyword">new</span> ((<span class="hljs-type">void</span>*)ptr) <span class="hljs-built_in">int</span>();<br></code></pre></td></tr></table></figure><p><code>placement new</code> is also a overloaded version of <code>operator new</code>! For instance:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// normal overloaded `operator new`</span><br>    <span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-title">new</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">malloc</span>(size);<br>    &#125;<br>    ​<br>    <span class="hljs-comment">// STL has provided the overloaded version of `placement new()`</span><br>    <span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-title">new</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size, <span class="hljs-type">void</span>* start)</span> </span>&#123; <br>        do_something;<br>        <span class="hljs-keyword">return</span> start; <br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>Don’t forget to call destructor before <code>operator delete</code> if <code>placement new</code> is adopted unless its destructor isn’t necessary. In other words, the object is a trivially destructible object. We can use <code>std::is_trivially_destructible</code> to distinguish whether it’s a trivially destructible object or not.</p>          </div><h4 id="allocator"><a href="#allocator" class="headerlink" title="allocator"></a>allocator</h4><p>There are 4 functions inside allocator:</p><ul><li><code>allocate(size_t __n)</code>: call <code>operator new</code></li><li><code>deallocate(_Tp* __p, size_t __n)</code>: call <code>operator delete</code></li><li><code>construct(_Up* __p, _Args&amp;&amp;... __args)</code>: call <code>placement new</code></li><li><code>destroy(pointer __p)</code>: call destructor <code>~T()</code></li></ul><blockquote><p>Some contents unnecessary to understand are removed.</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Tp</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">_LIBCPP_TEMPLATE_VIS</span> allocator<br>    : <span class="hljs-keyword">private</span> __non_trivial_if&lt;!is_void&lt;_Tp&gt;::value, allocator&lt;_Tp&gt; &gt;<br>&#123;<br>    <span class="hljs-built_in">static_assert</span>(!is_volatile&lt;_Tp&gt;::value, <span class="hljs-string">&quot;std::allocator does not support volatile types&quot;</span>);<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">_LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17</span><br><span class="hljs-function">    _Tp* <span class="hljs-title">allocate</span><span class="hljs-params">(<span class="hljs-type">size_t</span> __n)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (__n &gt; allocator_traits&lt;allocator&gt;::<span class="hljs-built_in">max_size</span>(*<span class="hljs-keyword">this</span>))<br>            __throw_bad_array_new_length();<br>        <span class="hljs-keyword">if</span> (__libcpp_is_constant_evaluated()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">static_cast</span>&lt;_Tp*&gt;(::<span class="hljs-keyword">operator</span> <span class="hljs-built_in">new</span>(__n * <span class="hljs-built_in">sizeof</span>(_Tp)));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">static_cast</span>&lt;_Tp*&gt;(_VSTD::__libcpp_allocate(__n * <span class="hljs-built_in">sizeof</span>(_Tp), _LIBCPP_ALIGNOF(_Tp)));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function">_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17</span><br><span class="hljs-function">    <span class="hljs-type">void</span> <span class="hljs-title">deallocate</span><span class="hljs-params">(_Tp* __p, <span class="hljs-type">size_t</span> __n)</span> _NOEXCEPT </span>&#123;<br>        <span class="hljs-keyword">if</span> (__libcpp_is_constant_evaluated()) &#123;<br>            ::<span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(__p)</span></span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            _VSTD::__libcpp_deallocate((<span class="hljs-type">void</span>*)__p, __n * <span class="hljs-built_in">sizeof</span>(_Tp), _LIBCPP_ALIGNOF(_Tp));<br>        &#125;<br>    &#125;<br><br>    _LIBCPP_DEPRECATED_IN_CXX17 <span class="hljs-keyword">typedef</span> _Tp*       pointer;<br>    _LIBCPP_DEPRECATED_IN_CXX17 <span class="hljs-keyword">typedef</span> <span class="hljs-type">const</span> _Tp* const_pointer;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Up</span>, <span class="hljs-keyword">class</span>... _Args&gt;<br>    <span class="hljs-function">_LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY</span><br><span class="hljs-function">    <span class="hljs-type">void</span> <span class="hljs-title">construct</span><span class="hljs-params">(_Up* __p, _Args&amp;&amp;... __args)</span> </span>&#123;<br>        ::<span class="hljs-keyword">new</span> ((<span class="hljs-type">void</span>*)__p) _Up(_VSTD::forward&lt;_Args&gt;(__args)...);<br>    &#125;<br><br>    <span class="hljs-function">_LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY</span><br><span class="hljs-function">    <span class="hljs-type">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">(pointer __p)</span> </span>&#123;<br>        __p-&gt;~_Tp();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="The-second-tier"><a href="#The-second-tier" class="headerlink" title="The second tier"></a>The second tier</h3><ol><li>Allocate a large buffer of memory;</li><li>Split it into multiple blocks and chain them as lists;</li><li>The memory pool has such 16 lists, each of which is responsible for different size. But they have a rule that the size of the back one is twice than the front’s. For example, the 1st list is responsible for blocks with 4 bytes and the 7th list is responsible for blocks with 256 bytes.</li></ol><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/548339711">c++：STL中的内存分配器</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>cpp</category>
      
      <category>stl</category>
      
    </categories>
    
    
    <tags>
      
      <tag>basic</tag>
      
      <tag>cpp</tag>
      
      <tag>stl</tag>
      
      <tag>allocator</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>等边/任意三角形的内三角形最小周长</title>
    <link href="/Math/%E7%AD%89%E8%BE%B9-%E4%BB%BB%E6%84%8F%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E5%86%85%E4%B8%89%E8%A7%92%E5%BD%A2%E6%9C%80%E5%B0%8F%E5%91%A8%E9%95%BF/"/>
    <url>/Math/%E7%AD%89%E8%BE%B9-%E4%BB%BB%E6%84%8F%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E5%86%85%E4%B8%89%E8%A7%92%E5%BD%A2%E6%9C%80%E5%B0%8F%E5%91%A8%E9%95%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="等边三角形的内三角形最小周长"><a href="#等边三角形的内三角形最小周长" class="headerlink" title="等边三角形的内三角形最小周长"></a>等边三角形的内三角形最小周长</h2><p>今天弟弟问了一道初中数学题：<br>三角形 ABC 是一个等边三角形，动点 P、M、N 分别在线段 AB、BC、AC 上运动，三角形 ABC 边长是 2，求三角形 PMN 的周长最小值。</p><p><img src="/resources/%E7%AD%89%E8%BE%B9-%E4%BB%BB%E6%84%8F%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E5%86%85%E4%B8%89%E8%A7%92%E5%BD%A2%E6%9C%80%E5%B0%8F%E5%91%A8%E9%95%BF/img/equilateral_triangle.jpeg" alt="equilateral_triangle"></p><p>题目可以概括为 <strong>等边三角形的内三角形最小周长</strong>，其解题思路和将军饮马问题一脉相承。</p><p>在解答这道题之前，可先尝试解答其更通用的形式：<strong>任意三角形的内三角形最小周长</strong>。</p><h2 id="任意三角形的内三角形最小周长"><a href="#任意三角形的内三角形最小周长" class="headerlink" title="任意三角形的内三角形最小周长"></a>任意三角形的内三角形最小周长</h2><div class="note note-primary">            <p>思路源于知乎专栏 <a href="https://zhuanlan.zhihu.com/p/112601281">https://zhuanlan.zhihu.com/p/112601281</a>。</p>          </div><p><strong>结论：</strong><br>满足最小周长条件的三角形三个点都是原三角形三个顶点过其对边引的垂线的垂足。</p><p><img src="/resources/%E7%AD%89%E8%BE%B9-%E4%BB%BB%E6%84%8F%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E5%86%85%E4%B8%89%E8%A7%92%E5%BD%A2%E6%9C%80%E5%B0%8F%E5%91%A8%E9%95%BF/img/solution.png" alt="solution"></p><p>$$<br>\begin{align*}<br>&amp; 作 CD \bot AB；\newline<br>&amp; D^{‘} 和 D^{‘}_1 分别是点 D 关于 BC 和 AC 的轴对称点； \newline<br>&amp; CG 是 D^{‘} D^{‘}_1 的垂线 \newline<br>\newline<br>证明：&amp; \because D^{‘} 是点 D 关于 BC 的轴对称点 \newline<br>&amp; \therefore CD &#x3D; CD^{‘} \newline<br>同理 &amp; \because D^{‘}_1 是点 D 关于 AC 的轴对称点 \newline<br>&amp; \therefore CD &#x3D; CD^{‘}_1 \newline<br>&amp; \therefore CD^{‘} &#x3D; CD^{‘}_1 \newline<br>&amp; \therefore \angle CD^{‘}G &#x3D; CD^{‘}_1G \newline<br>又 &amp; \because CG 是 D^{‘} D^{‘}_1 的垂线 \newline<br>&amp; \therefore D^{‘}G &#x3D; CD^{‘}cos \angle CD^{‘}G, D^{‘}_1G &#x3D; CD^{‘}_1cos \angle CD^{‘}_1G \newline<br>&amp; \therefore D^{‘}D^{‘}_1 &#x3D; 2D^{‘}G &#x3D; 2CD^{‘}cos \angle CD^{‘}G &#x3D; 2CDcos \angle CD^{‘}G \newline<br>\newline<br>&amp; 已知 \because \angle ECF 一定 \newline<br>&amp; \therefore \angle CEF + \angle CFE 一定 \newline<br>&amp; \therefore \angle D^{‘}CE + \angle CD^{‘}G + \angle D^{‘}_1CF + \angle CD^{‘}_1G 一定 \newline<br>又 &amp; \angle ECF 一定 \newline<br>&amp; \therefore \angle DCE + \angle DCF 一定 \newline<br>&amp; \because D^{‘} 和 D^{‘}_1 分别是点 D 关于 BC 和 AC 的轴对称点 \newline<br>&amp; \therefore \angle DCE &#x3D; \angle D^{‘}CE, \angle DCF &#x3D; \angle D^{‘}_1CF \newline<br>&amp; \therefore \angle D^{‘}CE + \angle D^{‘}_1CF 一定 \newline<br>&amp; \therefore \angle CD^{‘}G + \angle CD^{‘}_1G 一定，且已证 \angle CD^{‘}G &#x3D; CD^{‘}_1G \newline<br>&amp; \therefore \angle CD^{‘}G 一定 \newline<br>\newline<br>又 &amp; \because D^{‘} 和 D^{‘}_1 分别是点 D 关于 BC 和 AC 的轴对称点 \newline<br>&amp; \therefore ED &#x3D; ED^{‘}, FD &#x3D; FD^{‘}_1 \newline<br>&amp; \therefore C_\triangle DEF &#x3D; ED + EF + FD &#x3D; ED^{‘} + EF + FD^{‘}_1 &#x3D; D^{‘}D^{‘}_1 &#x3D; 2CDcos \angle CD^{‘}G \newline<br>\newline<br>&amp; \because CD \bot AB \newline<br>&amp; \therefore 此时点 D 满足 CD 为最短线段，且已证 \angle CD^{‘}G 一定 \newline<br>&amp; \therefore 此时 C_\triangle DEF 最小 \newline<br>\end{align*}<br>$$</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在完成上述证明后，取一特殊情况，即该三角形为等边三角形，那么满足最小周长条件的目标三角形的三个点正好位于其所在线段的中点。</p>]]></content>
    
    
    <categories>
      
      <category>math</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
      <tag>triangle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Configure iTerm2 and Zsh</title>
    <link href="/Configuration/iTerm2/Configure-iTerm2-and-Zsh/"/>
    <url>/Configuration/iTerm2/Configure-iTerm2-and-Zsh/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>To configure the environments as below:</p><ul><li><code>Oh My Zsh</code></li><li><code>Powerline</code> font</li><li><code>agnoster</code> theme</li><li>Zsh extensions<ul><li><code>zsh-syntax-highlighting</code></li><li><code>zsh-autosuggestions</code></li></ul></li></ul>          </div><h2 id="Install-Oh-My-Zsh"><a href="#Install-Oh-My-Zsh" class="headerlink" title="Install Oh My Zsh"></a>Install <code>Oh My Zsh</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span><br><span class="hljs-comment"># Or</span><br>sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)</span>&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Set-Theme"><a href="#Set-Theme" class="headerlink" title="Set Theme"></a>Set Theme</h2><p>Open <code>~/.zhsrc</code>, set <code>ZSH_THEME</code> as <code>agnoster</code>.</p><p><img src="/resources/Configure-iTerm2-zsh/img/theme.jpeg" alt="theme"></p><div class="note note-info">            <ul><li><strong>Official Website:</strong> <a href="https://ohmyz.sh/">https://ohmyz.sh/</a></li><li><strong>Github:</strong> <a href="https://github.com/ohmyzsh/ohmyzsh">https://github.com/ohmyzsh/ohmyzsh</a></li></ul>          </div><h2 id="Set-iTerm2-Colors"><a href="#Set-iTerm2-Colors" class="headerlink" title="Set iTerm2 Colors"></a>Set iTerm2 Colors</h2><p>Open iTerm2 and open its <code>Preferences...</code> or press <code>⌘</code> + <code>,</code>, follow the path <code>Profiles &gt; Open Profiles &gt; Edit Profiles &gt; Colors</code> and select a color.</p><p><img src="/resources/Configure-iTerm2-zsh/img/iTerm2_colors.jpeg" alt="Colors"></p><h2 id="Install-amp-Set-Powerline-font"><a href="#Install-amp-Set-Powerline-font" class="headerlink" title="Install &amp; Set Powerline font"></a>Install &amp; Set <code>Powerline</code> font</h2><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/powerline/fonts.git --depth=1<br><span class="hljs-built_in">cd</span> fonts<br>./install.sh<br></code></pre></td></tr></table></figure><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>From <code>Profiles &gt; Open Profiles &gt; Edit Profiles &gt; Text</code> of iTerm2’s preferences, set font as <code>Powerline</code>.</p><p><img src="/resources/Configure-iTerm2-zsh/img/iTerm2_font.jpeg" alt="iTerm2 font"></p><h2 id="Set-Transparency-amp-Background"><a href="#Set-Transparency-amp-Background" class="headerlink" title="Set Transparency &amp; Background"></a>Set Transparency &amp; Background</h2><p>From <code>Profiles &gt; Open Profiles &gt; Edit Profiles &gt; Window</code> of iTerm2’s preferences, set transparency and background.</p><p><img src="/resources/Configure-iTerm2-zsh/img/iTerm2_background.jpeg" alt="iTerm2 transparency &amp; background"></p><h2 id="Install-Zsh-Extensions"><a href="#Install-Zsh-Extensions" class="headerlink" title="Install Zsh Extensions"></a>Install Zsh Extensions</h2><ol><li><p>Install from official website.</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="hljs-variable">$ZSH_CUSTOM</span>/plugins/zsh-syntax-highlighting<br>git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions.git <span class="hljs-variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions<br></code></pre></td></tr></table></figure><blockquote><p><code>$ZSH_CUSTOM</code> is <code>~/.oh-my-zsh/custom</code>.</p></blockquote></li><li><p>Open <code>~/.zshrc</code>, find <code>plugins</code> and change it.</p> <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim"># Which plugins would you like <span class="hljs-keyword">to</span> load?<br># Standard plugins can <span class="hljs-keyword">be</span> found in $ZSH/plugins/<br># Custom plugins may <span class="hljs-keyword">be</span> added <span class="hljs-keyword">to</span> $ZSH_CUSTOM/plugins/<br># Example format: plugins=(rails git textmate <span class="hljs-keyword">ruby</span> lighthouse)<br># Add wisely, <span class="hljs-keyword">as</span> too many plugins slow down <span class="hljs-keyword">shell</span> startup.<br>plugins=(git zsh-<span class="hljs-keyword">syntax</span>-highlighting zsh-autosuggestions)<br></code></pre></td></tr></table></figure></li><li><p>Activate</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure></li></ol><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://mp.weixin.qq.com/s/3Uh3CwZwxko8tiB1yEYj7Q">https://mp.weixin.qq.com/s/3Uh3CwZwxko8tiB1yEYj7Q</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>configuration</category>
      
      <category>iterm2</category>
      
      <category>zsh</category>
      
    </categories>
    
    
    <tags>
      
      <tag>configuration</tag>
      
      <tag>iterm2</tag>
      
      <tag>zsh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Introduction to C++20 Coroutines - Part 1 Generator</title>
    <link href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-1-Generator/"/>
    <url>/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-1-Generator/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p><strong>This series is related to C++20 coroutine.</strong></p><p><strong>part 1: Generator</strong><br><a href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-2-co-await-co-return">part 2: co_await&#x2F;co_return</a><br><a href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-3-Some-tips-in-practice">part 3: Some tips about life cycle when using coroutines</a><br><a href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-4-Some-examples-about-co-await">part 4: Some examples about co_await</a><br><a href="/Dev/C++/STL/Coroutine/Introduction-to-C-20-Coroutines-Part-5-stackful-stackless-and-Symmetric-Transfer">part 5: stackful&#x2F;stackless and Symmetric Transfer</a></p>          </div><p>Why corouties were imported in C++20? In order to explain it, we could begin with some examples about Fibonacci sequences.</p><h2 id="Fibonacci"><a href="#Fibonacci" class="headerlink" title="Fibonacci"></a>Fibonacci</h2><p>At the beginning, we can write down code like below.</p><h3 id="0"><a href="#0" class="headerlink" title="0"></a>0</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">get_fibonacci</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; v;<br>    v.<span class="hljs-built_in">reserve</span>(n);<br><br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>, b = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        v.<span class="hljs-built_in">push_back</span>(b);<br>        <span class="hljs-type">int</span> sum = a + b;<br>        a = b;<br>        b = sum;<br>    &#125;<br>    <span class="hljs-keyword">return</span> v;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; v = <span class="hljs-built_in">get_fibonacci</span>(<span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : v) &#123;<br>        std::cout &lt;&lt; i &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>This function receives an integer that indicates the size of the Fibonacci sequence needed.</p><p>However, there are a few disadvantages:</p><ol><li>It returns an vector to store the temporary result, and the vector is just for traversalling once. The occupied space of this temporary vector can’t be ignored in case the needed size of sequence is pretty large.</li><li>It can’t support the occasion if we would like to get an infinite sequence.</li></ol><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">generate_fibonacci</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>, b = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> sum = a + b;<br>    a = b;<br>    b = sum;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;<br>        std::cout &lt;&lt; <span class="hljs-built_in">generate_fibonacci</span>() &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>As the code rewritten, it fixes the issues above with static variables. It not only uses minimum occupied space, but also supports for generating an infinite sequence.</p><p>But it still looks not enough to be considered as perfect. <strong>If we would like to get multiple independent sequences?</strong> After all, static variables can be initialized just once, and they have own states afterward.</p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FibonacciGenerator</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-type">int</span> sum = a + b;<br>        a = b;<br>        b = sum;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> a&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> b&#123;<span class="hljs-number">1</span>&#125;;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    FibonacciGenerator fibonacci_generator;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;<br>        std::cout &lt;&lt; fibonacci_generator.<span class="hljs-built_in">next</span>() &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>From the thought about states, we can easily to encapsulate them in a generator class and update their states within the generator’s member function.</p><h2 id="Bring-Coroutines-in"><a href="#Bring-Coroutines-in" class="headerlink" title="Bring Coroutines in"></a>Bring Coroutines in</h2><p>The states look easy to update because the context is simple. Trouble is coming if we have to do something with complicated context such as throw elements from two or even more vectors in a particular order like round robin. In many cases, we need to maintain the update of various states even a state machine.</p><p>Coroutines are brought in to reduce the cost of mantaining various states so that we focus on the work code itself.</p><h2 id="Coroutines-in-Python"><a href="#Coroutines-in-Python" class="headerlink" title="Coroutines in Python"></a>Coroutines in Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> Generator<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">finonacci</span>() -&gt; Generator[<span class="hljs-built_in">int</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>]:<br>    a, b = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        a, b = b, a + b<br>        <span class="hljs-keyword">yield</span> a<br><br><br>fibonacci_gen = finonacci()<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(fibonacci_gen))<br></code></pre></td></tr></table></figure><p>When <code>finonacci()</code> is called, the generator is returned but the function doesn’t start to run yet. When <code>next(fibonacci_gen)</code> is called every time, the execution inside the <code>finonacci</code> function runs until it encounters the keyword <code>yield</code>. It stores the current execution, suspends and returns to the outside execution. After <code>next(fibonacci_gen)</code> is called again, the execution inside the <code>finonacci</code> function will resume and continue to run until it encounters the keyword <code>yield</code> again.</p><p>The execution workflow is actually controlled with the help of compiler.</p><h2 id="Coroutines-in-C"><a href="#Coroutines-in-C" class="headerlink" title="Coroutines in C++"></a>Coroutines in C++</h2><h3 id="Declaration-of-coroutine"><a href="#Declaration-of-coroutine" class="headerlink" title="Declaration of coroutine"></a>Declaration of coroutine</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">fibonacci_generator <span class="hljs-title">fibonacci</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>, b = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-type">int</span> sum = a + b;<br>        a = b;<br>        b = sum;<br><br>        <span class="hljs-keyword">co_yield</span> a;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>The declaration of coroutines in C++ is similar to Python, and the execution flow is also easy to understand. Isn’t it?</p><p>There are 3 keywords <code>co_yield</code> <code>co_await</code> <code>co_return</code> are brought in in C++20. Once there are keywords among them occur in a scope, it’s actually a coroutine rather than a subroutine used in traditional C++. We only use <code>co_yield</code> here.</p><p>Now we definitely have at least 2 questions:</p><ol><li>How to implement <code>fibonacci_generator</code>?</li><li>How to use <code>fibonacci()</code>?</li></ol><p>I will explain them on by one.</p><h3 id="Implementation-of-generators"><a href="#Implementation-of-generators" class="headerlink" title="Implementation of generators"></a>Implementation of generators</h3><p>Apart from subroutines we are familiar with, the return type of coroutines must be written in a particular standard, otherwise it won’t pass compiling. Let’s follow the complaint from compiler to fill the needed contents little by little.</p><div class="note note-info">            <p>The below code is compiled under <code>gcc 11.3.0</code>.</p>          </div><div class="note note-warning">            <p>So far (March 2023), some compilers don’t provide complete support about coroutines. For instance, in clang, header file about coroutine is <code>&lt;experimental/coroutine&gt;</code>, and components about coroutine are in namespace <code>std::experimental</code>.</p>          </div><h4 id="Declaration-of-fibonacci-generator"><a href="#Declaration-of-fibonacci-generator" class="headerlink" title="Declaration of fibonacci_generator"></a>Declaration of <code>fibonacci_generator</code></h4><p>Assume we write the definition of <code>fibonacci_generator</code>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;coroutine&gt;</span> <span class="hljs-comment">// It wouldn&#x27;t be written in the code snippet afterwards</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">fibonacci_generator</span> &#123;&#125;;<br></code></pre></td></tr></table></figure><p>There is a complaint from compiler:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs log">class &quot;std::__n4861::coroutine_traits&lt;fibonacci_generator, int&gt;&quot; has no member &quot;promise_type&quot;<br></code></pre></td></tr></table></figure><p>Add a struct or class <code>promise_type</code> in <code>fibonacci_generator</code>.</p><h4 id="Declaration-of-promise-type"><a href="#Declaration-of-promise-type" class="headerlink" title="Declaration of promise_type"></a>Declaration of <code>promise_type</code></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">fibonacci_generator</span> &#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">promise_type</span> &#123;&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>There are several complaints from compiler:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs log">no member named &#x27;initial_suspend&#x27; in &#x27;std::__n4861::__coroutine_traits_impl&lt;fibonacci_generator, void&gt;::promise_type&#x27; &#123;aka &#x27;fibonacci_generator::promise_type&#x27;&#125;<br>no member named &#x27;unhandled_exception&#x27; in &#x27;std::__n4861::__coroutine_traits_impl&lt;fibonacci_generator, void&gt;::promise_type&#x27; &#123;aka &#x27;fibonacci_generator::promise_type&#x27;&#125;<br>no member named &#x27;final_suspend&#x27; in &#x27;std::__n4861::__coroutine_traits_impl&lt;fibonacci_generator, void&gt;::promise_type&#x27; &#123;aka &#x27;fibonacci_generator::promise_type&#x27;&#125;<br>no member named &#x27;get_return_object&#x27; in &#x27;std::__n4861::__coroutine_traits_impl&lt;fibonacci_generator, void&gt;::promise_type&#x27; &#123;aka &#x27;fibonacci_generator::promise_type&#x27;&#125;<br>no member named &#x27;yield_value&#x27; in &#x27;std::__n4861::__coroutine_traits_impl&lt;fibonacci_generator, void&gt;::promise_type&#x27; &#123;aka &#x27;fibonacci_generator::promise_type&#x27;&#125;<br></code></pre></td></tr></table></figure><h4 id="Definition-of-promise-type"><a href="#Definition-of-promise-type" class="headerlink" title="Definition of promise_type"></a>Definition of <code>promise_type</code></h4><p>Since there are a few functions and contents, let me fill them in and explain them in comments.</p><blockquote><p>In order to distinguish the execution time, I add some output to help understand.</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">fibonacci_generator</span> &#123;<br>    <span class="hljs-comment">// The functionality of `promise_type`:</span><br>    <span class="hljs-comment">// 1. Stores context.</span><br>    <span class="hljs-comment">// 2. Controls suspension and resumption by implementing the following functions</span><br>    <span class="hljs-comment">//    `get_return_object` `initial_suspend` `final_suspend` `yield_value`.</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">promise_type</span> &#123;<br>        <span class="hljs-built_in">promise_type</span>() &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;promise_type()&quot;</span> &lt;&lt; std::endl;<br>        &#125;<br>        ~<span class="hljs-built_in">promise_type</span>() &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;~promise_type() &quot;</span> &lt;&lt; std::endl;<br>        &#125;<br><br>        <span class="hljs-type">int</span> current_&#123;<span class="hljs-number">0</span>&#125;;  <span class="hljs-comment">// store the state/value</span><br><br>        <span class="hljs-comment">// Execute when the coroutine begins and to generate the result object at a particular memory space.</span><br>        <span class="hljs-comment">// Return this object when the coroutine returns.</span><br>        <span class="hljs-function">fibonacci_generator <span class="hljs-title">get_return_object</span><span class="hljs-params">()</span> </span>&#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;fibonacci_generator::promise_type::get_return_object&quot;</span> &lt;&lt; std::endl;<br>            <span class="hljs-keyword">return</span> std::coroutine_handle&lt;promise_type&gt;::<span class="hljs-built_in">from_promise</span>(<br>                *<span class="hljs-keyword">this</span>);  <span class="hljs-comment">// convert implicitly from `std::coroutine_handle&lt;promise_type&gt;` to `fibonacci_generator`</span><br>        &#125;<br><br>        <span class="hljs-comment">// Execute when the coroutine begins.</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">// 1) If its return type is `std::suspend_always`, the coroutine suspends and the execution returns to outside.</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">// 2) If its return type is `std::suspend_never`, after coroutine begins, it continues to run until encounters</span><br>        <span class="hljs-comment">//    keywords about coroutine Its return type can be customized flexibly as long as it implements the functions</span><br>        <span class="hljs-comment">//    `await_ready` `await_suspend` `await_resume`.</span><br>        <span class="hljs-function">std::suspend_always <span class="hljs-title">initial_suspend</span><span class="hljs-params">()</span> </span>&#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;fibonacci_generator::promise_type::initial_suspend&quot;</span> &lt;&lt; std::endl;<br>            <span class="hljs-keyword">return</span> &#123;&#125;;<br>        &#125;<br><br>        <span class="hljs-comment">// Execute when the coroutine ends (`co_return` is called or arrives the end of the scope).</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">// 1) If its return type is `std::suspend_always`, it will keep the context of coroutine and `promise_type`</span><br>        <span class="hljs-comment">//    object alive and give control of the release to user.</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">// 2) If its return type is `std::suspend_never`, it will release them automatically.</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">//     a) After that, if user tries to access `promise_type` object, it means it will access wild resources.</span><br>        <span class="hljs-comment">//        It should be avoided by user self.</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">//     b) After that, if user tries to call `handle_.destroy()`, it will release resource secondly like</span><br>        <span class="hljs-comment">//        double free. It should also be avoided.</span><br>        <span class="hljs-function">std::suspend_always <span class="hljs-title">final_suspend</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;fibonacci_generator::promise_type::final_suspend&quot;</span> &lt;&lt; std::endl;<br>            <span class="hljs-keyword">return</span> &#123;&#125;;<br>        &#125;<br><br>        <span class="hljs-comment">// Execute when `co_yield` is called in the coroutine.</span><br>        <span class="hljs-comment">// It receives the input value from `co_yield` and we can store values or update states.</span><br>        <span class="hljs-function">std::suspend_always <span class="hljs-title">yield_value</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> </span>&#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;fibonacci_generator::promise_type::yield_value&quot;</span> &lt;&lt; std::endl;<br>            current_ = value;<br>            <span class="hljs-keyword">return</span> &#123;&#125;;<br>        &#125;<br><br>        <span class="hljs-comment">// Process in case there is exception thrown from coroutine</span><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">unhandled_exception</span><span class="hljs-params">()</span> </span>&#123;<br>            std::<span class="hljs-built_in">terminate</span>();<br>        &#125;<br>    &#125;;<br><br>    std::coroutine_handle&lt;promise_type&gt; handle_;  <span class="hljs-comment">// the handle of coroutine</span><br><br>    <span class="hljs-built_in">fibonacci_generator</span>(std::coroutine_handle&lt;promise_type&gt; handle) : handle_&#123;handle&#125; &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;fibonacci_generator()&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br><br>    ~<span class="hljs-built_in">fibonacci_generator</span>() &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;~fibonacci_generator()&quot;</span> &lt;&lt; std::endl;<br><br>        std::cout &lt;&lt; <span class="hljs-string">&quot;before handle_.destroy()&quot;</span> &lt;&lt; std::endl;<br>        handle_.<span class="hljs-built_in">destroy</span>();<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;after handle_.destroy()&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>The form of <code>promise_type</code> is specified by compiler. We can consider it an interface from compiler and we must implement it with its form.</p><p>Imagine a simmilar case. If we would like to make an object iterable, we must make it provide some specified functions <code>begin()</code>, <code>end()</code> and make its iterator provide <code>operator++()</code>, <code>operator!=</code> and <code>operator*()</code>. Only in this way the functionality could be implemented.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Container</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Iterator</span> &#123;<br>        Iterator&amp; <span class="hljs-keyword">operator</span>++() &#123;...&#125;<br>        <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(<span class="hljs-type">const</span> Iterator&amp; other) <span class="hljs-type">const</span> &#123;...&#125;<br>        <span class="hljs-keyword">auto</span> <span class="hljs-keyword">operator</span>*() &#123;...&#125;<br>    &#125;;<br><br>    <span class="hljs-function">Iterator <span class="hljs-title">begin</span><span class="hljs-params">()</span> </span>&#123;...&#125;<br>    <span class="hljs-function">Iterator <span class="hljs-title">end</span><span class="hljs-params">()</span> </span>&#123;...&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Usage-of-fibonacci-generator"><a href="#Usage-of-fibonacci-generator" class="headerlink" title="Usage of fibonacci_generator"></a>Usage of <code>fibonacci_generator</code></h3><p>Before we use <code>fibonacci_generator</code>, add a member function <code>operator()</code> into it to call it like a function calling.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">fibonacci_generator</span> &#123;<br>    <span class="hljs-comment">// Other members...</span><br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">()</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;fibonacci_generator::operator()&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">if</span> (!handle_.<span class="hljs-built_in">done</span>()) &#123;<br>            handle_.<span class="hljs-built_in">resume</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> handle_.<span class="hljs-built_in">promise</span>().current_;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">fibonacci_generator <span class="hljs-title">fib</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>, b = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-type">int</span> sum = a + b;<br>        a = b;<br>        b = sum;<br><br>        std::cout &lt;&lt; <span class="hljs-string">&quot;before co_yield&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">co_yield</span> a;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;after co_yield&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;-----------------------------------before fib()&quot;</span> &lt;&lt; std::endl;<br>    fibonacci_generator f = <span class="hljs-built_in">fib</span>();<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;-----------------------------------after fib()&quot;</span> &lt;&lt; std::endl;<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;-----------------------------------loop begins&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;-----------------------------------begin: &quot;</span> &lt;&lt; i &lt;&lt; std::endl;<br>        std::cout &lt;&lt; <span class="hljs-built_in">f</span>() &lt;&lt; std::endl;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;-----------------------------------end: &quot;</span> &lt;&lt; i &lt;&lt; std::endl;<br>    &#125;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;-----------------------------------loop ends&quot;</span> &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs log">-----------------------------------before fib()<br>promise_type()<br>fibonacci_generator::promise_type::get_return_object<br>fibonacci_generator()<br>fibonacci_generator::promise_type::initial_suspend<br>-----------------------------------after fib()<br>-----------------------------------loop begins<br>-----------------------------------begin: 0<br>fibonacci_generator::operator()<br>fib()<br>before co_yield<br>fibonacci_generator::promise_type::yield_value<br>1<br>-----------------------------------end: 0<br>-----------------------------------begin: 1<br>fibonacci_generator::operator()<br>after co_yield<br>before co_yield<br>fibonacci_generator::promise_type::yield_value<br>1<br>-----------------------------------end: 1<br>-----------------------------------begin: 2<br>fibonacci_generator::operator()<br>after co_yield<br>before co_yield<br>fibonacci_generator::promise_type::yield_value<br>2<br>-----------------------------------end: 2<br>-----------------------------------loop ends<br>~fibonacci_generator()<br>before handle_.destroy()<br>~promise_type() <br>after handle_.destroy()<br></code></pre></td></tr></table></figure><div class="note note-primary">            <p>To understand the life cycle of coroutines or other cases, there is a useful method to insert some output at the beginning and the end of functions and other any necessary locations. :)</p>          </div><h2 id="More-Explanations"><a href="#More-Explanations" class="headerlink" title="More Explanations"></a>More Explanations</h2><h3 id="1-How-to-understand-promise-type"><a href="#1-How-to-understand-promise-type" class="headerlink" title="1. How to understand promise_type?"></a>1. How to understand <code>promise_type</code>?</h3><p>It indicates the situation of the coroutine. It’s like a controller that not only stores states and context but also controls coroutine’s suspension and resumption.</p><h3 id="2-How-to-understand-coroutine-handle"><a href="#2-How-to-understand-coroutine-handle" class="headerlink" title="2. How to understand coroutine_handle?"></a>2. How to understand <code>coroutine_handle</code>?</h3><p>As the name implies, it’s a handle to a coroutine. Haha…</p><p>I have an informal idea to understand it. We might consider it as the pointer to the coroutine. <code>coroutine_handle&lt;&gt;</code> points to the coroutine itself and <code>coroutine_handle&lt;promise_type&gt;</code> points to the <code>promise_type</code> object.</p><ul><li>With <code>coroutine_handle&lt;promise_type&gt;</code> we’are able to access the <code>promise_type</code> to read or write states inside the return type(<code>fibonacci_generator</code> is the return type in above example) or even outside the coroutine.</li><li>We can just use <code>coroutine_handle&lt;&gt;</code> if we don’t need to access any states of the coroutine.</li></ul><h3 id="3-How-to-release-coroutine-safely"><a href="#3-How-to-release-coroutine-safely" class="headerlink" title="3. How to release coroutine safely?"></a>3. How to release coroutine safely?</h3><ol><li>Carefully consider the return type of <code>initial_suspend</code> set as <code>std::suspend_always</code> <code>std::suspend_never</code> or other custom schema.</li><li>Sometimes we need to access states in the coroutine as the coroutine has ended, we must set the return type of <code>final_suspend</code> as <code>std::suspend_always</code>, otherwise they’re actually wild resources which are unsafe. At the same time, place <code>handle_.destroy()</code> at the destructor of the return type with RAII.</li><li>Note that never call <code>handle_.destroy()</code> if the return type of <code>final_suspend</code> as <code>std::suspend_never</code>.</li><li>It’s better to estimate whether the coroutine is done via <code>handle_.done()</code> or not when it’s called every time. It’s callable only if it isn’t done.</li></ol><h3 id="4-Construct-promise-type-with-parameters"><a href="#4-Construct-promise-type-with-parameters" class="headerlink" title="4. Construct promise_type with parameters"></a>4. Construct <code>promise_type</code> with parameters</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">fibonacci_generator</span> &#123;<br>    <span class="hljs-comment">// Other members...</span><br><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">promise_type</span> &#123;<br>        <span class="hljs-built_in">promise_type</span>(<span class="hljs-type">int</span> dummy) &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;promise_type() dummy = &quot;</span> &lt;&lt; dummy &lt;&lt; std::endl;<br>        &#125;<br>    &#125;;<br>&#125;;<br><br><span class="hljs-function">fibonacci_generator <span class="hljs-title">fib</span><span class="hljs-params">(<span class="hljs-type">int</span> dummy)</span> </span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>It can be understanded that the coroutine is initialized by some parameters.</p><h3 id="5-Abstract-Workflow"><a href="#5-Abstract-Workflow" class="headerlink" title="5. Abstract Workflow"></a>5. Abstract Workflow</h3><p>The abstract workflow of coroutine is below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs log">&#123;<br>    promise-type promise(promise-constructor-arguments); <br>    try &#123;<br>        co_await promise.initial_suspend(); // The first suspension after created<br>        function-body<br>    &#125; catch ( ... ) &#123;<br>        if (!initial-await-resume-called)<br>        throw; <br>        promise.unhandled_exception(); <br>    &#125;<br><br>final-suspend:<br>    co_await promise.final_suspend(); // The last suspension<br>&#125;<br></code></pre></td></tr></table></figure><p>If we ignore exception handler, it can be simplified as below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs log">&#123;<br>    promise-type promise; <br><br>    co_await promise.initial_suspend(); <br><br>    function-body<br><br>final-suspend:<br>    co_await promise.final_suspend(); <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-the-Perspective-of-co-yield-as-Syntax-Sugar"><a href="#6-the-Perspective-of-co-yield-as-Syntax-Sugar" class="headerlink" title="6. the Perspective of co_yield as Syntax Sugar"></a>6. the Perspective of <code>co_yield</code> as Syntax Sugar</h3><p><code>co_yield x</code> is equivalent to <code>co_await promise.yield_value(x)</code>.</p><h2 id="Example-Pop-up-elements-from-multiple-vectors"><a href="#Example-Pop-up-elements-from-multiple-vectors" class="headerlink" title="Example: Pop up elements from multiple vectors"></a>Example: Pop up elements from multiple vectors</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;coroutine&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">pop_up_generator</span> &#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">promise_type</span> &#123;<br>        <span class="hljs-built_in">promise_type</span>() &#123;<br>        &#125;<br><br>        <span class="hljs-type">int</span> current_&#123;<span class="hljs-number">0</span>&#125;;<br><br>        <span class="hljs-function">pop_up_generator <span class="hljs-title">get_return_object</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> std::coroutine_handle&lt;promise_type&gt;::<span class="hljs-built_in">from_promise</span>(*<span class="hljs-keyword">this</span>);<br>        &#125;<br><br>        <span class="hljs-function">std::suspend_always <span class="hljs-title">initial_suspend</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> &#123;&#125;;<br>        &#125;<br><br>        <span class="hljs-function">std::suspend_always <span class="hljs-title">final_suspend</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> &#123;&#125;;<br>        &#125;<br><br>        <span class="hljs-function">std::suspend_always <span class="hljs-title">yield_value</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> </span>&#123;<br>            current_ = value;<br>            <span class="hljs-keyword">return</span> &#123;&#125;;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">unhandled_exception</span><span class="hljs-params">()</span> </span>&#123;<br>            std::<span class="hljs-built_in">terminate</span>();<br>        &#125;<br>    &#125;;<br><br>    std::coroutine_handle&lt;promise_type&gt; handle_;<br><br>    <span class="hljs-built_in">pop_up_generator</span>(std::coroutine_handle&lt;promise_type&gt; handle) : handle_&#123;handle&#125; &#123;<br>    &#125;<br><br>    ~<span class="hljs-built_in">pop_up_generator</span>() &#123;<br>        handle_.<span class="hljs-built_in">destroy</span>();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">done</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!handle_.<span class="hljs-built_in">done</span>()) &#123;<br>            handle_.<span class="hljs-built_in">resume</span>();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> handle_.<span class="hljs-built_in">done</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> handle_.<span class="hljs-built_in">promise</span>().current_;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function">pop_up_generator <span class="hljs-title">pop_up</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt; a, std::vector&lt;<span class="hljs-type">int</span>&gt; b)</span> </span>&#123;<br>    <span class="hljs-keyword">auto</span> a_it = a.<span class="hljs-built_in">begin</span>(), b_it = b.<span class="hljs-built_in">begin</span>();<br><br>    <span class="hljs-keyword">while</span> (a_it != a.<span class="hljs-built_in">end</span>() || b_it != b.<span class="hljs-built_in">end</span>()) &#123;<br>        <span class="hljs-keyword">if</span> (a_it != a.<span class="hljs-built_in">end</span>()) &#123;<br>            <span class="hljs-keyword">co_yield</span> *a_it;<br>            ++a_it;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (b_it != b.<span class="hljs-built_in">end</span>()) &#123;<br>            <span class="hljs-keyword">co_yield</span> *b_it;<br>            ++b_it;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; a&#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>&#125;;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; b&#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>&#125;;<br><br>    pop_up_generator pop_up_gen = <span class="hljs-built_in">pop_up</span>(a, b);<br>    <span class="hljs-keyword">while</span> (!pop_up_gen.<span class="hljs-built_in">done</span>()) &#123;<br>        std::cout &lt;&lt; <span class="hljs-built_in">pop_up_gen</span>() &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p>The sub items below are where coroutines can be used.</p></blockquote><ul><li><a href="https://www.youtube.com/watch?v=ImLFlLjSveM">How C++20 Changes the Way We Write Code - Timur Doumler - CppCon 2020</a><ul><li>Generator</li><li>Compiler</li></ul></li><li><a href="https://www.youtube.com/watch?v=8sEe-4tig_A">C++20’s Coroutines for Beginners - Andreas Fertig - CppCon 2022</a></li><li><a href="https://www.youtube.com/watch?v=J7fYddslH0Q">Deciphering C++ Coroutines - A Diagrammatic Coroutine Cheat Sheet - Andreas Weis - CppCon 2022</a><ul><li>syncronous <code>read()</code> and asyncronous <code>co_await async_read</code></li></ul></li><li><a href="https://zhuanlan.zhihu.com/p/349210290">知乎专栏: C++20 新特性 协程 Coroutines(1)</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>cpp</category>
      
      <category>stl</category>
      
      <category>coroutine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>stl</tag>
      
      <tag>cpp20</tag>
      
      <tag>coroutine</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>.NET HttpWebRequest Connection Limit</title>
    <link href="/Dev/CSharp/NET-HttpWebRequest-Connection-Limit/"/>
    <url>/Dev/CSharp/NET-HttpWebRequest-Connection-Limit/</url>
    
    <content type="html"><![CDATA[<h2 id="Trap"><a href="#Trap" class="headerlink" title="Trap"></a>Trap</h2><p>Recently I stuck in a trap. There is a performance issue in the project I’m taking responsibility for. There is an interface in the project. As a .NET client, it would send quite a few keys to server and would receive the resources corresponding to the keys one by one.</p><p>Some customers gave us some feedback that the resources fetching costed very long time and it affected customers’ productivity unacceptably. Unfortunately, we’re not able to gain the actual quantity of keys in customers’ usage environment, but fortunately we found a way to reproduce the issue and recorded it by Windows Performance Recorder(WPR) though it costed at least 10 minutes.</p><p>The keys have been separated into multiple groups by every 200 keys as a group. Every group would be sent to server parallelly. From this perspective, the performance issue are beyond our expectations.</p><h2 id="Profiling-Call-Stack"><a href="#Profiling-Call-Stack" class="headerlink" title="Profiling Call Stack"></a>Profiling Call Stack</h2><p>After profiling in Windows Performance Analyzer(WPA), the call stack within threads showed some clues. Many threads’ wait time are pretty long. It means that they are blocked by IO or lock. With further inquiry, in most cases they are blocked inside <code>SendRequest</code> but before the actual request sending. We have to throw a question - what block these threads and make them waiting? Luckily, WPA shows the call stack of the ready thread(s) next to every blocked thread. Every ready thread is recorded at the socket <code>read</code> stage, and they are also blocked at <code>SendRequest</code> by other threads in <code>read</code> shown in the WPA call stack.</p><p>Based on it, I conjectured that the thread leverages a lock and releases the lock in <code>read</code>. After that, the waiting thread would gets the lock and then does sending its request. I have to mention that those threads follow one by one and they construct a dependent chain.</p><p>I suspected there is a thread pool inside the .NET network framework, after all there is a function named <code>WaitOne</code> about thread. However, I couldn’t find any keyword about thread pool by reviewing the code context through the call stack.</p><p>In the end, I noticed the type of request is <code>HttpWebRequest</code> and tried to search it in the Internet. Fortunately, there is another village in the dark.</p><h2 id="HttpWebRequest-Connection-limitation"><a href="#HttpWebRequest-Connection-limitation" class="headerlink" title="HttpWebRequest Connection limitation"></a>HttpWebRequest Connection limitation</h2><p><strong>For <code>HttpWebRequest</code>, it has a concurrent connection limit that is <code>2</code> by default.</strong> It approximates no concurrency! No wonder the pool threads were blocked one by one…</p><p>The solution to fix it isn’t hard. We just need to increase the connection limit to a reasonable value such as <code>512</code>.Actually we have 2 ways to achieve it:</p><h3 id="Adjust-in-Configuration"><a href="#Adjust-in-Configuration" class="headerlink" title="Adjust in Configuration"></a>Adjust in Configuration</h3><ol><li><p>Open the configuration file <code>App.config</code> in the project.</p></li><li><p>The original configuration might be like this:</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">startup</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">supportedRuntime</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;v4.0&quot;</span> <span class="hljs-attr">sku</span>=<span class="hljs-string">&quot;.NETFramework,Version=v4.6&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Add a field scope named <code>connectionManagement</code> and add a value about <code>maxconnection</code>.</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">startup</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">supportedRuntime</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;v4.0&quot;</span> <span class="hljs-attr">sku</span>=<span class="hljs-string">&quot;.NETFramework,Version=v4.6&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">system.net</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">defaultProxy</span> <span class="hljs-attr">enabled</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">proxy</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bypasslist</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">module</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">defaultProxy</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">connectionManagement</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">add</span> <span class="hljs-attr">address</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attr">maxconnection</span>=<span class="hljs-string">&quot;512&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">connectionManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">system.net</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="Adjust-in-Program"><a href="#Adjust-in-Program" class="headerlink" title="Adjust in Program"></a>Adjust in Program</h3><p>Add a line in code like below:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C#">System.Net.ServicePointManager.DefaultConnectionLimit = <span class="hljs-number">512</span>;<br></code></pre></td></tr></table></figure><h2 id="Other-Informations"><a href="#Other-Informations" class="headerlink" title="Other Informations"></a>Other Informations</h2><p>As for <code>HttpClient</code> after .NET 4.5, it seems that it doesn’t have the connection limit. <strong>Note that</strong> it’s different to <code>HttpWebRequest</code>.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://learn.microsoft.com/en-us/dotnet/api/system.net.servicepointmanager.defaultconnectionlimit?view=netframework-4.8#System_Net_ServicePointManager_DefaultConnectionLimit">Microsoft .NET Framework 4.8 Documentation</a></li><li><a href="https://blog.csdn.net/PLA12147111/article/details/105496791">C# 关于HttpWebRequest最大连接数限制,多线程中速度提升解决方案</a></li><li><a href="https://blog.csdn.net/defender_/article/details/91949613">C#多线程环境下调用 HttpWebRequest 并发连接限制</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>csharp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>csharp</tag>
      
      <tag>dot_net</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Some Template Meta Programming Practices</title>
    <link href="/Dev/C++/template/Some-Template-Meta-Programming-Practices/"/>
    <url>/Dev/C++/template/Some-Template-Meta-Programming-Practices/</url>
    
    <content type="html"><![CDATA[<h2 id="A-discovery"><a href="#A-discovery" class="headerlink" title="A discovery"></a>A discovery</h2><p>I found <a href="https://www.zhihu.com/question/593538067/answer/2967552181">a case</a> that struck me.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">temp</span> &#123;<br>    T value;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span>... Ts&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">temp</span> &#123;<br>    temp&lt;T&gt; value_temp;<br>    temp&lt;Ts...&gt; rest_temps;<br>&#125;;<br></code></pre></td></tr></table></figure><p>It can’t pass compiling with a error message - <em>Too many template parameters in template redeclaration</em>.</p><p>It would work if we changed it as below:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span>... Ts&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">temp</span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">temp</span>&lt;T&gt; &#123;<br>    T value;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span>... Ts&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">temp</span> &#123;<br>    temp&lt;T&gt; value_temp;<br>    temp&lt;Ts...&gt; rest_temps;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>The declaration with multiple parameters certainly can be placed at the beginning, as long as you like. :)</p></blockquote><h2 id="Accumulate-the-parameters-in-the-template"><a href="#Accumulate-the-parameters-in-the-template" class="headerlink" title="Accumulate the parameters in the template"></a>Accumulate the parameters in the template</h2><p>I wrote the below code to practice template specialization.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-type">int</span> i, <span class="hljs-type">int</span>... Args&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Sum</span> &#123;<br>    <span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> value = i + Sum&lt;Args...&gt;::value;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-type">int</span> i&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Sum</span>&lt;i&gt; &#123;<br>    <span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> value = i;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::cout &lt;&lt; Sum&lt;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&gt;::value &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Minimum-value"><a href="#Minimum-value" class="headerlink" title="Minimum value"></a>Minimum value</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-type">int</span> i, <span class="hljs-type">int</span>... args&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Min</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> tmp = Min&lt;args...&gt;::value;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> value = i &lt; tmp ? i : tmp;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-type">int</span> i&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Min</span>&lt;i&gt; &#123;<br>    <span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> value = i;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::cout &lt;&lt; Min&lt;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&gt;::value &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>cpp</category>
      
      <category>template</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>template</tag>
      
      <tag>template_meta_programming</tag>
      
      <tag>tmp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>promise/async/packaged_task/shared_future</title>
    <link href="/Dev/C++/STL/promise-async-packaged_task-shared_future/"/>
    <url>/Dev/C++/STL/promise-async-packaged_task-shared_future/</url>
    
    <content type="html"><![CDATA[<h2 id="std-promise"><a href="#std-promise" class="headerlink" title="std::promise"></a><code>std::promise</code></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;chrono&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;future&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">promise_set_value</span><span class="hljs-params">(std::promise&lt;<span class="hljs-type">int</span>&gt;&amp; promise)</span> </span>&#123;<br>    std::this_thread::<span class="hljs-built_in">sleep_for</span>(std::chrono::<span class="hljs-built_in">seconds</span>(<span class="hljs-number">1</span>));<br>    promise.<span class="hljs-built_in">set_value</span>(<span class="hljs-number">100</span>);  <span class="hljs-comment">// future would become ready after promise.set_value()</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::promise&lt;<span class="hljs-type">int</span>&gt; promise;<br>    std::future&lt;<span class="hljs-type">int</span>&gt; future = promise.<span class="hljs-built_in">get_future</span>();<br>    <span class="hljs-function">std::thread <span class="hljs-title">t</span><span class="hljs-params">(&amp;promise_set_value, std::ref(promise))</span></span>;<br>    std::cout &lt;&lt; future.<span class="hljs-built_in">get</span>() &lt;&lt; std::endl;  <span class="hljs-comment">// block</span><br><br>    t.<span class="hljs-built_in">join</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="std-async"><a href="#std-async" class="headerlink" title="std::async"></a><code>std::async</code></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;future&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> from, <span class="hljs-type">int</span> to)</span> </span>&#123;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = from; i &lt; to; ++i) &#123;<br>        ret += i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum_with_multi_thread</span><span class="hljs-params">(<span class="hljs-type">int</span> from, <span class="hljs-type">int</span> to, <span class="hljs-type">size_t</span> thread_num)</span> </span>&#123;<br>    <span class="hljs-type">int</span> count = to - from;<br>    <span class="hljs-type">int</span> count_per_thread = thread_num &gt; <span class="hljs-number">0</span> ? count / thread_num : count;<br>    std::vector&lt;std::future&lt;<span class="hljs-type">int</span>&gt;&gt; v;<br>    <span class="hljs-keyword">for</span> (; from &lt; to; from += count_per_thread) &#123;<br>        v.<span class="hljs-built_in">push_back</span>(std::<span class="hljs-built_in">async</span>(<br>            sum,<br>            from,<br>            from + count_per_thread &gt; to ? to : from + count_per_thread));<br>    &#125;<br><br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;f : v) &#123;<br>        ret += f.<span class="hljs-built_in">get</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="std-packaged-task"><a href="#std-packaged-task" class="headerlink" title="std::packaged_task"></a><code>std::packaged_task</code></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;chrono&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;future&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>&#123;<br>    std::this_thread::<span class="hljs-built_in">sleep_for</span>(std::chrono::<span class="hljs-built_in">seconds</span>(<span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">std::packaged_task&lt;<span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>&gt; <span class="hljs-title">pt</span><span class="hljs-params">(f)</span></span>;<br>    std::future&lt;<span class="hljs-type">int</span>&gt; future = pt.<span class="hljs-built_in">get_future</span>();<br><br>    <span class="hljs-function">std::thread <span class="hljs-title">thread</span><span class="hljs-params">(std::move(pt), <span class="hljs-number">1</span>)</span></span>;<br>    thread.<span class="hljs-built_in">join</span>();<br><br>    <span class="hljs-type">int</span> result = future.<span class="hljs-built_in">get</span>();<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;result: &quot;</span> &lt;&lt; result &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="std-shared-future"><a href="#std-shared-future" class="headerlink" title="std::shared_future"></a><code>std::shared_future</code></h2><p><code>future.get()</code> can be called only once, otherwise there is a segmentation fault.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;future&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::promise&lt;<span class="hljs-type">int</span>&gt; promise;<br><br>    std::future&lt;<span class="hljs-type">int</span>&gt; future = promise.<span class="hljs-built_in">get_future</span>();<br><br>    promise.<span class="hljs-built_in">set_value</span>(<span class="hljs-number">1</span>);<br><br>    std::cout &lt;&lt; future.<span class="hljs-built_in">get</span>() &lt;&lt; std::endl;<br><br>    <span class="hljs-comment">// Segmentation fault when call `future.get()` secondly</span><br>    <span class="hljs-comment">// std::cout &lt;&lt; future.get() &lt;&lt; std::endl;</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>If we have to get the result from the future such as inside multiple threads, we can request for help from <code>std::shared_future</code> whose feature is a little similar to <code>std::shared_ptr</code>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;future&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::promise&lt;<span class="hljs-type">int</span>&gt; promise;<br><br>    std::shared_future&lt;<span class="hljs-type">int</span>&gt; shared_future1 = promise.<span class="hljs-built_in">get_future</span>();<br>    <span class="hljs-comment">// The initialization of `shared_future1` is actually equivalent to the code below:</span><br>    <span class="hljs-comment">// std::future&lt;int&gt; future = promise.get_future();</span><br>    <span class="hljs-comment">// std::shared_future&lt;int&gt; shared_future1 = std::move(future);</span><br>    std::shared_future&lt;<span class="hljs-type">int</span>&gt; shared_future2 = future1;<br><br>    promise.<span class="hljs-built_in">set_value</span>(<span class="hljs-number">1</span>);<br><br>    std::cout &lt;&lt; shared_future1.<span class="hljs-built_in">get</span>() &lt;&lt; std::endl;<br>    std::cout &lt;&lt; shared_future2.<span class="hljs-built_in">get</span>() &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/553377822">C++多线程编程：期望future</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>cpp</category>
      
      <category>stl</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>cpp11</tag>
      
      <tag>multi_thread</tag>
      
      <tag>promise</tag>
      
      <tag>future</tag>
      
      <tag>packaged_task</tag>
      
      <tag>shared_future</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vtable, type_info and RTTI</title>
    <link href="/Dev/C++/Miscellaneous/vtable-type-info-and-RTTI/"/>
    <url>/Dev/C++/Miscellaneous/vtable-type-info-and-RTTI/</url>
    
    <content type="html"><![CDATA[<p>vtable’s concept is familiar to us, as well as <code>type_info</code>. They are different sides of implementation of RTTI - Runtime Type Identification.With them, we can get the real type of an object and call overwritten functions.</p><p>For understanding their memory distribution, let’s go through an example.</p><h2 id="vtable-x2F-type-info-Example"><a href="#vtable-x2F-type-info-Example" class="headerlink" title="vtable&#x2F;type_info Example"></a>vtable&#x2F;type_info Example</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> i&#123;<span class="hljs-number">1</span>&#125;;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">func1</span><span class="hljs-params">()</span> </span>&#123; std::cout &lt;&lt; <span class="hljs-string">&quot;func1, this: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span> &lt;&lt; std::endl; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">int</span> <span class="hljs-title">func2</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">auto</span> base = <span class="hljs-keyword">new</span> Base;<br>    base-&gt;<span class="hljs-built_in">func1</span>();<br><br>    <span class="hljs-type">void</span>*** vtable_ptr_addr = (<span class="hljs-type">void</span>***)base;<br>    <span class="hljs-type">void</span>** vtable = *vtable_ptr_addr;<br>    <span class="hljs-type">void</span>* vfunc = vtable[<span class="hljs-number">0</span>];<br><br>    <span class="hljs-keyword">using</span> VFUNC = <span class="hljs-built_in">void</span> (*)(Base*);<br>    VFUNC real_func = (VFUNC)vfunc;<br>    <span class="hljs-built_in">real_func</span>(base);<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;base: &quot;</span> &lt;&lt; base &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;vtable_ptr_addr: &quot;</span> &lt;&lt; vtable_ptr_addr &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;vtable: &quot;</span> &lt;&lt; vtable &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;vfunc: &quot;</span> &lt;&lt; vfunc &lt;&lt; std::endl;<br><br>    <span class="hljs-type">const</span> std::type_info&amp; type = <span class="hljs-built_in">typeid</span>(Base);<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;type_info addr: &quot;</span> &lt;&lt; &amp;type &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;type_info size: &quot;</span> &lt;&lt; std::hex &lt;&lt; <span class="hljs-string">&quot;0x&quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(type) &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Here is a result after a run in my machine:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs log">func1, this: 0x139e066e0<br>func1, this: 0x139e066e0<br>base: 0x139e066e0<br>vtable_ptr_addr: 0x139e066e0<br>vtable: 0x1008e8110<br>vfunc: 0x1008e7138<br>type_info addr: 0x1008e80f0<br>type_info size: 0x10<br></code></pre></td></tr></table></figure><h2 id="Memory-Description"><a href="#Memory-Description" class="headerlink" title="Memory Description"></a>Memory Description</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs log">                                                                                                       +-----------------------+<br>                                                                                           0x1008e80f0 |       type_info       |<br>                                                                                                       |                       |<br>                                                                                                       +-----------------------+<br>                                                                                           0x1008e8100 |       gap buffer      |<br>                                                                  Base object                          |                       |<br>+---------------------------------------+                  +------------------------+                  +-----------------------+              func1<br>|  base(vtable_ptr_addr) = 0x139e066e0  |----&gt; 0x139e066e0 |  vtable = 0x1008e8110  |----&gt; 0x1008e8110 |  func1 = 0x1008e7138  |---------&gt; 0x1008e7138<br>+---------------------------------------+                  +------------------------+                  +-----------------------+              func2<br>                base addr                      0x139e066e8 |       i = 1            |      0x1008e8118 |  func2 = 0xdeadbeef0  |---------&gt; 0xdeadbeef0<br>                                                           +------------------------+                  +-----------------------+         <br></code></pre></td></tr></table></figure><blockquote><p>The address of the function <code>func2</code> is mocked.</p></blockquote><p>The address of vtable and type_info are close and they can be calculated from each other by a specific offset.</p><h2 id="type-info-Example"><a href="#type-info-Example" class="headerlink" title="type_info Example"></a><code>type_info</code> Example</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseWithoutRTTI</span> &#123;&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DerivedWithoutRTTI</span> : <span class="hljs-keyword">public</span> BaseWithoutRTTI &#123;&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseWithRTTI</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> </span>&#123;&#125;;<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">BaseWithRTTI</span>() = <span class="hljs-keyword">default</span>;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DerivedWithRTTI</span> : <span class="hljs-keyword">public</span> BaseWithRTTI &#123;&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    BaseWithoutRTTI* base_without_RTTI = <span class="hljs-keyword">new</span> DerivedWithoutRTTI;<br>    std::cout &lt;&lt; <span class="hljs-built_in">typeid</span>(base_without_RTTI).<span class="hljs-built_in">name</span>() &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-built_in">typeid</span>(*base_without_RTTI).<span class="hljs-built_in">name</span>() &lt;&lt; std::endl;<br><br>    BaseWithRTTI* base_with_RTTI = <span class="hljs-keyword">new</span> DerivedWithRTTI;<br>    std::cout &lt;&lt; <span class="hljs-built_in">typeid</span>(base_with_RTTI).<span class="hljs-built_in">name</span>() &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-built_in">typeid</span>(*base_with_RTTI).<span class="hljs-built_in">name</span>() &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>The output is:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">P15BaseWithoutRTTI<br>15BaseWithoutRTTI<br>P12BaseWithRTTI<br>15DerivedWithRTTI<br></code></pre></td></tr></table></figure><p>We can easily find we can get the real object correctly only if there are virtual functions inside <code>Base</code> class. In other words, <code>vtable</code> and <code>type_info</code> are twins.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.sandordargo.com/blog/2023/03/01/binary-sizes-and-rtti">Binary sizes and RTTI</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>cpp</category>
      
      <category>rtti</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>rtti</tag>
      
      <tag>vtable</tag>
      
      <tag>vfunction</tag>
      
      <tag>type_info</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Introduction to C++20 jthread</title>
    <link href="/Dev/C++/STL/Introduction-to-C-20-jthread/"/>
    <url>/Dev/C++/STL/Introduction-to-C-20-jthread/</url>
    
    <content type="html"><![CDATA[<h2 id="std-thread"><a href="#std-thread" class="headerlink" title="std::thread"></a><code>std::thread</code></h2><p>Generally, we have to control <code>std::thread</code>‘s life cycle by writting <code>join</code>&#x2F;<code>detach</code> manually, but actually RAII can help to do it perfectly. Fortuantely, we can achieve it by using <code>std::jthread</code> in C++20 standard library.</p><h2 id="std-jthread"><a href="#std-jthread" class="headerlink" title="std::jthread"></a><code>std::jthread</code></h2><div class="note note-info">            <p>The implementation of <code>std::jthread</code> shown in this page is from MSVC STL.</p>          </div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">nostopstate_t</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">nostopstate_t</span><span class="hljs-params">()</span> </span>= <span class="hljs-keyword">default</span>;<br>&#125;;<br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">nostopstate_t</span> nostopstate&#123;&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">jthread</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">using</span> id                 = thread::id;<br>    <span class="hljs-keyword">using</span> native_handle_type = thread::native_handle_type;<br><br>    <span class="hljs-built_in">jthread</span>() <span class="hljs-keyword">noexcept</span> : _Impl&#123;&#125;, _Ssource&#123;nostopstate&#125; &#123;&#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Fn</span>, <span class="hljs-keyword">class</span>... _Args, <span class="hljs-type">enable_if_t</span>&lt;!is_same_v&lt;<span class="hljs-type">remove_cvref_t</span>&lt;_Fn&gt;, jthread&gt;, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    _NODISCARD_CTOR <span class="hljs-keyword">explicit</span> <span class="hljs-built_in">jthread</span>(_Fn&amp;&amp; _Fx, _Args&amp;&amp;... _Ax) &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">constexpr</span> (is_invocable_v&lt;<span class="hljs-type">decay_t</span>&lt;_Fn&gt;, stop_token, <span class="hljs-type">decay_t</span>&lt;_Args&gt;...&gt;) &#123;<br>            _Impl._Start(_STD forward&lt;_Fn&gt;(_Fx), _Ssource.<span class="hljs-built_in">get_token</span>(), _STD forward&lt;_Args&gt;(_Ax)...);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            _Impl._Start(_STD forward&lt;_Fn&gt;(_Fx), _STD forward&lt;_Args&gt;(_Ax)...);<br>        &#125;<br>    &#125;<br><br>    ~<span class="hljs-built_in">jthread</span>() &#123;<br>        _Try_cancel_and_join();<br>    &#125;<br><br>    <span class="hljs-built_in">jthread</span>(<span class="hljs-type">const</span> jthread&amp;)     = <span class="hljs-keyword">delete</span>;<br>    <span class="hljs-built_in">jthread</span>(jthread&amp;&amp;) <span class="hljs-keyword">noexcept</span> = <span class="hljs-keyword">default</span>;<br>    jthread&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> jthread&amp;) = <span class="hljs-keyword">delete</span>;<br><br>    jthread&amp; <span class="hljs-keyword">operator</span>=(jthread&amp;&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-comment">// note: the standard specifically disallows making self-move-assignment a no-op here</span><br>        <span class="hljs-comment">// N4861 [thread.jthread.cons]/13</span><br>        <span class="hljs-comment">// Effects: If joinable() is true, calls request_stop() and then join(). Assigns the state</span><br>        <span class="hljs-comment">// of x to *this and sets x to a default constructed state.</span><br>        _Try_cancel_and_join();<br>        _Impl    = _STD <span class="hljs-built_in">move</span>(_Other._Impl);<br>        _Ssource = _STD <span class="hljs-built_in">move</span>(_Other._Ssource);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(jthread&amp; _Other)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        _Impl.<span class="hljs-built_in">swap</span>(_Other._Impl);<br>        _Ssource.<span class="hljs-built_in">swap</span>(_Other._Ssource);<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD <span class="hljs-type">bool</span> <span class="hljs-title">joinable</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _Impl.<span class="hljs-built_in">joinable</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">join</span><span class="hljs-params">()</span> </span>&#123;<br>        _Impl.<span class="hljs-built_in">join</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">detach</span><span class="hljs-params">()</span> </span>&#123;<br>        _Impl.<span class="hljs-built_in">detach</span>();<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD id <span class="hljs-title">get_id</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _Impl.<span class="hljs-built_in">get_id</span>();<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD native_handle_type <span class="hljs-title">native_handle</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> <span class="hljs-comment">/* strengthened */</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _Impl.<span class="hljs-built_in">native_handle</span>();<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD stop_source <span class="hljs-title">get_stop_source</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _Ssource;<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD stop_token <span class="hljs-title">get_stop_token</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _Ssource.<span class="hljs-built_in">get_token</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">request_stop</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _Ssource.<span class="hljs-built_in">request_stop</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(jthread&amp; _Lhs, jthread&amp; _Rhs)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        _Lhs.<span class="hljs-built_in">swap</span>(_Rhs);<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD <span class="hljs-type">static</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title">hardware_concurrency</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> thread::<span class="hljs-built_in">hardware_concurrency</span>();<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">void</span> _Try_cancel_and_join() <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">if</span> (_Impl.<span class="hljs-built_in">joinable</span>()) &#123;<br>            _Ssource.<span class="hljs-built_in">request_stop</span>();<br>            _Impl.<span class="hljs-built_in">join</span>();<br>        &#125;<br>    &#125;<br><br>    thread _Impl;<br>    stop_source _Ssource;<br>&#125;;<br></code></pre></td></tr></table></figure><p><code>std::jthread</code> looks basically similar to <code>std::thread</code>. It identifies the thread state by <code>joinable()</code> and adjusts the thread state by <code>join()</code>. In addition to this, we cann’t ignore the member variable <code>_Ssource</code> whose type is <code>stop_source</code>. What is it?</p><h2 id="stop-source"><a href="#stop-source" class="headerlink" title="stop_source"></a><code>stop_source</code></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">stop_source</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">stop_source</span>() : _State&#123;<span class="hljs-keyword">new</span> _Stop_state&#125; &#123;&#125;<br>    <span class="hljs-keyword">explicit</span> <span class="hljs-built_in">stop_source</span>(<span class="hljs-type">nostopstate_t</span>) <span class="hljs-keyword">noexcept</span> : _State&#123;&#125; &#123;&#125;<br>    <span class="hljs-built_in">stop_source</span>(<span class="hljs-type">const</span> stop_source&amp; _Other) <span class="hljs-keyword">noexcept</span> : _State&#123;_Other._State&#125; &#123;<br>        <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> _Local = _State;<br>        <span class="hljs-keyword">if</span> (_Local != <span class="hljs-literal">nullptr</span>) &#123;<br>            _Local-&gt;_Stop_sources.<span class="hljs-built_in">fetch_add</span>(<span class="hljs-number">2</span>, memory_order_relaxed);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">stop_source</span>(stop_source&amp;&amp; _Other) <span class="hljs-keyword">noexcept</span> : _State&#123;<span class="hljs-function">_STD <span class="hljs-title">exchange</span><span class="hljs-params">(_Other._State, <span class="hljs-literal">nullptr</span>)</span>&#125; </span>&#123;&#125;<br>    stop_source&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> stop_source&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123;<br>        stop_source&#123;_Other&#125;.<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    stop_source&amp; <span class="hljs-keyword">operator</span>=(stop_source&amp;&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123;<br>        stop_source&#123;_STD <span class="hljs-built_in">move</span>(_Other)&#125;.<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    ~<span class="hljs-built_in">stop_source</span>() &#123;<br>        <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> _Local = _State;<br>        <span class="hljs-keyword">if</span> (_Local != <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">if</span> ((_Local-&gt;_Stop_sources.<span class="hljs-built_in">fetch_sub</span>(<span class="hljs-number">2</span>, memory_order_acq_rel) &gt;&gt; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">if</span> (_Local-&gt;_Stop_tokens.<span class="hljs-built_in">fetch_sub</span>(<span class="hljs-number">1</span>, memory_order_acq_rel) == <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">delete</span> _Local;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(stop_source&amp; _Other)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-function">_STD <span class="hljs-title">swap</span><span class="hljs-params">(_State, _Other._State)</span></span>;<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD stop_token <span class="hljs-title">get_token</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> _Local = _State;<br>        <span class="hljs-keyword">if</span> (_Local != <span class="hljs-literal">nullptr</span>) &#123;<br>            _Local-&gt;_Stop_tokens.<span class="hljs-built_in">fetch_add</span>(<span class="hljs-number">1</span>, memory_order_relaxed);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> stop_token&#123;_Local&#125;;<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD <span class="hljs-type">bool</span> <span class="hljs-title">stop_requested</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> _Local = _State;<br>        <span class="hljs-keyword">return</span> _Local != <span class="hljs-literal">nullptr</span> &amp;&amp; _Local-&gt;_Stop_requested();<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD <span class="hljs-type">bool</span> <span class="hljs-title">stop_possible</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _State != <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">request_stop</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> _Local = _State;<br>        <span class="hljs-keyword">return</span> _Local &amp;&amp; _Local-&gt;_Request_stop();<br>    &#125;<br><br>    _NODISCARD <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> stop_source&amp; _Lhs, <span class="hljs-type">const</span> stop_source&amp; _Rhs) <span class="hljs-keyword">noexcept</span> = <span class="hljs-keyword">default</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(stop_source&amp; _Lhs, stop_source&amp; _Rhs)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-function">_STD <span class="hljs-title">swap</span><span class="hljs-params">(_Lhs._State, _Rhs._State)</span></span>;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    _Stop_state* _State;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Stop-state"><a href="#Stop-state" class="headerlink" title="_Stop_state"></a><code>_Stop_state</code></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">_Stop_state</span> &#123;<br>    atomic&lt;<span class="hljs-type">uint32_t</span>&gt; _Stop_tokens  = <span class="hljs-number">1</span>; <span class="hljs-comment">// plus one shared by all stop_sources</span><br>    atomic&lt;<span class="hljs-type">uint32_t</span>&gt; _Stop_sources = <span class="hljs-number">2</span>; <span class="hljs-comment">// plus the low order bit is the stop requested bit</span><br>    _Locked_pointer&lt;_Stop_callback_base&gt; _Callbacks;<br>    <span class="hljs-comment">// always uses relaxed operations; ordering provided by the _Callbacks lock</span><br>    <span class="hljs-comment">// (atomic just to get wait/notify support)</span><br>    atomic&lt;<span class="hljs-type">const</span> _Stop_callback_base*&gt; _Current_callback = <span class="hljs-literal">nullptr</span>;<br>    _Thrd_id_t _Stopping_thread                          = <span class="hljs-number">0</span>;<br><br>    _NODISCARD <span class="hljs-type">bool</span> _Stop_requested() <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">return</span> (_Stop_sources.<span class="hljs-built_in">load</span>() &amp; <span class="hljs-type">uint32_t</span>&#123;<span class="hljs-number">1</span>&#125;) != <span class="hljs-number">0</span>;<br>    &#125;<br><br>    _NODISCARD <span class="hljs-type">bool</span> _Stop_possible() <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">return</span> _Stop_sources.<span class="hljs-built_in">load</span>() != <span class="hljs-number">0</span>;<br>    &#125;<br><br>    _NODISCARD <span class="hljs-type">bool</span> _Request_stop() <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-comment">// Attempts to request stop and call callbacks, returns whether request was successful</span><br>        <span class="hljs-keyword">if</span> ((_Stop_sources.<span class="hljs-built_in">fetch_or</span>(<span class="hljs-type">uint32_t</span>&#123;<span class="hljs-number">1</span>&#125;) &amp; <span class="hljs-type">uint32_t</span>&#123;<span class="hljs-number">1</span>&#125;) != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// another thread already requested</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        _Stopping_thread = _Thrd_id();<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-keyword">auto</span> _Head = _Callbacks._Lock_and_load();<br>            _Current_callback.<span class="hljs-built_in">store</span>(_Head, memory_order_relaxed);<br>            _Current_callback.<span class="hljs-built_in">notify_all</span>();<br>            <span class="hljs-keyword">if</span> (_Head == <span class="hljs-literal">nullptr</span>) &#123;<br>                _Callbacks._Store_and_unlock(<span class="hljs-literal">nullptr</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> _Next = _STD <span class="hljs-built_in">exchange</span>(_Head-&gt;_Next, <span class="hljs-literal">nullptr</span>);<br>            _STL_INTERNAL_CHECK(_Head-&gt;_Prev == <span class="hljs-literal">nullptr</span>);<br>            <span class="hljs-keyword">if</span> (_Next != <span class="hljs-literal">nullptr</span>) &#123;<br>                _Next-&gt;_Prev = <span class="hljs-literal">nullptr</span>;<br>            &#125;<br><br>            _Callbacks._Store_and_unlock(_Next); <span class="hljs-comment">// unlock before running _Head so other registrations</span><br>                                                 <span class="hljs-comment">// can detach without blocking on the callback</span><br><br>            _Head-&gt;_Fn(_Head); <span class="hljs-comment">// might destroy *_Head</span><br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Usage-of-std-jthread"><a href="#Usage-of-std-jthread" class="headerlink" title="Usage of std::jthread"></a>Usage of <code>std::jthread</code></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">std::jthread <span class="hljs-title">thread</span><span class="hljs-params">([](std::stop_token st) &#123;</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-keyword">while</span> (!st.stop_requested()) &#123;</span></span><br><span class="hljs-params"><span class="hljs-function">            std::cout &lt;&lt; i++ &lt;&lt; std::endl;</span></span><br><span class="hljs-params"><span class="hljs-function">            std::this_thread::sleep_for(std::chrono::seconds(<span class="hljs-number">1</span>));</span></span><br><span class="hljs-params"><span class="hljs-function">        &#125;</span></span><br><span class="hljs-params"><span class="hljs-function">    &#125;)</span></span>;<br><br>    std::this_thread::<span class="hljs-built_in">sleep_for</span>(std::chrono::<span class="hljs-built_in">seconds</span>(<span class="hljs-number">5</span>));<br>    <span class="hljs-comment">// `request_stop()` will be called when thread&#x27;s dustruction</span><br>    <span class="hljs-comment">// So its explicit call can be omitted</span><br>    thread.<span class="hljs-built_in">request_stop</span>(); <br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>Refer to <a href="https://github.com/josuttis/jthread/tree/master/source">https://github.com/josuttis/jthread/tree/master/source</a> if needing more examples.</p>          </div>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>cpp</category>
      
      <category>stl</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>stl</tag>
      
      <tag>cpp20</tag>
      
      <tag>thread</tag>
      
      <tag>jthread</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>What is std::shared_ptr</title>
    <link href="/Dev/C++/STL/What-is-std-shared-ptr/"/>
    <url>/Dev/C++/STL/What-is-std-shared-ptr/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>The implementation of <code>std::shared_ptr</code> shown in this page is from MSVC STL.</p>          </div><h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><pre><code class=" mermaid">classDiagram_Ptr_base &lt;|-- shared_ptr_Ptr_base &lt;|-- weak_ptr_Ptr_base o-- _Ref_count_base_Ref_count_base &lt;|-- _Ref_count_Ptr_base: - element_type* _ptr_Ptr_base: - _Ref_count_base* _Rep_Ptr_base: - _Move_construct_from(...)_Ptr_base: - _Copy_construct_from(...)_Ptr_base: - _Alias_construct_from(...)_Ptr_base: - _Alias_move_construct_from(...)_Ptr_base: - _Construct_from_weak(...)_Ptr_base: - _Weakly_construct_from(...)shared_ptr: + Constructor()shared_ptr: + Assignment()shared_ptr: + Destructor()shared_ptr: + swap()shared_ptr: + get()shared_ptr: + reset()shared_ptr: + operator*shared_ptr: + operator-&gt;shared_ptr: + operator[]shared_ptr: + operator boolweak_ptr: + Constructor()weak_ptr: + Assignment()weak_ptr: + Destructor()weak_ptr: + swap()weak_ptr: + reset()weak_ptr: + expired()weak_ptr: + lock()_Ref_count_base: - _Atomic_counter_t _Uses_Ref_count_base: - _Atomic_counter_t _Weaks_Ref_count_base: - _Incref()_Ref_count_base: - _Incwref()_Ref_count_base: - _Decref()_Ref_count_base: - _Decwref()_Ref_count_base: - _Use_count()_Ref_count_base: - _Destroy()_Ref_count_base: - _Delete_this()_Ref_count: - _Ty* _ptr_Ref_count: - _Destroy()_Ref_count: - _Delete_this()</code></pre><div class="note note-primary">            <p>Note that <code>element_type* _ptr</code> in <code>_Ptr_base</code> isn’t the same with <code>_Ty* _ptr</code> in <code>_Ref_count</code> strictly.</p>          </div><h2 id="Control-Block-Ref-count-base"><a href="#Control-Block-Ref-count-base" class="headerlink" title="Control Block (_Ref_count_base)"></a>Control Block (<code>_Ref_count_base</code>)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// The abstract base class of control block</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">__declspec</span>(novtable) _Ref_count_base &#123; <span class="hljs-comment">// common code for reference counting</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">// The implementations are in derived class</span><br>    <span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> _Destroy() <span class="hljs-keyword">noexcept</span>     = <span class="hljs-number">0</span>; <span class="hljs-comment">// destroy managed resource (target object)</span><br>    <span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> _Delete_this() <span class="hljs-keyword">noexcept</span> = <span class="hljs-number">0</span>; <span class="hljs-comment">// destroy self</span><br><br>    _Atomic_counter_t _Uses  = <span class="hljs-number">1</span>;<br>    _Atomic_counter_t _Weaks = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-keyword">constexpr</span> _Ref_count_base() <span class="hljs-keyword">noexcept</span> = <span class="hljs-keyword">default</span>; <span class="hljs-comment">// non-atomic initializations</span><br><br><span class="hljs-keyword">public</span>:<br>    _Ref_count_base(<span class="hljs-type">const</span> _Ref_count_base&amp;) = <span class="hljs-keyword">delete</span>;<br>    _Ref_count_base&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> _Ref_count_base&amp;) = <span class="hljs-keyword">delete</span>;<br><br>    <span class="hljs-keyword">virtual</span> ~_Ref_count_base() <span class="hljs-keyword">noexcept</span> &#123;&#125; <span class="hljs-comment">// TRANSITION, should be non-virtual</span><br><br>    <span class="hljs-type">bool</span> _Incref_nz() <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// increment use count if not zero, return true if successful</span><br>        <span class="hljs-keyword">auto</span>&amp; _Volatile_uses = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span>&amp;&gt;(_Uses);<br>        <span class="hljs-type">long</span> _Count = __iso_volatile_load32(<span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span>*&gt;(&amp;_Volatile_uses));<br><br>        <span class="hljs-keyword">while</span> (_Count != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">const</span> <span class="hljs-type">long</span> _Old_value = _INTRIN_RELAXED(_InterlockedCompareExchange)(&amp;_Volatile_uses, _Count + <span class="hljs-number">1</span>, _Count);<br>            <span class="hljs-keyword">if</span> (_Old_value == _Count) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            _Count = _Old_value;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-type">void</span> _Incref() <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// increment use count</span><br>        _MT_INCR(_Uses);<br>    &#125;<br><br>    <span class="hljs-type">void</span> _Incwref() <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// increment weak reference count</span><br>        _MT_INCR(_Weaks);<br>    &#125;<br><br>    <span class="hljs-type">void</span> _Decref() <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// decrement use count</span><br>        <span class="hljs-keyword">if</span> (_MT_DECR(_Uses) == <span class="hljs-number">0</span>) &#123;<br>            _Destroy();<br>            _Decwref();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">void</span> _Decwref() <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// decrement weak reference count</span><br>        <span class="hljs-keyword">if</span> (_MT_DECR(_Weaks) == <span class="hljs-number">0</span>) &#123;<br>            _Delete_this();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">long</span> _Use_count() <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">long</span>&gt;(_Uses);<br>    &#125;<br><br>    <span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span>* _Get_deleter(<span class="hljs-type">const</span> type_info&amp;) <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ref_count</span> : <span class="hljs-keyword">public</span> _Ref_count_base &#123; <span class="hljs-comment">// handle reference counting for pointer without deleter</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">explicit</span> _Ref_count(_Ty* _Px) : _Ref_count_base(), _Ptr(_Px) &#123;&#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">void</span> _Destroy() <span class="hljs-keyword">noexcept</span> <span class="hljs-keyword">override</span> &#123; <span class="hljs-comment">// destroy managed resource</span><br>        <span class="hljs-keyword">delete</span> _Ptr;<br>    &#125;<br><br>    <span class="hljs-type">void</span> _Delete_this() <span class="hljs-keyword">noexcept</span> <span class="hljs-keyword">override</span> &#123; <span class="hljs-comment">// destroy self</span><br>        <span class="hljs-keyword">delete</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    _Ty* _Ptr;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Ptr-base"><a href="#Ptr-base" class="headerlink" title="Ptr_base"></a><code>Ptr_base</code></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ptr_base</span> &#123; <span class="hljs-comment">// base class for `shared_ptr` and `weak_ptr`</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">using</span> element_type = <span class="hljs-type">remove_extent_t</span>&lt;_Ty&gt;;<br><br>    <span class="hljs-function">_NODISCARD <span class="hljs-type">long</span> <span class="hljs-title">use_count</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _Rep ? _Rep-&gt;_Use_count() : <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    <span class="hljs-function">_NODISCARD <span class="hljs-type">bool</span> <span class="hljs-title">owner_before</span><span class="hljs-params">(<span class="hljs-type">const</span> _Ptr_base&lt;_Ty2&gt;&amp; _Right)</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123; <span class="hljs-comment">// compare addresses of manager objects</span><br>        <span class="hljs-keyword">return</span> _Rep &lt; _Right._Rep;<br>    &#125;<br><br>    _Ptr_base(<span class="hljs-type">const</span> _Ptr_base&amp;) = <span class="hljs-keyword">delete</span>;<br>    _Ptr_base&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> _Ptr_base&amp;) = <span class="hljs-keyword">delete</span>;<br><br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-function">_NODISCARD element_type* <span class="hljs-title">get</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _Ptr;<br>    &#125;<br><br>    <span class="hljs-keyword">constexpr</span> _Ptr_base() <span class="hljs-keyword">noexcept</span> = <span class="hljs-keyword">default</span>;<br><br>    ~_Ptr_base() = <span class="hljs-keyword">default</span>;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    <span class="hljs-type">void</span> _Move_construct_from(_Ptr_base&lt;_Ty2&gt;&amp;&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-comment">// implement shared_ptr&#x27;s (converting) move ctor and weak_ptr&#x27;s move ctor</span><br>        _Ptr = _Right._Ptr;<br>        _Rep = _Right._Rep;<br><br>        _Right._Ptr = <span class="hljs-literal">nullptr</span>;<br>        _Right._Rep = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    <span class="hljs-type">void</span> _Copy_construct_from(<span class="hljs-type">const</span> shared_ptr&lt;_Ty2&gt;&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-comment">// implement shared_ptr&#x27;s (converting) copy ctor</span><br>        _Other._Incref();<br><br>        _Ptr = _Other._Ptr;<br>        _Rep = _Other._Rep;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    <span class="hljs-type">void</span> _Alias_construct_from(<span class="hljs-type">const</span> shared_ptr&lt;_Ty2&gt;&amp; _Other, element_type* _Px) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-comment">// implement shared_ptr&#x27;s aliasing ctor</span><br>        _Other._Incref();<br><br>        _Ptr = _Px;<br>        _Rep = _Other._Rep;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    <span class="hljs-type">void</span> _Alias_move_construct_from(shared_ptr&lt;_Ty2&gt;&amp;&amp; _Other, element_type* _Px) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-comment">// implement shared_ptr&#x27;s aliasing move ctor</span><br>        _Ptr = _Px;<br>        _Rep = _Other._Rep;<br><br>        _Other._Ptr = <span class="hljs-literal">nullptr</span>;<br>        _Other._Rep = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty0</span>&gt;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">weak_ptr</span>; <span class="hljs-comment">// specifically, weak_ptr::lock()</span><br><br>    <span class="hljs-comment">// weak -&gt; shared</span><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    <span class="hljs-type">bool</span> _Construct_from_weak(<span class="hljs-type">const</span> weak_ptr&lt;_Ty2&gt;&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-comment">// implement shared_ptr&#x27;s ctor from weak_ptr, and weak_ptr::lock()</span><br>        <span class="hljs-keyword">if</span> (_Other._Rep &amp;&amp; _Other._Rep-&gt;_Incref_nz()) &#123;<br>            _Ptr = _Other._Ptr;<br>            _Rep = _Other._Rep;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-type">void</span> _Incref() <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">if</span> (_Rep) &#123;<br>            _Rep-&gt;_Incref();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">void</span> _Decref() <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// decrement reference count</span><br>        <span class="hljs-keyword">if</span> (_Rep) &#123;<br>            _Rep-&gt;_Decref();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">void</span> _Swap(_Ptr_base&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// swap pointers</span><br>        <span class="hljs-function">_STD <span class="hljs-title">swap</span><span class="hljs-params">(_Ptr, _Right._Ptr)</span></span>;<br>        <span class="hljs-function">_STD <span class="hljs-title">swap</span><span class="hljs-params">(_Rep, _Right._Rep)</span></span>;<br>    &#125;<br><br>    <span class="hljs-comment">// shared -&gt; weak</span><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    <span class="hljs-type">void</span> _Weakly_construct_from(<span class="hljs-type">const</span> _Ptr_base&lt;_Ty2&gt;&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// implement weak_ptr&#x27;s ctors</span><br>        <span class="hljs-keyword">if</span> (_Other._Rep) &#123;<br>            _Ptr = _Other._Ptr;<br>            _Rep = _Other._Rep;<br>            _Rep-&gt;_Incwref();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            _STL_INTERNAL_CHECK(!_Ptr &amp;&amp; !_Rep);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    <span class="hljs-type">void</span> _Weakly_convert_lvalue_avoiding_expired_conversions(<span class="hljs-type">const</span> _Ptr_base&lt;_Ty2&gt;&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-comment">// implement weak_ptr&#x27;s copy converting ctor</span><br>        <span class="hljs-keyword">if</span> (_Other._Rep) &#123;<br>            _Rep = _Other._Rep; <span class="hljs-comment">// always share ownership</span><br>            _Rep-&gt;_Incwref();<br><br>            <span class="hljs-keyword">if</span> (_Rep-&gt;_Incref_nz()) &#123;<br>                _Ptr = _Other._Ptr; <span class="hljs-comment">// keep resource alive during conversion, handling virtual inheritance</span><br>                _Rep-&gt;_Decref();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                _STL_INTERNAL_CHECK(!_Ptr);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            _STL_INTERNAL_CHECK(!_Ptr &amp;&amp; !_Rep);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    <span class="hljs-type">void</span> _Weakly_convert_rvalue_avoiding_expired_conversions(_Ptr_base&lt;_Ty2&gt;&amp;&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-comment">// implement weak_ptr&#x27;s move converting ctor</span><br>        _Rep        = _Other._Rep; <span class="hljs-comment">// always transfer ownership</span><br>        _Other._Rep = <span class="hljs-literal">nullptr</span>;<br><br>        <span class="hljs-keyword">if</span> (_Rep &amp;&amp; _Rep-&gt;_Incref_nz()) &#123;<br>            _Ptr = _Other._Ptr; <span class="hljs-comment">// keep resource alive during conversion, handling virtual inheritance</span><br>            _Rep-&gt;_Decref();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            _STL_INTERNAL_CHECK(!_Ptr);<br>        &#125;<br><br>        _Other._Ptr = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><br>    <span class="hljs-type">void</span> _Incwref() <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">if</span> (_Rep) &#123;<br>            _Rep-&gt;_Incwref();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">void</span> _Decwref() <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// decrement weak reference count</span><br>        <span class="hljs-keyword">if</span> (_Rep) &#123;<br>            _Rep-&gt;_Decwref();<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    element_type* _Ptr&#123;<span class="hljs-literal">nullptr</span>&#125;;<br>    _Ref_count_base* _Rep&#123;<span class="hljs-literal">nullptr</span>&#125;;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty0</span>&gt;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ptr_base</span>;<br><br>    <span class="hljs-keyword">friend</span> shared_ptr&lt;_Ty&gt;;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty0</span>&gt;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">atomic</span>;<br><br>    <span class="hljs-keyword">friend</span> _Exception_ptr_access;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> _HAS_STATIC_RTTI</span><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty0</span>&gt;<br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> _Dx* <span class="hljs-title">get_deleter</span><span class="hljs-params">(<span class="hljs-type">const</span> shared_ptr&lt;_Ty0&gt;&amp; _Sx)</span> <span class="hljs-keyword">noexcept</span></span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// _HAS_STATIC_RTTI</span></span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a><code>shared_ptr</code></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">shared_ptr</span> : <span class="hljs-keyword">public</span> _Ptr_base&lt;_Ty&gt; &#123; <span class="hljs-comment">// class for reference counted resource management</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">using</span> _Mybase = _Ptr_base&lt;_Ty&gt;;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">using</span> <span class="hljs-keyword">typename</span> _Mybase::element_type;<br><br>    <span class="hljs-keyword">using</span> weak_type = weak_ptr&lt;_Ty&gt;;<br><br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">shared_ptr</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>= <span class="hljs-keyword">default</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">shared_ptr</span><span class="hljs-params">(<span class="hljs-type">nullptr_t</span>)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;&#125; <span class="hljs-comment">// construct empty shared_ptr</span><br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ux</span>,<br>        <span class="hljs-type">enable_if_t</span>&lt;conjunction_v&lt;<span class="hljs-type">conditional_t</span>&lt;is_array_v&lt;_Ty&gt;, _Can_array_delete&lt;_Ux&gt;, _Can_scalar_delete&lt;_Ux&gt;&gt;,<br>                        _SP_convertible&lt;_Ux, _Ty&gt;&gt;,<br>            <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-keyword">explicit</span> <span class="hljs-built_in">shared_ptr</span>(_Ux* _Px) &#123; <span class="hljs-comment">// construct shared_ptr object that owns _Px</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">constexpr</span> (is_array_v&lt;_Ty&gt;) &#123;<br>            _Setpd(_Px, default_delete&lt;_Ux[]&gt;&#123;&#125;);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            _Temporary_owner&lt;_Ux&gt; _Owner(_Px);<br>            _Set_ptr_rep_and_enable_shared(_Owner._Ptr, <span class="hljs-keyword">new</span> _Ref_count&lt;_Ux&gt;(_Owner._Ptr));<br>            _Owner._Ptr = <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ux</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx</span>,<br>        <span class="hljs-type">enable_if_t</span>&lt;conjunction_v&lt;is_move_constructible&lt;_Dx&gt;, _Can_call_function_object&lt;_Dx&amp;, _Ux*&amp;&gt;,<br>                        _SP_convertible&lt;_Ux, _Ty&gt;&gt;,<br>            <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">shared_ptr</span>(_Ux* _Px, _Dx _Dt) &#123; <span class="hljs-comment">// construct with _Px, deleter</span><br>        _Setpd(_Px, _STD <span class="hljs-built_in">move</span>(_Dt));<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ux</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Alloc</span>,<br>        <span class="hljs-type">enable_if_t</span>&lt;conjunction_v&lt;is_move_constructible&lt;_Dx&gt;, _Can_call_function_object&lt;_Dx&amp;, _Ux*&amp;&gt;,<br>                        _SP_convertible&lt;_Ux, _Ty&gt;&gt;,<br>            <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">shared_ptr</span>(_Ux* _Px, _Dx _Dt, _Alloc _Ax) &#123; <span class="hljs-comment">// construct with _Px, deleter, allocator</span><br>        _Setpda(_Px, _STD <span class="hljs-built_in">move</span>(_Dt), _Ax);<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx</span>,<br>        <span class="hljs-type">enable_if_t</span>&lt;conjunction_v&lt;is_move_constructible&lt;_Dx&gt;, _Can_call_function_object&lt;_Dx&amp;, <span class="hljs-type">nullptr_t</span>&amp;&gt;&gt;, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">shared_ptr</span>(<span class="hljs-type">nullptr_t</span>, _Dx _Dt) &#123; <span class="hljs-comment">// construct with nullptr, deleter</span><br>        _Setpd(<span class="hljs-literal">nullptr</span>, _STD <span class="hljs-built_in">move</span>(_Dt));<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Alloc</span>,<br>        <span class="hljs-type">enable_if_t</span>&lt;conjunction_v&lt;is_move_constructible&lt;_Dx&gt;, _Can_call_function_object&lt;_Dx&amp;, <span class="hljs-type">nullptr_t</span>&amp;&gt;&gt;, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">shared_ptr</span>(<span class="hljs-type">nullptr_t</span>, _Dx _Dt, _Alloc _Ax) &#123; <span class="hljs-comment">// construct with nullptr, deleter, allocator</span><br>        _Setpda(<span class="hljs-literal">nullptr</span>, _STD <span class="hljs-built_in">move</span>(_Dt), _Ax);<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    <span class="hljs-built_in">shared_ptr</span>(<span class="hljs-type">const</span> shared_ptr&lt;_Ty2&gt;&amp; _Right, element_type* _Px) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-comment">// construct shared_ptr object that aliases _Right</span><br>        <span class="hljs-keyword">this</span>-&gt;_Alias_construct_from(_Right, _Px);<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    <span class="hljs-built_in">shared_ptr</span>(shared_ptr&lt;_Ty2&gt;&amp;&amp; _Right, element_type* _Px) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-comment">// move construct shared_ptr object that aliases _Right</span><br>        <span class="hljs-keyword">this</span>-&gt;_Alias_move_construct_from(_STD <span class="hljs-built_in">move</span>(_Right), _Px);<br>    &#125;<br><br>    <span class="hljs-built_in">shared_ptr</span>(<span class="hljs-type">const</span> shared_ptr&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// construct shared_ptr object that owns same resource as _Other</span><br>        <span class="hljs-keyword">this</span>-&gt;_Copy_construct_from(_Other);<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>, <span class="hljs-type">enable_if_t</span>&lt;_SP_pointer_compatible&lt;_Ty2, _Ty&gt;::value, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">shared_ptr</span>(<span class="hljs-type">const</span> shared_ptr&lt;_Ty2&gt;&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-comment">// construct shared_ptr object that owns same resource as _Other</span><br>        <span class="hljs-keyword">this</span>-&gt;_Copy_construct_from(_Other);<br>    &#125;<br><br>    <span class="hljs-built_in">shared_ptr</span>(shared_ptr&amp;&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// construct shared_ptr object that takes resource from _Right</span><br>        <span class="hljs-keyword">this</span>-&gt;_Move_construct_from(_STD <span class="hljs-built_in">move</span>(_Right));<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>, <span class="hljs-type">enable_if_t</span>&lt;_SP_pointer_compatible&lt;_Ty2, _Ty&gt;::value, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">shared_ptr</span>(shared_ptr&lt;_Ty2&gt;&amp;&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// construct shared_ptr object that takes resource from _Right</span><br>        <span class="hljs-keyword">this</span>-&gt;_Move_construct_from(_STD <span class="hljs-built_in">move</span>(_Right));<br>    &#125;<br><br>    <span class="hljs-comment">// Upgrade from weak_ptr to shared_ptr</span><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>, <span class="hljs-type">enable_if_t</span>&lt;_SP_pointer_compatible&lt;_Ty2, _Ty&gt;::value, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-keyword">explicit</span> <span class="hljs-built_in">shared_ptr</span>(<span class="hljs-type">const</span> weak_ptr&lt;_Ty2&gt;&amp; _Other) &#123; <span class="hljs-comment">// construct shared_ptr object that owns resource *_Other</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>-&gt;_Construct_from_weak(_Other)) &#123;<br>            _Throw_bad_weak_ptr();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ux</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx</span>,<br>        <span class="hljs-type">enable_if_t</span>&lt;conjunction_v&lt;_SP_pointer_compatible&lt;_Ux, _Ty&gt;,<br>                        is_convertible&lt;<span class="hljs-keyword">typename</span> unique_ptr&lt;_Ux, _Dx&gt;::pointer, element_type*&gt;&gt;,<br>            <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">shared_ptr</span>(unique_ptr&lt;_Ux, _Dx&gt;&amp;&amp; _Other) &#123;<br>        <span class="hljs-keyword">using</span> _Fancy_t   = <span class="hljs-keyword">typename</span> unique_ptr&lt;_Ux, _Dx&gt;::pointer;<br>        <span class="hljs-keyword">using</span> _Raw_t     = <span class="hljs-keyword">typename</span> unique_ptr&lt;_Ux, _Dx&gt;::element_type*;<br>        <span class="hljs-keyword">using</span> _Deleter_t = <span class="hljs-type">conditional_t</span>&lt;is_reference_v&lt;_Dx&gt;, <span class="hljs-keyword">decltype</span>(_STD <span class="hljs-built_in">ref</span>(_Other.<span class="hljs-built_in">get_deleter</span>())), _Dx&gt;;<br><br>        <span class="hljs-type">const</span> _Fancy_t _Fancy = _Other.<span class="hljs-built_in">get</span>();<br><br>        <span class="hljs-keyword">if</span> (_Fancy) &#123;<br>            <span class="hljs-type">const</span> _Raw_t _Raw = _Fancy;<br>            <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> _Rx =<br>                <span class="hljs-keyword">new</span> _Ref_count_resource&lt;_Fancy_t, _Deleter_t&gt;(_Fancy, _STD forward&lt;_Dx&gt;(_Other.<span class="hljs-built_in">get_deleter</span>()));<br>            _Set_ptr_rep_and_enable_shared(_Raw, _Rx);<br>            _Other.<span class="hljs-built_in">release</span>();<br>        &#125;<br>    &#125;<br><br>    ~<span class="hljs-built_in">shared_ptr</span>() <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// release resource</span><br>        <span class="hljs-keyword">this</span>-&gt;_Decref();<br>    &#125;<br><br>    shared_ptr&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> shared_ptr&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-built_in">shared_ptr</span>(_Right).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    shared_ptr&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> shared_ptr&lt;_Ty2&gt;&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-built_in">shared_ptr</span>(_Right).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    shared_ptr&amp; <span class="hljs-keyword">operator</span>=(shared_ptr&amp;&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// take resource from _Right</span><br>        <span class="hljs-built_in">shared_ptr</span>(_STD <span class="hljs-built_in">move</span>(_Right)).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    shared_ptr&amp; <span class="hljs-keyword">operator</span>=(shared_ptr&lt;_Ty2&gt;&amp;&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// take resource from _Right</span><br>        <span class="hljs-built_in">shared_ptr</span>(_STD <span class="hljs-built_in">move</span>(_Right)).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ux</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx</span>&gt;<br>    shared_ptr&amp; <span class="hljs-keyword">operator</span>=(unique_ptr&lt;_Ux, _Dx&gt;&amp;&amp; _Right) &#123; <span class="hljs-comment">// move from unique_ptr</span><br>        <span class="hljs-built_in">shared_ptr</span>(_STD <span class="hljs-built_in">move</span>(_Right)).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(shared_ptr&amp; _Other)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>-&gt;_Swap(_Other);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reset</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123; <span class="hljs-comment">// release resource and convert to empty shared_ptr object</span><br>        <span class="hljs-built_in">shared_ptr</span>().<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ux</span>&gt;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reset</span><span class="hljs-params">(_Ux* _Px)</span> </span>&#123; <span class="hljs-comment">// release, take ownership of _Px</span><br>        <span class="hljs-built_in">shared_ptr</span>(_Px).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ux</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx</span>&gt;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reset</span><span class="hljs-params">(_Ux* _Px, _Dx _Dt)</span> </span>&#123; <span class="hljs-comment">// release, take ownership of _Px, with deleter _Dt</span><br>        <span class="hljs-built_in">shared_ptr</span>(_Px, _Dt).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ux</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Alloc</span>&gt;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reset</span><span class="hljs-params">(_Ux* _Px, _Dx _Dt, _Alloc _Ax)</span> </span>&#123; <span class="hljs-comment">// release, take ownership of _Px, with deleter _Dt, allocator _Ax</span><br>        <span class="hljs-built_in">shared_ptr</span>(_Px, _Dt, _Ax).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">using</span> _Mybase::get;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span> = _Ty, <span class="hljs-type">enable_if_t</span>&lt;!disjunction_v&lt;is_array&lt;_Ty2&gt;, is_void&lt;_Ty2&gt;&gt;, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    _NODISCARD _Ty2&amp; <span class="hljs-keyword">operator</span>*() <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-built_in">get</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span> = _Ty, <span class="hljs-type">enable_if_t</span>&lt;!is_array_v&lt;_Ty2&gt;, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    _NODISCARD _Ty2* <span class="hljs-keyword">operator</span>-&gt;() <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">get</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span> = _Ty, <span class="hljs-keyword">class</span> _Elem = element_type, <span class="hljs-type">enable_if_t</span>&lt;is_array_v&lt;_Ty2&gt;, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    _NODISCARD _Elem&amp; <span class="hljs-keyword">operator</span>[](<span class="hljs-type">ptrdiff_t</span> _Idx) <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> <span class="hljs-comment">/* strengthened */</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">get</span>()[_Idx];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">bool</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">get</span>() != <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_UxptrOrNullptr</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx</span>&gt;<br>    <span class="hljs-type">void</span> _Setpd(<span class="hljs-type">const</span> _UxptrOrNullptr _Px, _Dx _Dt) &#123; <span class="hljs-comment">// take ownership of _Px, deleter _Dt</span><br>        _Temporary_owner_del&lt;_UxptrOrNullptr, _Dx&gt; _Owner(_Px, _Dt);<br>        _Set_ptr_rep_and_enable_shared(<br>            _Owner._Ptr, <span class="hljs-keyword">new</span> _Ref_count_resource&lt;_UxptrOrNullptr, _Dx&gt;(_Owner._Ptr, _STD <span class="hljs-built_in">move</span>(_Dt)));<br>        _Owner._Call_deleter = <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_UxptrOrNullptr</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Alloc</span>&gt;<br>    <span class="hljs-type">void</span> _Setpda(<span class="hljs-type">const</span> _UxptrOrNullptr _Px, _Dx _Dt, _Alloc _Ax) &#123; <span class="hljs-comment">// take ownership of _Px, deleter _Dt, allocator _Ax</span><br>        <span class="hljs-keyword">using</span> _Alref_alloc = _Rebind_alloc_t&lt;_Alloc, _Ref_count_resource_alloc&lt;_UxptrOrNullptr, _Dx, _Alloc&gt;&gt;;<br><br>        _Temporary_owner_del&lt;_UxptrOrNullptr, _Dx&gt; _Owner(_Px, _Dt);<br>        _Alref_alloc _Alref(_Ax);<br>        _Alloc_construct_ptr&lt;_Alref_alloc&gt; _Constructor(_Alref);<br>        _Constructor._Allocate();<br>        _Construct_in_place(*_Constructor._Ptr, _Owner._Ptr, _STD <span class="hljs-built_in">move</span>(_Dt), _Ax);<br>        _Set_ptr_rep_and_enable_shared(_Owner._Ptr, _Unfancy(_Constructor._Ptr));<br>        _Constructor._Ptr    = <span class="hljs-literal">nullptr</span>;<br>        _Owner._Call_deleter = <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ux</span>&gt;<br>    <span class="hljs-type">void</span> _Set_ptr_rep_and_enable_shared(_Ux* <span class="hljs-type">const</span> _Px, _Ref_count_base* <span class="hljs-type">const</span> _Rx) <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// take ownership of _Px</span><br>        <span class="hljs-keyword">this</span>-&gt;_Ptr = _Px;<br>        <span class="hljs-keyword">this</span>-&gt;_Rep = _Rx;<br>        <span class="hljs-function"><span class="hljs-keyword">if</span> <span class="hljs-title">constexpr</span> <span class="hljs-params">(conjunction_v&lt;negation&lt;is_array&lt;_Ty&gt;&gt;, negation&lt;is_volatile&lt;_Ux&gt;&gt;, _Can_enable_shared&lt;_Ux&gt;&gt;)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (_Px &amp;&amp; _Px-&gt;_Wptr.<span class="hljs-built_in">expired</span>()) &#123;<br>                _Px-&gt;_Wptr = shared_ptr&lt;<span class="hljs-type">remove_cv_t</span>&lt;_Ux&gt;&gt;(*<span class="hljs-keyword">this</span>, <span class="hljs-keyword">const_cast</span>&lt;<span class="hljs-type">remove_cv_t</span>&lt;_Ux&gt;*&gt;(_Px));<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">void</span> _Set_ptr_rep_and_enable_shared(<span class="hljs-type">nullptr_t</span>, _Ref_count_base* <span class="hljs-type">const</span> _Rx) <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// take ownership of nullptr</span><br>        <span class="hljs-keyword">this</span>-&gt;_Ptr = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-keyword">this</span>-&gt;_Rep = _Rx;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="shared-ptr-and-array"><a href="#shared-ptr-and-array" class="headerlink" title="shared_ptr and array"></a><code>shared_ptr</code> and array</h3><p>Before C++17, we have to specify deleter when using <code>shared_ptr</code> for array. e.g.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">std::shared_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ptr</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">10</span>], std::default_delete&lt;<span class="hljs-type">int</span>[]&gt;())</span></span>;<br></code></pre></td></tr></table></figure><p>After C++17, <code>shared_ptr</code> supports array and we don’t have to provide custom deleter. e.g.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">std::shared_ptr&lt;<span class="hljs-type">int</span>[]&gt; <span class="hljs-title">ptr</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">10</span>])</span></span>;<br></code></pre></td></tr></table></figure><h3 id="Set-ptr-rep-and-enable-shared"><a href="#Set-ptr-rep-and-enable-shared" class="headerlink" title="_Set_ptr_rep_and_enable_shared"></a><code>_Set_ptr_rep_and_enable_shared</code></h3><p><code>_Set_ptr_rep_and_enable_shared</code> is related to <code>enable_from_shared_this</code>.</p><p><code>_Wptr</code> is actually a <code>weak_ptr</code>. <code>expired()</code> means its use count is 0. In other words, it can be initialized.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">weak_ptr</span> : <span class="hljs-keyword">public</span> _Ptr_base&lt;_Ty&gt; &#123; <span class="hljs-comment">// class for pointer to reference </span><br>    <span class="hljs-function">_NODISCARD <span class="hljs-type">bool</span> <span class="hljs-title">expired</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">use_count</span>() == <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// Others...</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="enable-from-shared-this"><a href="#enable-from-shared-this" class="headerlink" title="enable_from_shared_this"></a><code>enable_from_shared_this</code></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">enable_shared_from_this</span> &#123; <span class="hljs-comment">// provide member functions that create shared_ptr to this</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">using</span> _Esft_type = enable_shared_from_this;<br><br>    <span class="hljs-function">_NODISCARD shared_ptr&lt;_Ty&gt; <span class="hljs-title">shared_from_this</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">shared_ptr</span>&lt;_Ty&gt;(_Wptr);<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD shared_ptr&lt;<span class="hljs-type">const</span> _Ty&gt; <span class="hljs-title">shared_from_this</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">shared_ptr</span>&lt;<span class="hljs-type">const</span> _Ty&gt;(_Wptr);<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD weak_ptr&lt;_Ty&gt; <span class="hljs-title">weak_from_this</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _Wptr;<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD weak_ptr&lt;<span class="hljs-type">const</span> _Ty&gt; <span class="hljs-title">weak_from_this</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _Wptr;<br>    &#125;<br><br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">enable_shared_from_this</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> : _Wptr() &#123;</span>&#125;<br><br>    <span class="hljs-built_in">enable_shared_from_this</span>(<span class="hljs-type">const</span> enable_shared_from_this&amp;) <span class="hljs-keyword">noexcept</span> : _Wptr() &#123;<br>        <span class="hljs-comment">// construct (must value-initialize _Wptr)</span><br>    &#125;<br><br>    enable_shared_from_this&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> enable_shared_from_this&amp;) <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// assign (must not change _Wptr)</span><br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    ~<span class="hljs-built_in">enable_shared_from_this</span>() = <span class="hljs-keyword">default</span>;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Yty</span>&gt;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">shared_ptr</span>;<br><br>    <span class="hljs-keyword">mutable</span> weak_ptr&lt;_Ty&gt; _Wptr;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Notice that there is no way to initialize the <code>_Wptr</code> in <code>enable_shared_from_this</code> hence we need to construct <code>shared_ptr</code> in advance to apply <code>enable_shared_from_this</code> correctly.</p><h2 id="make-shared"><a href="#make-shared" class="headerlink" title="make_shared"></a><code>make_shared</code></h2><p>We all know <code>make_shared</code> is the best practice of the usage about <code>shared_ptr</code>. But why?</p><h3 id="Ref-count-obj2"><a href="#Ref-count-obj2" class="headerlink" title="_Ref_count_obj2"></a><code>_Ref_count_obj2</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">_Wrap</span> &#123;<br>    _Ty _Value; <span class="hljs-comment">// workaround for VSO-586813 &quot;T^ is not allowed in a union&quot;</span><br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ref_count_obj2</span> : <span class="hljs-keyword">public</span> _Ref_count_base &#123; <span class="hljs-comment">// handle reference counting for object in control block, no allocator</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span>... _Types&gt;<br>    <span class="hljs-keyword">explicit</span> _Ref_count_obj2(_Types&amp;&amp;... _Args) : _Ref_count_base() &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> _HAS_CXX20</span><br>        <span class="hljs-function"><span class="hljs-keyword">if</span> <span class="hljs-title">constexpr</span> <span class="hljs-params">(<span class="hljs-keyword">sizeof</span>...(_Types) == <span class="hljs-number">1</span> &amp;&amp; (is_same_v&lt;_For_overwrite_tag, <span class="hljs-type">remove_cvref_t</span>&lt;_Types&gt;&gt; &amp;&amp; ...))</span> </span>&#123;<br>            _Default_construct_in_place(_Storage._Value);<br>            ((<span class="hljs-type">void</span>) _Args, ...);<br>        &#125; <span class="hljs-keyword">else</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// _HAS_CXX20</span></span><br>        &#123;<br>            _Construct_in_place(_Storage._Value, _STD forward&lt;_Types&gt;(_Args)...);<br>        &#125;<br>    &#125;<br><br>    ~_Ref_count_obj2() <span class="hljs-keyword">noexcept</span> <span class="hljs-keyword">override</span> &#123; <span class="hljs-comment">// TRANSITION, should be non-virtual</span><br>        <span class="hljs-comment">// nothing to do, _Storage._Value was already destroyed in _Destroy</span><br><br>        <span class="hljs-comment">// N4849 [class.dtor]/7:</span><br>        <span class="hljs-comment">// &quot;A defaulted destructor for a class X is defined as deleted if:</span><br>        <span class="hljs-comment">// X is a union-like class that has a variant member with a non-trivial destructor&quot;</span><br>    &#125;<br><br>    <span class="hljs-keyword">union</span> &#123;<br>        _Wrap&lt;_Ty&gt; _Storage;<br>    &#125;;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">void</span> _Destroy() <span class="hljs-keyword">noexcept</span> <span class="hljs-keyword">override</span> &#123; <span class="hljs-comment">// destroy managed resource</span><br>        _Destroy_in_place(_Storage._Value);<br>    &#125;<br><br>    <span class="hljs-type">void</span> _Delete_this() <span class="hljs-keyword">noexcept</span> <span class="hljs-keyword">override</span> &#123; <span class="hljs-comment">// destroy self</span><br>        <span class="hljs-keyword">delete</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">if</span> _HAS_CXX20</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>, <span class="hljs-keyword">class</span>... _Types,<br>    <span class="hljs-keyword">class</span> = <span class="hljs-type">void_t</span>&lt;<span class="hljs-keyword">decltype</span>(::<span class="hljs-built_in">new</span> (_STD <span class="hljs-built_in">declval</span>&lt;<span class="hljs-type">void</span>*&gt;()) _Ty(_STD <span class="hljs-built_in">declval</span>&lt;_Types&gt;()...))&gt;&gt;<br><span class="hljs-keyword">constexpr</span> _Ty* <span class="hljs-built_in">construct_at</span>(_Ty* <span class="hljs-type">const</span> _Location, _Types&amp;&amp;... _Args) <span class="hljs-built_in">noexcept</span>(<br>    <span class="hljs-built_in">noexcept</span>(::<span class="hljs-built_in">new</span> (_Voidify_iter(_Location)) _Ty(_STD forward&lt;_Types&gt;(_Args)...))) <span class="hljs-comment">/* strengthened */</span> &#123;<br>    <span class="hljs-keyword">return</span> ::<span class="hljs-built_in">new</span> (_Voidify_iter(_Location)) _Ty(_STD forward&lt;_Types&gt;(_Args)...);<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// _HAS_CXX20</span></span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>, <span class="hljs-keyword">class</span>... _Types&gt;<br>_CONSTEXPR20 <span class="hljs-type">void</span> _Construct_in_place(_Ty&amp; _Obj, _Types&amp;&amp;... _Args) <span class="hljs-built_in">noexcept</span>(<br>    is_nothrow_constructible_v&lt;_Ty, _Types...&gt;) &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> _HAS_CXX20</span><br>    <span class="hljs-keyword">if</span> (_STD <span class="hljs-built_in">is_constant_evaluated</span>()) &#123;<br>        <span class="hljs-function">_STD <span class="hljs-title">construct_at</span><span class="hljs-params">(_STD addressof(_Obj), _STD forward&lt;_Types&gt;(_Args)...)</span></span>;<br>    &#125; <span class="hljs-keyword">else</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// _HAS_CXX20</span></span><br>    &#123;<br>        ::<span class="hljs-built_in">new</span> (_Voidify_iter(_STD <span class="hljs-built_in">addressof</span>(_Obj))) _Ty(_STD forward&lt;_Types&gt;(_Args)...);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>&gt;<br><span class="hljs-type">void</span> _Default_construct_in_place(_Ty&amp; _Obj) <span class="hljs-built_in">noexcept</span>(is_nothrow_default_constructible_v&lt;_Ty&gt;) &#123;<br>    ::<span class="hljs-keyword">new</span> (_Voidify_iter(_STD <span class="hljs-built_in">addressof</span>(_Obj))) _Ty;<br>&#125;<br></code></pre></td></tr></table></figure><p>We can find the counters in <code>_Ref_count_base</code> and the target object (<code>_Storage</code> in <code>_Ref_count_obj2</code>) are allocated at the same time.</p><p>There are at lease 2 advantages in this way:</p><ul><li>Allocates memory at a tight memory space.</li><li>Allocates just once to reduce the number of system calls.</li></ul><h3 id="The-implementation-of-make-shared"><a href="#The-implementation-of-make-shared" class="headerlink" title="The implementation of make_shared"></a>The implementation of <code>make_shared</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>, <span class="hljs-keyword">class</span>... _Types&gt;<br>_NODISCARD<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> _HAS_CXX20</span><br>    <span class="hljs-type">enable_if_t</span>&lt;!is_array_v&lt;_Ty&gt;, shared_ptr&lt;_Ty&gt;&gt;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span> <span class="hljs-comment">// _HAS_CXX20</span></span><br>    shared_ptr&lt;_Ty&gt;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// _HAS_CXX20</span></span><br>    <span class="hljs-built_in">make_shared</span>(_Types&amp;&amp;... _Args) &#123; <span class="hljs-comment">// make a shared_ptr to non-array object</span><br>    <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> _Rx = <span class="hljs-keyword">new</span> _Ref_count_obj2&lt;_Ty&gt;(_STD forward&lt;_Types&gt;(_Args)...);<br>    shared_ptr&lt;_Ty&gt; _Ret;<br>    _Ret._Set_ptr_rep_and_enable_shared(_STD <span class="hljs-built_in">addressof</span>(_Rx-&gt;_Storage._Value), _Rx);<br>    <span class="hljs-keyword">return</span> _Ret;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Deleter-in-shared-ptr"><a href="#Deleter-in-shared-ptr" class="headerlink" title="Deleter in shared_ptr"></a>Deleter in <code>shared_ptr</code></h2><p>An interesting point:</p><pre><code class=" mermaid">classDiagramshared_ptr o-- _Ref_countshared_ptr: - element_type* _ptr_Ref_count: - _Ty* _ptr_Ref_count: - _Destroy()_Ref_count: - _Delete_this()</code></pre><p>There are 2 pointers:</p><ul><li><code>element_type* _ptr</code>: the pointer of specified type for <code>shared_ptr&lt;T&gt;</code></li><li><code>_Ty* _ptr</code>: the pointer approximating to the real type</li></ul><p>Maybe it’s still a little confusing.</p><p>Given a base class and its derived class:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Base</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;Base&quot;</span> &lt;&lt; std::endl; &#125;<br>    ~<span class="hljs-built_in">Base</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;~Base&quot;</span> &lt;&lt; std::endl; &#125;;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span> : <span class="hljs-keyword">public</span> Base &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Derived</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;Derived&quot;</span> &lt;&lt; std::endl; &#125;<br>    ~<span class="hljs-built_in">Derived</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;~Derived&quot;</span> &lt;&lt; std::endl; &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>Note that their destructors aren’t marked as <code>virtual</code>.</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123; Base* base = <span class="hljs-keyword">new</span> Derived; &#125;<br>&#123; <span class="hljs-function">std::unique_ptr&lt;Base&gt; <span class="hljs-title">base</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Derived)</span></span>; &#125;<br>&#123; <span class="hljs-function">std::shared_ptr&lt;Base&gt; <span class="hljs-title">base</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Derived)</span></span>; &#125;<br></code></pre></td></tr></table></figure><p>The first two cases will result in memory leak, but the last one will release correctly. Why?</p><p>The reason why it’s special to bind an object with <code>shared_ptr</code> is that <code>shared_ptr</code> has <code>_Ref_count</code> leveraging the real pointer and real deleter!<br>More specifically, in this case, <code>element_type*</code> in <code>shared_ptr&lt;T&gt;</code> refers to <code>Base*</code>. But <code>_Ref_count&lt;_Ty&gt;</code> is specialized as <code>_Ref_count&lt;Derived&gt;</code> thus <code>_Ty*</code> in <code>_Ref_count</code> refers to <code>Derived*</code>, and <code>_Destroy()</code> is to delete a <code>Derived</code> object.</p><p>However, the example below would still result in memory leak.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>    Base *base = <span class="hljs-keyword">new</span> Derived;<br>    <span class="hljs-function">std::shared_ptr&lt;Base&gt; <span class="hljs-title">base_ptr</span><span class="hljs-params">(base)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Because the original type of the object has lost when the <code>shared_ptr</code> is constructed.</p><h2 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a><code>weak_ptr</code></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">weak_ptr</span> : <span class="hljs-keyword">public</span> _Ptr_base&lt;_Ty&gt; &#123; <span class="hljs-comment">// class for pointer to reference counted resource</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// When a constructor is converting from weak_ptr&lt;_Ty2&gt; to weak_ptr&lt;_Ty&gt;, the below type trait intentionally asks</span><br>    <span class="hljs-comment">// whether it would be possible to static_cast from _Ty* to const _Ty2*; see N4901 [expr.static.cast]/11.</span><br><br>    <span class="hljs-comment">// Primary template, the value is used when the substitution fails.</span><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>, <span class="hljs-keyword">class</span> = <span class="hljs-type">const</span> _Ty2*&gt;<br>    <span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> _Must_avoid_expired_conversions_from = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-comment">// Template specialization, the value is used when the substitution succeeds.</span><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    <span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span><br>        _Must_avoid_expired_conversions_from&lt;_Ty2, <span class="hljs-keyword">decltype</span>(<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">const</span> _Ty2*&gt;(<span class="hljs-built_in">static_cast</span>&lt;_Ty*&gt;(<span class="hljs-literal">nullptr</span>)))&gt; =<br>            <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">weak_ptr</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123;&#125;<br><br>    <span class="hljs-built_in">weak_ptr</span>(<span class="hljs-type">const</span> weak_ptr&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">this</span>-&gt;_Weakly_construct_from(_Other); <span class="hljs-comment">// same type, no conversion</span><br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>, <span class="hljs-type">enable_if_t</span>&lt;_SP_pointer_compatible&lt;_Ty2, _Ty&gt;::value, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">weak_ptr</span>(<span class="hljs-type">const</span> shared_ptr&lt;_Ty2&gt;&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">this</span>-&gt;_Weakly_construct_from(_Other); <span class="hljs-comment">// shared_ptr keeps resource alive during conversion</span><br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>, <span class="hljs-type">enable_if_t</span>&lt;_SP_pointer_compatible&lt;_Ty2, _Ty&gt;::value, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">weak_ptr</span>(<span class="hljs-type">const</span> weak_ptr&lt;_Ty2&gt;&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> _Avoid_expired_conversions = _Must_avoid_expired_conversions_from&lt;_Ty2&gt;;<br><br>        <span class="hljs-function"><span class="hljs-keyword">if</span> <span class="hljs-title">constexpr</span> <span class="hljs-params">(_Avoid_expired_conversions)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>-&gt;_Weakly_convert_lvalue_avoiding_expired_conversions(_Other);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">this</span>-&gt;_Weakly_construct_from(_Other);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">weak_ptr</span>(weak_ptr&amp;&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">this</span>-&gt;_Move_construct_from(_STD <span class="hljs-built_in">move</span>(_Other));<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>, <span class="hljs-type">enable_if_t</span>&lt;_SP_pointer_compatible&lt;_Ty2, _Ty&gt;::value, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">weak_ptr</span>(weak_ptr&lt;_Ty2&gt;&amp;&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> _Avoid_expired_conversions = _Must_avoid_expired_conversions_from&lt;_Ty2&gt;;<br><br>        <span class="hljs-function"><span class="hljs-keyword">if</span> <span class="hljs-title">constexpr</span> <span class="hljs-params">(_Avoid_expired_conversions)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>-&gt;_Weakly_convert_rvalue_avoiding_expired_conversions(_STD <span class="hljs-built_in">move</span>(_Other));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">this</span>-&gt;_Move_construct_from(_STD <span class="hljs-built_in">move</span>(_Other));<br>        &#125;<br>    &#125;<br><br>    ~<span class="hljs-built_in">weak_ptr</span>() <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">this</span>-&gt;_Decwref();<br>    &#125;<br><br>    weak_ptr&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> weak_ptr&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-built_in">weak_ptr</span>(_Right).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    weak_ptr&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> weak_ptr&lt;_Ty2&gt;&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-built_in">weak_ptr</span>(_Right).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    weak_ptr&amp; <span class="hljs-keyword">operator</span>=(weak_ptr&amp;&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-built_in">weak_ptr</span>(_STD <span class="hljs-built_in">move</span>(_Right)).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    weak_ptr&amp; <span class="hljs-keyword">operator</span>=(weak_ptr&lt;_Ty2&gt;&amp;&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-built_in">weak_ptr</span>(_STD <span class="hljs-built_in">move</span>(_Right)).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    weak_ptr&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> shared_ptr&lt;_Ty2&gt;&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-built_in">weak_ptr</span>(_Right).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reset</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123; <span class="hljs-comment">// release resource, convert to null weak_ptr object</span><br>        weak_ptr&#123;&#125;.<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(weak_ptr&amp; _Other)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>-&gt;_Swap(_Other);<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD <span class="hljs-type">bool</span> <span class="hljs-title">expired</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">use_count</span>() == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD shared_ptr&lt;_Ty&gt; <span class="hljs-title">lock</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123; <span class="hljs-comment">// convert to shared_ptr</span><br>        shared_ptr&lt;_Ty&gt; _Ret;<br>        (<span class="hljs-type">void</span>) _Ret._Construct_from_weak(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> _Ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>cpp</category>
      
      <category>stl</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pointer</tag>
      
      <tag>cpp</tag>
      
      <tag>cpp11</tag>
      
      <tag>stl</tag>
      
      <tag>smart_pointer</tag>
      
      <tag>shared_ptr</tag>
      
      <tag>enable_shared_from_this</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>What is std::unique_ptr</title>
    <link href="/Dev/C++/STL/What-is-std-unique-ptr/"/>
    <url>/Dev/C++/STL/What-is-std-unique-ptr/</url>
    
    <content type="html"><![CDATA[<h2 id="Smart-Pointer"><a href="#Smart-Pointer" class="headerlink" title="Smart Pointer"></a>Smart Pointer</h2><p>As we know, using raw pointer has the opportunity to reault in memory leak if we forget to delete it or delete it with a wrong way. Therefore, there are potential risks.</p><p>In traditional C++, there is <code>std::auto_ptr</code> but it will transfer the ownership of the target object after copying <code>std::auto_ptr</code>. It means that the original auto_ptr is deprecated and it couldn’t be used anymore, but we don’t have methods to avoid actually. It depends to programmers’ self-consciousness. It is also a risk.</p><h2 id="std-unique-ptr"><a href="#std-unique-ptr" class="headerlink" title="std::unique_ptr"></a>std::unique_ptr</h2><p>After C++11, <code>std::unique_ptr</code> is used widely and it’s often a best practice for controlling the life cycle of an object. It means the unique handler leveraging the ownership of the target object. The ownership can’t be copied it can only be transformed by <code>std::move</code>.</p><h3 id="The-declaration-of-std-unique-ptr"><a href="#The-declaration-of-std-unique-ptr" class="headerlink" title="The declaration of std::unique_ptr"></a>The declaration of <code>std::unique_ptr</code></h3><p>The design philosophy of <code>std::unique_ptr</code> is simple. It’s just a wrapper of a raw pointer and it controls the life cycle of the target object by RAII (especially within its destructor).</p><div class="note note-info">            <p>The implementation of <code>std::unique_ptr</code> shown in this page is from MSVC STL.</p>          </div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx</span> = default_delete&lt;_Ty&gt;&gt;<br><span class="hljs-keyword">class</span> unique_ptr;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">default_delete</span> &#123; <span class="hljs-comment">// default deleter for unique_ptr</span><br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">default_delete</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>= <span class="hljs-keyword">default</span>;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>, <span class="hljs-type">enable_if_t</span>&lt;is_convertible_v&lt;_Ty2*, _Ty*&gt;, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">default_delete</span>(<span class="hljs-type">const</span> default_delete&lt;_Ty2&gt;&amp;) <span class="hljs-keyword">noexcept</span> &#123;&#125;<br><br>    <span class="hljs-type">void</span> <span class="hljs-built_in">operator</span>()(_Ty* _Ptr) <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> <span class="hljs-comment">/* strengthened */</span> &#123; <span class="hljs-comment">// delete a pointer</span><br>        <span class="hljs-built_in">static_assert</span>(<span class="hljs-number">0</span> &lt; <span class="hljs-built_in">sizeof</span>(_Ty), <span class="hljs-string">&quot;can&#x27;t delete an incomplete type&quot;</span>);<br>        <span class="hljs-keyword">delete</span> _Ptr;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><code>default_delete</code> is a default deleter for the target type <code>_Ty</code>.</p><div class="note note-primary">            <p>There is an interesting point here:<br>The deleter is set in the template argument list instead of as a member variable of <code>unique_ptr</code>. The purpose of this kind of implementation is to save abstraction overhead as far as possible. It indicates the idea of <strong>zero overhead abstraction</strong> in C++.</p>          </div><h3 id="The-implementation-of-std-unique-ptr"><a href="#The-implementation-of-std-unique-ptr" class="headerlink" title="The implementation of std::unique_ptr"></a>The implementation of <code>std::unique_ptr</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx</span> <span class="hljs-comment">/* = default_delete&lt;_Ty&gt; */</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">unique_ptr</span> &#123; <span class="hljs-comment">// non-copyable pointer to an object</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">using</span> pointer      = <span class="hljs-keyword">typename</span> _Get_deleter_pointer_type&lt;_Ty, <span class="hljs-type">remove_reference_t</span>&lt;_Dx&gt;&gt;::type; <span class="hljs-comment">// `_Ty*` in most situations</span><br>    <span class="hljs-keyword">using</span> element_type = _Ty;<br>    <span class="hljs-keyword">using</span> deleter_type = _Dx;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx2</span> = _Dx, _Unique_ptr_enable_default_t&lt;_Dx2&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-keyword">constexpr</span> <span class="hljs-built_in">unique_ptr</span>() <span class="hljs-keyword">noexcept</span> : _Mypair(_Zero_then_variadic_args_t&#123;&#125;) &#123;&#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> _Dx2 = _Dx, _Unique_ptr_enable_default_t&lt;_Dx2&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-keyword">constexpr</span> <span class="hljs-built_in">unique_ptr</span>(<span class="hljs-type">nullptr_t</span>) <span class="hljs-keyword">noexcept</span> : _Mypair(_Zero_then_variadic_args_t&#123;&#125;) &#123;&#125;<br><br>    unique_ptr&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">nullptr_t</span>) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-built_in">reset</span>();<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// The Standard depicts these constructors that accept pointer as taking type_identity_t&lt;pointer&gt; to inhibit CTAD.</span><br>    <span class="hljs-comment">// Since pointer is an opaque type alias in our implementation, it inhibits CTAD without extra decoration.</span><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx2</span> = _Dx, _Unique_ptr_enable_default_t&lt;_Dx2&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-keyword">explicit</span> <span class="hljs-built_in">unique_ptr</span>(pointer _Ptr) <span class="hljs-keyword">noexcept</span> : _Mypair(_Zero_then_variadic_args_t&#123;&#125;, _Ptr) &#123;&#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> _Dx2 = _Dx, <span class="hljs-type">enable_if_t</span>&lt;is_constructible_v&lt;_Dx2, <span class="hljs-type">const</span> _Dx2&amp;&gt;, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">unique_ptr</span>(pointer _Ptr, <span class="hljs-type">const</span> _Dx&amp; _Dt) <span class="hljs-keyword">noexcept</span> : _Mypair(_One_then_variadic_args_t&#123;&#125;, _Dt, _Ptr) &#123;&#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> _Dx2                                                                            = _Dx,<br>        <span class="hljs-type">enable_if_t</span>&lt;conjunction_v&lt;negation&lt;is_reference&lt;_Dx2&gt;&gt;, is_constructible&lt;_Dx2, _Dx2&gt;&gt;, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">unique_ptr</span>(pointer _Ptr, _Dx&amp;&amp; _Dt) <span class="hljs-keyword">noexcept</span> : _Mypair(_One_then_variadic_args_t&#123;&#125;, _STD <span class="hljs-built_in">move</span>(_Dt), _Ptr) &#123;&#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> _Dx2                                                                                      = _Dx,<br>        <span class="hljs-type">enable_if_t</span>&lt;conjunction_v&lt;is_reference&lt;_Dx2&gt;, is_constructible&lt;_Dx2, <span class="hljs-type">remove_reference_t</span>&lt;_Dx2&gt;&gt;&gt;, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">unique_ptr</span>(pointer, <span class="hljs-type">remove_reference_t</span>&lt;_Dx&gt;&amp;&amp;) = <span class="hljs-keyword">delete</span>;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx2</span> = _Dx, <span class="hljs-type">enable_if_t</span>&lt;is_move_constructible_v&lt;_Dx2&gt;, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">unique_ptr</span>(unique_ptr&amp;&amp; _Right) <span class="hljs-keyword">noexcept</span><br>        : _Mypair(_One_then_variadic_args_t&#123;&#125;, _STD forward&lt;_Dx&gt;(_Right.<span class="hljs-built_in">get_deleter</span>()), _Right.<span class="hljs-built_in">release</span>()) &#123;&#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> _Ty2, <span class="hljs-keyword">class</span> _Dx2,<br>        <span class="hljs-type">enable_if_t</span>&lt;<br>            conjunction_v&lt;negation&lt;is_array&lt;_Ty2&gt;&gt;, is_convertible&lt;<span class="hljs-keyword">typename</span> unique_ptr&lt;_Ty2, _Dx2&gt;::pointer, pointer&gt;,<br>                <span class="hljs-type">conditional_t</span>&lt;is_reference_v&lt;_Dx&gt;, is_same&lt;_Dx2, _Dx&gt;, is_convertible&lt;_Dx2, _Dx&gt;&gt;&gt;,<br>            <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">unique_ptr</span>(unique_ptr&lt;_Ty2, _Dx2&gt;&amp;&amp; _Right) <span class="hljs-keyword">noexcept</span><br>        : _Mypair(_One_then_variadic_args_t&#123;&#125;, _STD forward&lt;_Dx2&gt;(_Right.<span class="hljs-built_in">get_deleter</span>()), _Right.<span class="hljs-built_in">release</span>()) &#123;&#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> _Ty2, <span class="hljs-keyword">class</span> _Dx2,<br>        <span class="hljs-type">enable_if_t</span>&lt;conjunction_v&lt;negation&lt;is_array&lt;_Ty2&gt;&gt;, is_assignable&lt;_Dx&amp;, _Dx2&gt;,<br>                        is_convertible&lt;<span class="hljs-keyword">typename</span> unique_ptr&lt;_Ty2, _Dx2&gt;::pointer, pointer&gt;&gt;,<br>            <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    unique_ptr&amp; <span class="hljs-keyword">operator</span>=(unique_ptr&lt;_Ty2, _Dx2&gt;&amp;&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-built_in">reset</span>(_Right.<span class="hljs-built_in">release</span>());<br>        _Mypair._Get_first() = _STD forward&lt;_Dx2&gt;(_Right._Mypair._Get_first());<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx2</span> = _Dx, <span class="hljs-type">enable_if_t</span>&lt;is_move_assignable_v&lt;_Dx2&gt;, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    unique_ptr&amp; <span class="hljs-keyword">operator</span>=(unique_ptr&amp;&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> != _STD <span class="hljs-built_in">addressof</span>(_Right)) &#123;<br>            <span class="hljs-built_in">reset</span>(_Right.<span class="hljs-built_in">release</span>());<br>            _Mypair._Get_first() = _STD forward&lt;_Dx&gt;(_Right._Mypair._Get_first());<br>        &#125;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(unique_ptr&amp; _Right)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        _Swap_adl(_Mypair._Myval2, _Right._Mypair._Myval2);<br>        _Swap_adl(_Mypair._Get_first(), _Right._Mypair._Get_first());<br>    &#125;<br><br>    ~<span class="hljs-built_in">unique_ptr</span>() <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">if</span> (_Mypair._Myval2) &#123;<br>            _Mypair._Get_first()(_Mypair._Myval2);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD _Dx&amp; <span class="hljs-title">get_deleter</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _Mypair._Get_first();<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD <span class="hljs-type">const</span> _Dx&amp; <span class="hljs-title">get_deleter</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _Mypair._Get_first();<br>    &#125;<br><br>    _NODISCARD <span class="hljs-type">add_lvalue_reference_t</span>&lt;_Ty&gt; <span class="hljs-keyword">operator</span>*() <span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-title">noexcept</span><span class="hljs-params">(<span class="hljs-keyword">noexcept</span>(*_STD declval&lt;pointer&gt;()))</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> *_Mypair._Myval2;<br>    &#125;<br><br>    _NODISCARD pointer <span class="hljs-keyword">operator</span>-&gt;() <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">return</span> _Mypair._Myval2;<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD pointer <span class="hljs-title">get</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _Mypair._Myval2;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">bool</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">bool</span>&gt;(_Mypair._Myval2);<br>    &#125;<br><br>    <span class="hljs-function">pointer <span class="hljs-title">release</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _STD <span class="hljs-built_in">exchange</span>(_Mypair._Myval2, <span class="hljs-literal">nullptr</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reset</span><span class="hljs-params">(pointer _Ptr = <span class="hljs-literal">nullptr</span>)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        pointer _Old = _STD <span class="hljs-built_in">exchange</span>(_Mypair._Myval2, _Ptr);<br>        <span class="hljs-keyword">if</span> (_Old) &#123;<br>            _Mypair._Get_first()(_Old);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">unique_ptr</span>(<span class="hljs-type">const</span> unique_ptr&amp;) = <span class="hljs-keyword">delete</span>;<br>    unique_ptr&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> unique_ptr&amp;) = <span class="hljs-keyword">delete</span>;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span>, <span class="hljs-keyword">class</span>&gt;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">unique_ptr</span>;<br><br>    _Compressed_pair&lt;_Dx, pointer&gt; _Mypair; <span class="hljs-comment">// A pair of (deleter, _Ty*)</span><br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>Ignore the implementation of <code>template &lt;class _Ty, class _Dx&gt; class unique_ptr&lt;_Ty[], _Dx&gt;</code>.</p></blockquote><h3 id="The-implementation-of-Compressed-pair"><a href="#The-implementation-of-Compressed-pair" class="headerlink" title="The implementation of _Compressed_pair"></a>The implementation of <code>_Compressed_pair</code></h3><ul><li><code>_Zero_then_variadic_args_t</code> indicates it will all used to construct <code>_Ty2</code> object with all given arguments.</li><li><code>_One_then_variadic_args_t</code> indicates that the <code>_Ty1</code> object is constructed with the first argument and the <code>_Ty2</code> object is constructed with the rest arguments.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>, <span class="hljs-type">bool</span> = is_empty_v&lt;_Ty1&gt; &amp;&amp; !is_final_v&lt;_Ty1&gt;&gt;<br><span class="hljs-keyword">class</span> _Compressed_pair <span class="hljs-keyword">final</span> : <span class="hljs-keyword">private</span> _Ty1 &#123; <span class="hljs-comment">// store a pair of values, deriving from empty first</span><br><span class="hljs-keyword">public</span>:<br>    _Ty2 _Myval2;<br><br>    <span class="hljs-keyword">using</span> _Mybase = _Ty1; <span class="hljs-comment">// for visualization</span><br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span>... _Other2&gt;<br>    <span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">explicit</span> _Compressed_pair(_Zero_then_variadic_args_t, _Other2&amp;&amp;... _Val2) <span class="hljs-built_in">noexcept</span>(<br>        conjunction_v&lt;is_nothrow_default_constructible&lt;_Ty1&gt;, is_nothrow_constructible&lt;_Ty2, _Other2...&gt;&gt;)<br>        : _Ty1(), _Myval2(_STD forward&lt;_Other2&gt;(_Val2)...) &#123;&#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Other1</span>, <span class="hljs-keyword">class</span>... _Other2&gt;<br>    <span class="hljs-keyword">constexpr</span> _Compressed_pair(_One_then_variadic_args_t, _Other1&amp;&amp; _Val1, _Other2&amp;&amp;... _Val2) <span class="hljs-built_in">noexcept</span>(<br>        conjunction_v&lt;is_nothrow_constructible&lt;_Ty1, _Other1&gt;, is_nothrow_constructible&lt;_Ty2, _Other2...&gt;&gt;)<br>        : _Ty1(_STD forward&lt;_Other1&gt;(_Val1)), _Myval2(_STD forward&lt;_Other2&gt;(_Val2)...) &#123;&#125;<br><br>    <span class="hljs-keyword">constexpr</span> _Ty1&amp; _Get_first() <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">constexpr</span> <span class="hljs-type">const</span> _Ty1&amp; _Get_first() <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">_Compressed_pair</span>&lt;_Ty1, _Ty2, <span class="hljs-literal">false</span>&gt; <span class="hljs-keyword">final</span> &#123; <span class="hljs-comment">// store a pair of values, not deriving from first</span><br><span class="hljs-keyword">public</span>:<br>    _Ty1 _Myval1;<br>    _Ty2 _Myval2;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span>... _Other2&gt;<br>    <span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">explicit</span> _Compressed_pair(_Zero_then_variadic_args_t, _Other2&amp;&amp;... _Val2) <span class="hljs-built_in">noexcept</span>(<br>        conjunction_v&lt;is_nothrow_default_constructible&lt;_Ty1&gt;, is_nothrow_constructible&lt;_Ty2, _Other2...&gt;&gt;)<br>        : _Myval1(), _Myval2(_STD forward&lt;_Other2&gt;(_Val2)...) &#123;&#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Other1</span>, <span class="hljs-keyword">class</span>... _Other2&gt;<br>    <span class="hljs-keyword">constexpr</span> _Compressed_pair(_One_then_variadic_args_t, _Other1&amp;&amp; _Val1, _Other2&amp;&amp;... _Val2) <span class="hljs-built_in">noexcept</span>(<br>        conjunction_v&lt;is_nothrow_constructible&lt;_Ty1, _Other1&gt;, is_nothrow_constructible&lt;_Ty2, _Other2...&gt;&gt;)<br>        : _Myval1(_STD forward&lt;_Other1&gt;(_Val1)), _Myval2(_STD forward&lt;_Other2&gt;(_Val2)...) &#123;&#125;<br><br>    <span class="hljs-keyword">constexpr</span> _Ty1&amp; _Get_first() <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">return</span> _Myval1;<br>    &#125;<br><br>    <span class="hljs-keyword">constexpr</span> <span class="hljs-type">const</span> _Ty1&amp; _Get_first() <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">return</span> _Myval1;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>Note that</strong> <code>_Compressed_pair&lt;_Ty1, _Ty2, true&gt;</code> is used for empty base class optimization. It indicates we don’t have to allocate a memory space for it.</p><p>How to understand <code>template &lt;class _Ty1, class _Ty2, bool = is_empty_v&lt;_Ty1&gt; &amp;&amp; !is_final_v&lt;_Ty1&gt;&gt;</code>?</p><ul><li>If <code>is_empty_v&lt;_Ty1&gt;</code> is false, we have to allocate a memory space for <code>_Ty1</code> (deleter) in <code>_Compressed_pair&lt;_Ty1, _Ty2, false&gt;</code>.</li><li>If <code>is_final_v&lt;_Ty1&gt;</code> is true, <code>_Compressed_pair</code> cann’t inherit from <code>_Ty1</code> hence we have to allocate a memory space for it in <code>_Compressed_pair&lt;_Ty1, _Ty2, false&gt;</code>.</li></ul><h2 id="The-implementation-of-std-make-unique"><a href="#The-implementation-of-std-make-unique" class="headerlink" title="The implementation of std::make_unique"></a>The implementation of <code>std::make_unique</code></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>, <span class="hljs-keyword">class</span>... _Types, <span class="hljs-type">enable_if_t</span>&lt;!is_array_v&lt;_Ty&gt;, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>_NODISCARD unique_ptr&lt;_Ty&gt; <span class="hljs-built_in">make_unique</span>(_Types&amp;&amp;... _Args) &#123; <span class="hljs-comment">// make a unique_ptr</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">unique_ptr</span>&lt;_Ty&gt;(<span class="hljs-keyword">new</span> _Ty(_STD forward&lt;_Types&gt;(_Args)...));<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>, <span class="hljs-type">enable_if_t</span>&lt;is_array_v&lt;_Ty&gt; &amp;&amp; extent_v&lt;_Ty&gt; == <span class="hljs-number">0</span>, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>_NODISCARD unique_ptr&lt;_Ty&gt; <span class="hljs-built_in">make_unique</span>(<span class="hljs-type">const</span> <span class="hljs-type">size_t</span> _Size) &#123; <span class="hljs-comment">// make a unique_ptr</span><br>    <span class="hljs-keyword">using</span> _Elem = <span class="hljs-type">remove_extent_t</span>&lt;_Ty&gt;;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">unique_ptr</span>&lt;_Ty&gt;(<span class="hljs-keyword">new</span> _Elem[_Size]());<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>, <span class="hljs-keyword">class</span>... _Types, <span class="hljs-type">enable_if_t</span>&lt;extent_v&lt;_Ty&gt; != <span class="hljs-number">0</span>, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br><span class="hljs-type">void</span> <span class="hljs-built_in">make_unique</span>(_Types&amp;&amp;...) = <span class="hljs-keyword">delete</span>;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> _Ix = <span class="hljs-number">0</span>&gt;<br>_INLINE_VAR <span class="hljs-keyword">constexpr</span> <span class="hljs-type">size_t</span> extent_v = <span class="hljs-number">0</span>; <span class="hljs-comment">// determine extent of dimension _Ix of array _Ty</span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>, <span class="hljs-type">size_t</span> _Nx&gt;<br>_INLINE_VAR <span class="hljs-keyword">constexpr</span> <span class="hljs-type">size_t</span> extent_v&lt;_Ty[_Nx], <span class="hljs-number">0</span>&gt; = _Nx;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> _Ix, <span class="hljs-type">size_t</span> _Nx&gt;<br>_INLINE_VAR <span class="hljs-keyword">constexpr</span> <span class="hljs-type">size_t</span> extent_v&lt;_Ty[_Nx], _Ix&gt; = extent_v&lt;_Ty, _Ix - <span class="hljs-number">1</span>&gt;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> _Ix&gt;<br>_INLINE_VAR <span class="hljs-keyword">constexpr</span> <span class="hljs-type">size_t</span> extent_v&lt;_Ty[], _Ix&gt; = extent_v&lt;_Ty, _Ix - <span class="hljs-number">1</span>&gt;;<br></code></pre></td></tr></table></figure><p>It indicates that it’s available to write below code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">auto</span> p1 = std::<span class="hljs-built_in">make_unique</span>&lt;<span class="hljs-type">int</span>&gt;();<br><span class="hljs-keyword">auto</span> p2 = std::<span class="hljs-built_in">make_unique</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">5</span>);<br><span class="hljs-keyword">auto</span> p3 = std::<span class="hljs-built_in">make_unique</span>&lt;<span class="hljs-type">int</span>[]&gt;(<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><p>But it’s not allowed that:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">auto</span> p4 = std::<span class="hljs-built_in">make_unique</span>&lt;<span class="hljs-type">int</span>[<span class="hljs-number">5</span>]&gt;();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>cpp</category>
      
      <category>stl</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pointer</tag>
      
      <tag>cpp</tag>
      
      <tag>cpp11</tag>
      
      <tag>stl</tag>
      
      <tag>smart_pointer</tag>
      
      <tag>unique_ptr</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Configure Cmake</title>
    <link href="/Configuration/Cmake/Configure-Cmake/"/>
    <url>/Configuration/Cmake/Configure-Cmake/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p>A basic <code>CmakeLists.txt</code> example from <a href="https://github.com/wasPrime/WebServer">a WebServer library</a>.<br>Help to quickly start a project.</p>          </div><h2 id="Basic-file-tree"><a href="#Basic-file-tree" class="headerlink" title="Basic file tree"></a>Basic file tree</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs log">.<br>├── CMakeLists.txt<br>├── src<br>│   ├── CMakeLists.txt<br>│   ├── Implementation.cc<br>│   └── include<br>│       ├── Header1.h<br>│       └── Header2.h<br>└── test<br>    ├── CMakeLists.txt<br>    └── Test.cc<br></code></pre></td></tr></table></figure><h2 id="Cmake-lists"><a href="#Cmake-lists" class="headerlink" title="Cmake lists"></a>Cmake lists</h2><h3 id="CmakeLists-txt-in-the-root-path"><a href="#CmakeLists-txt-in-the-root-path" class="headerlink" title="CmakeLists.txt in the root path"></a><code>CmakeLists.txt</code> in the root path</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># CMake configuration file of WebServer</span><br><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.10</span>)<br><br><span class="hljs-comment"># set language std</span><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">20</span>)<br><span class="hljs-comment"># set language std and disable fallback to a previous version</span><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="hljs-keyword">ON</span>)<br><span class="hljs-comment"># Disable CXX Syntax EXTENSIONS</span><br><span class="hljs-keyword">set</span>(CMAKE_CXX_EXTENSIONS <span class="hljs-keyword">OFF</span>)<br><span class="hljs-keyword">set</span>(CMAKE_EXPORT_COMPILE_COMMANDS <span class="hljs-keyword">ON</span>)<br><br><span class="hljs-keyword">project</span>(WebServer<br>        VERSION <span class="hljs-number">0.1</span><br>        DESCRIPTION <span class="hljs-string">&quot;WebServer&quot;</span><br>        LANGUAGES CXX<br>        )<br><br><span class="hljs-comment"># People keep running CMake in the wrong folder, completely nuking their project or creating weird bugs.</span><br><span class="hljs-comment"># This checks if you&#x27;re running CMake from a folder that already has CMakeLists.txt.</span><br><span class="hljs-comment"># Importantly, this catches the common case of running it from the root directory.</span><br><span class="hljs-keyword">file</span>(TO_CMAKE_PATH <span class="hljs-string">&quot;$&#123;PROJECT_BINARY_DIR&#125;/CMakeLists.txt&quot;</span> PATH_TO_CMAKELISTS_TXT)<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">EXISTS</span> <span class="hljs-string">&quot;$&#123;PATH_TO_CMAKELISTS_TXT&#125;&quot;</span>)<br>    <span class="hljs-keyword">message</span>(FATAL_ERROR <span class="hljs-string">&quot;Run CMake from a build subdirectory! \&quot;mkdir build ; cd build ; cmake .. \&quot; \</span><br><span class="hljs-string">    Some junk files were created in this folder (CMakeCache.txt, CMakeFiles); you should delete those.&quot;</span>)<br><span class="hljs-keyword">endif</span> ()<br><br><span class="hljs-comment">######################################################################################################################</span><br><span class="hljs-comment"># COMPILER SETUP</span><br><span class="hljs-comment">######################################################################################################################</span><br><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-string">&quot;src/include&quot;</span>)<br><br><span class="hljs-keyword">set</span>(BASIC_CXXFLAGS <span class="hljs-string">&quot;-O2 -g -pipe -fPIC -Wall -Wextra -Werror -pedantic-errors -pthread&quot;</span>)<br><span class="hljs-keyword">set</span>(EXTRA_WARNINGS <span class="hljs-string">&quot;-Wnon-virtual-dtor -Wold-style-cast -Woverloaded-virtual -Wsign-promo -Wswitch-default -Wfloat-equal -Wshadow -Wcast-qual -Wextra-semi -Wno-unused-parameter -Wno-attributes&quot;</span>)<br><br><span class="hljs-comment"># Compiler flags.</span><br><span class="hljs-keyword">set</span>(CMAKE_CXX_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; $&#123;BASIC_CXXFLAGS&#125; $&#123;EXTRA_WARNINGS&#125;&quot;</span>)<br><span class="hljs-comment"># cmake -DCMAKE_BUILD_TYPE=DEBUG ..</span><br><span class="hljs-comment"># set(CMAKE_CXX_FLAGS_DEBUG &quot;$&#123;CMAKE_CXX_FLAGS_DEBUG&#125; -O0 -g -fno-omit-frame-pointer -fno-optimize-sibling-calls&quot;)</span><br><span class="hljs-keyword">set</span>(CMAKE_EXE_LINKER_FLAGS  <span class="hljs-string">&quot;$&#123;CMAKE_EXE_LINKER_FLAGS&#125; -fPIC&quot;</span>)<br><span class="hljs-keyword">set</span>(CMAKE_SHARED_LINKER_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_SHARED_LINKER_FLAGS&#125; -fPIC&quot;</span>)<br><span class="hljs-keyword">set</span>(CMAKE_STATIC_LINKER_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_STATIC_LINKER_FLAGS&#125; -fPIC&quot;</span>)<br><br><span class="hljs-keyword">set</span>(GCC_COVERAGE_LINK_FLAGS <span class="hljs-string">&quot;-fPIC&quot;</span>)<br><span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;CMAKE_CXX_FLAGS: $&#123;CMAKE_CXX_FLAGS&#125;&quot;</span>)<br><span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;CMAKE_CXX_FLAGS_DEBUG: $&#123;CMAKE_CXX_FLAGS_DEBUG&#125;&quot;</span>)<br><span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;CMAKE_EXE_LINKER_FLAGS: $&#123;CMAKE_EXE_LINKER_FLAGS&#125;&quot;</span>)<br><span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;CMAKE_SHARED_LINKER_FLAGS: $&#123;CMAKE_SHARED_LINKER_FLAGS&#125;&quot;</span>)<br><br><span class="hljs-keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY <span class="hljs-variable">$&#123;CMAKE_BINARY_DIR&#125;</span>/bin)<br><span class="hljs-keyword">set</span>(CMAKE_ARCHIVE_OUTPUT_DIRECTORY <span class="hljs-variable">$&#123;CMAKE_BINARY_DIR&#125;</span>/lib)<br><span class="hljs-keyword">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY <span class="hljs-variable">$&#123;CMAKE_BINARY_DIR&#125;</span>/lib)<br><br><span class="hljs-keyword">add_subdirectory</span>(src)<br><span class="hljs-keyword">add_subdirectory</span>(<span class="hljs-keyword">test</span>)<br><br><span class="hljs-comment">######################################################################################################################</span><br><span class="hljs-comment"># COMPILER END</span><br><span class="hljs-comment">######################################################################################################################</span><br></code></pre></td></tr></table></figure><h3 id="CmakeLists-txt-in-folder-src"><a href="#CmakeLists-txt-in-folder-src" class="headerlink" title="CmakeLists.txt in folder src"></a><code>CmakeLists.txt</code> in folder src</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">file</span>(GLOB resources *.cc)<br><span class="hljs-keyword">set</span>(server_shared_name server_shared)<br><span class="hljs-keyword">add_library</span>(<span class="hljs-variable">$&#123;server_shared_name&#125;</span> SHARED <span class="hljs-variable">$&#123;resources&#125;</span>)<br></code></pre></td></tr></table></figure><h3 id="CmakeLists-txt-in-folder-test"><a href="#CmakeLists-txt-in-folder-test" class="headerlink" title="CmakeLists.txt in folder test"></a><code>CmakeLists.txt</code> in folder test</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">file</span>(GLOB test_resources *.cc)<br><br><span class="hljs-keyword">foreach</span>(test_source <span class="hljs-variable">$&#123;test_resources&#125;</span>)<br>    <span class="hljs-comment"># Create binary names from filenames</span><br>    <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;test file path $&#123;test_source&#125;&quot;</span>)<br><br>    <span class="hljs-keyword">get_filename_component</span>(test_filename <span class="hljs-variable">$&#123;test_source&#125;</span> NAME)<br>    <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;test filename $&#123;test_filename&#125;&quot;</span>)<br><br>    <span class="hljs-keyword">string</span>(REPLACE <span class="hljs-string">&quot;.cc&quot;</span> <span class="hljs-string">&quot;&quot;</span> test_name <span class="hljs-variable">$&#123;test_filename&#125;</span>)<br>    <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;test name $&#123;test_name&#125;&quot;</span>)<br>    <br>    <span class="hljs-keyword">add_executable</span>(<span class="hljs-variable">$&#123;test_name&#125;</span> <span class="hljs-variable">$&#123;test_source&#125;</span>)<br>    <span class="hljs-keyword">target_link_libraries</span>(<span class="hljs-variable">$&#123;test_name&#125;</span> server_shared pthread)<br><span class="hljs-keyword">endforeach</span>(test_source <span class="hljs-variable">$&#123;test_resources&#125;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>configuration</category>
      
      <category>cmake</category>
      
    </categories>
    
    
    <tags>
      
      <tag>configuration</tag>
      
      <tag>cmake</tag>
      
      <tag>make</tag>
      
      <tag>cmakelists</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>What is pointer</title>
    <link href="/Dev/C/What-is-pointer/"/>
    <url>/Dev/C/What-is-pointer/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>A tutorial for C language beginners.</p>          </div><h2 id="Pointer-is-an-address"><a href="#Pointer-is-an-address" class="headerlink" title="Pointer is an address"></a>Pointer is an address</h2><p>As we all know, a variable or object always has a memory address, either on stack or on heap.</p><p>For example, we suppoese to write a demo1 program like this:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// demo1</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;value: %d, address: %p\n&quot;</span>, i, &amp;i);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>The result on my machine is:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs log">value: 1, address: 0x16fbe348c<br></code></pre></td></tr></table></figure><h3 id="Analysis-of-demo1"><a href="#Analysis-of-demo1" class="headerlink" title="Analysis of demo1"></a>Analysis of demo1</h3><p>The <code>&amp;i</code> is used to get the address of <code>i</code>, and <code>%p</code> is formatted in hexadecimal form.</p><p>So <code>0x16fbe348c</code> is the address of <code>i</code> on my machine in this execution, and it’s probably not going to be this address when I do another execution or when you do an execution. It doesn’t matter, as long as there is an output. :)</p><p>Then there is a relationship between a value and its address:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">        +-----------+<br>value   |   i = 1   |<br>        +-----------+<br>address  0x16fbe348c<br></code></pre></td></tr></table></figure><p>On the other hand, if we have a memory address, it’s easy to read and write the value on this address, as if we can accurately find the target building according to a particular street address.</p><p>Now we can bring in the concept of pointer.</p><p>We may frequently encounter something like <code>int* i_ptr = &amp;i</code>. That’s the pointer. However, we currently have at lease two questions to explain:</p><ol><li>How to understand it in our mind?</li><li>How does pointer relate to the example above？</li></ol><p>In order to clearly answer them, let’s take a look at another example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// demo2</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;value: %d, address: %p\n&quot;</span>, i, &amp;i);<br>    <span class="hljs-type">int</span>* i_ptr = &amp;i;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;value: %p, address: %p\n&quot;</span>, i_ptr, &amp;i_ptr);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>The result on my machine is:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">value: 1, address: 0x16db8f48c<br>value: 0x16db8f48c, address: 0x16db8f480<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p><strong>Tips:</strong></p><ol><li>At this time I did another run, the address of <code>i</code> is <code>0x16db8f48c</code> which is different with that as <code>0x16fbe348c</code> in demo1. It’s normal and I won’t repeat it later.</li><li>The purpose of using <code>%p</code> to output the value of <code>i_ptr</code> is to output the content in hexadecimal. It’s convenient to compare the address of <code>i</code> and the value of <code>i_ptr</code>.</li></ol>          </div><h3 id="Analysis-of-demo2"><a href="#Analysis-of-demo2" class="headerlink" title="Analysis of demo2"></a>Analysis of demo2</h3><p>It’s easy to find that the address of <code>i</code> and the value of <code>i_ptr</code> are the same, <code>0x16db8f48c</code>.</p><p>Based on current information, we can imagine a relationship like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">        +-----------+       +-------------------------+<br>value   |   i = 1   |   ----|   i_ptr = 0x16db8f48c   |<br>        +-----------+   |   +-------------------------+<br>address  0x16db8f48c  &lt;--           0x16db8f480<br></code></pre></td></tr></table></figure><p>What we have just mentioned above is that, if we have a memory address, we can easily access the value on this address. In that way, since the value of <code>i_ptr</code> is actually the address of <code>i</code>, we can access <code>i</code> by <code>*i_ptr</code>. In other words, is’s exactly equivalent between <code>*i_ptr = 2;</code> and <code>i = 2;</code>!</p><p>Now we are able to establish a connection between address and pointer.</p><h2 id="Pointer-is-also-a-value"><a href="#Pointer-is-also-a-value" class="headerlink" title="Pointer is also a value"></a>Pointer is also a value</h2><p>Have you found that a variable is essentially a value on a address either a normal integer <code>i</code> or a pointer <code>i_ptr</code>?</p><p>Every line of C language code would be compiled and transformed to assembly. Actually, there is no concept of data type in memory from assembly’s perspective. Only values one by one in memory space. That’s it.</p><p>We can say <code>int</code> is a value, <code>float</code> is a value, as well as that <code>int*</code> even <code>int**</code> is also a value. Anyway, it’s only a value on a address no matter how the data type changes.</p><p>Wait! Wait a moment! What is <code>int**</code> just mentioned?</p><p>Let’s see a new example before we explain that. It’s an example we may encount when learning the usage of functions in C language.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// demo3</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(<span class="hljs-type">int</span> i_in_change)</span> &#123; i_in_change = <span class="hljs-number">2</span>; &#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;before change, i=%d\n&quot;</span>, i);<br>    change(i);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;after change, i=%d\n&quot;</span>, i);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>The result is:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">before change, i=1<br>after change, i=1<br></code></pre></td></tr></table></figure><p>We would like to change the value of <code>i</code> within the function <code>change</code>, but unfortunately <code>i</code> weren’t changed…</p><p>The textbook would teach you to change it to something like demo4:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// demo4</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(<span class="hljs-type">int</span>* i_ptr)</span> &#123; *i_ptr = <span class="hljs-number">2</span>; &#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;before change, i=%d\n&quot;</span>, i);<br>    change(&amp;i);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;after change, i=%d\n&quot;</span>, i);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>The result would be as expected:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">before change, i=1<br>after change, i=2<br></code></pre></td></tr></table></figure><p>Could you find the exact reason?</p><p>Let’s take a quiz and see what demo5 outputs:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// demo5</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">(<span class="hljs-type">int</span>* i_ptr_in_func)</span> &#123; i_ptr_in_func = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)); &#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> &#123;<br>    <span class="hljs-type">int</span>* i_ptr = <span class="hljs-literal">NULL</span>;<br>    func(i_ptr);<br>    *i_ptr = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*i_ptr=%d\n&quot;</span>, *i_ptr);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>There is a memory leak in demo5. It’s just for demonstration reference.</p>          </div><div class="note note-info">            <p><strong>A little hint:</strong><br>Look back the memory model about value and address we learned just now.</p>          </div><p>The actual result is that a <code>segmentation fault</code> occured. If you could have foreseen this, you certainly had understood it and you wouldn’t have to read on. :)</p><h3 id="Analysis-of-demo3"><a href="#Analysis-of-demo3" class="headerlink" title="Analysis of demo3"></a>Analysis of demo3</h3><p>Firstly, let’s analyze demo3.</p><p>In memory, the <code>i</code> in <code>main</code> like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">        +-----------+<br>value   |   i = 1   |<br>        +-----------+<br>address       a<br></code></pre></td></tr></table></figure><p>When entering the function <code>change</code>, a copy of <code>i</code> is actually copied out as <code>i_in_change</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">        +---------------------+<br>value   |   i_in_change = 1   |<br>        +---------------------+<br>address            b<br></code></pre></td></tr></table></figure><p>Note that the address of <code>i_in_change</code> is <code>b</code> here and the address of <code>i</code> is <code>a</code>. It means they are different variable indeed. After we changed <code>i</code> by <code>i = 2;</code>, it became like:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">        +---------------------+<br>value   |   i_in_change = 2   |<br>        +---------------------+<br>address            b<br></code></pre></td></tr></table></figure><p>But the <code>i</code> in <code>main</code> hasn’t changed at all, so the effect of modifying <code>i</code> in <code>main</code> hasn’t been achieved.</p><h3 id="Analysis-of-demo4"><a href="#Analysis-of-demo4" class="headerlink" title="Analysis of demo4"></a>Analysis of demo4</h3><p>Let’s look at demo4 again.<br>At the beginning, it’s consistent with demo3. The memory space of i in main is as follows:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">        +-----------+<br>value   |   i = 1   |<br>        +-----------+<br>address       a<br></code></pre></td></tr></table></figure><p>When entering the function, <code>i_ptr</code> is as follows:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">        +---------------+        +-----------+<br>value   |   i_ptr = a   |----    |   i = 1   |<br>        +---------------+   |    +-----------+<br>address         b           ---------&gt; a<br></code></pre></td></tr></table></figure><p>Note that the value of <code>i_ptr</code> (<code>a</code>) is the address of <code>i</code>.</p><p>After <code>*i = 2;</code>, <code>i_ptr</code> didn’t change but <code>i</code> was modified:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">        +---------------+        +-----------+<br>value   |   i_ptr = a   |----    |   i = 2   |<br>        +---------------+   |    +-----------+<br>address         b           ---------&gt; a<br></code></pre></td></tr></table></figure><p>We modified <code>i</code> in <code>main</code> successfully by indirect access of the pointer!</p><h3 id="Analysis-of-demo5"><a href="#Analysis-of-demo5" class="headerlink" title="Analysis of demo5"></a>Analysis of demo5</h3><p>Then look at demo5.</p><p><code>i</code> in <code>main</code> is as follows:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">        +----------------------+<br>value   |  i_ptr = NULL (0x0)  |<br>        +----------------------+<br>address             a<br></code></pre></td></tr></table></figure><p><code>i_ptr_in_func</code> is a copy of <code>i_ptr</code> after entering the function <code>func</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">        +------------------------------+<br>value   |  i_ptr_in_func = NULL (0x0)  |<br>        +------------------------------+<br>address                 b<br></code></pre></td></tr></table></figure><p>After <code>i_ptr_in_func = (int*)malloc(sizeof(int));</code>, it became as follows:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">        +-----------------------+       +------------+<br>value   |   i_ptr_in_func = c   |----   |   buffer   |<br>        +-----------------------+   |   +------------+<br>address             b               --------&gt;  c (malloc_address)<br></code></pre></td></tr></table></figure><p><code>i_ptr_in_func</code> changed but <code>i_ptr</code> kept remains. Therefore, for <code>i_ptr</code> it’s equal to the code as follows:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span>* i_ptr = <span class="hljs-literal">NULL</span>;<br>*i_ptr = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>Obviously it’s unavailable.<br>We can find that after passed into a function, the pointer can only modify the value of the pointed object, and it does not make much sense to modify its own value.<br>What if we just want to allocate space for <code>int* i</code> in <code>main</code> in the function <code>func</code>? Check out demo6 below:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// demo6</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">(<span class="hljs-type">int</span>** i_ptr_ptr)</span> &#123; *i_ptr_ptr = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)); &#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> &#123;<br>    <span class="hljs-type">int</span>* i_ptr = <span class="hljs-literal">NULL</span>;<br>    func(&amp;i_ptr);<br>    *i_ptr = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*i_ptr=%d\n&quot;</span>, *i_ptr);<br>    <span class="hljs-built_in">free</span>(i_ptr);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>By analyzing the memory structure from demo1 to demo5, hope you can figure out why demo6 works properly. :)</p><h3 id="Analysis-of-demo6"><a href="#Analysis-of-demo6" class="headerlink" title="Analysis of demo6"></a>Analysis of demo6</h3><div class="note note-info">            <p><strong>Tips:</strong><br>Its transformation in memory model is almost entirely indentical to demo4.</p>          </div><h2 id="Pointer-and-Array"><a href="#Pointer-and-Array" class="headerlink" title="Pointer and Array"></a>Pointer and Array</h2><p>We all know an array is a contiguous amount of memory space. For example, <code>int arr[3];</code> is like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">        +---------+---------+---------+<br>value   |   int   |   int   |   int   |<br>        +---------+---------+---------+<br>address     arr      arr+1     arr+2<br></code></pre></td></tr></table></figure><p><code>arr</code> is actually an address. Based on it, we’ll quickly think of associating pointers with arrays in this way <code>int* p = arr;</code>. Further on, we can use this pointer <code>p</code> to read or modify a particular value of the array by <code>p[0]</code> <code>p[1]</code> <code>p[2]</code>. If <code>x</code> is an index, <code>p[x]</code> means the value offseting some units from the basic address. It’s equivalent to <code>*(p + x)</code> even <code>*((int*)((char*)p + x * sizeof(int)))</code>. That’s it. An arithmetic offset. No magic.</p><div class="note note-warning">            <p>Since <code>p[x]</code> is just the value based on the address accumulated by <code>p</code> and <code>x</code>, <code>x[p]</code> is also available. It’s supported by most compilers, but it’s a heresy, not a best practice. It’s best to know this, but it’s best not to use it. :)</p>          </div>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>c</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>basic</tag>
      
      <tag>pointer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Introduction to C++20 Concepts</title>
    <link href="/Dev/C++/STL/Introduction-to-C-20-Concepts/"/>
    <url>/Dev/C++/STL/Introduction-to-C-20-Concepts/</url>
    
    <content type="html"><![CDATA[<h2 id="Why-we-need-Concepts"><a href="#Why-we-need-Concepts" class="headerlink" title="Why we need Concepts?"></a>Why we need <code>Concepts</code>?</h2><p>If we declare multiple classes:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;...&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span> : <span class="hljs-keyword">public</span> Base &#123;...&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NotDerived</span> &#123;...&#125;;<br></code></pre></td></tr></table></figure><p>I ever met a situation where I would like to deserialize a string expression into an object which must be inherited from <code>Base</code>.</p><p>The original declaration of the parser:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">parse</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; input, std::shared_ptr&lt;T&gt;&amp; output)</span> </span>&#123;...&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">usage</span><span class="hljs-params">()</span> </span>&#123;<br>    std::shared_ptr&lt;Derived&gt; ptr;<br>    <span class="hljs-built_in">assert</span>(<span class="hljs-built_in">parse</span>(<span class="hljs-string">&quot;mock_string&quot;</span>, ptr) == <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>But how can we create an explicit constraint that <code>T</code> inherits from <code>Base</code>?</p><div class="note note-info">            <p>Of course, it’s sufficient to use native pointers.<br>Let’s assume we have to use smart pointers. :)</p>          </div><h2 id="Constraints-are-neccessary-actually"><a href="#Constraints-are-neccessary-actually" class="headerlink" title="Constraints are neccessary actually"></a>Constraints are neccessary actually</h2><p>For readability and debugging, it is necessary to express constaints explicitly.</p><p>Here is a kind of implmentation in C++11:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">typename</span> std::enable_if&lt;std::is_base_of&lt;Base, T&gt;::value, <span class="hljs-type">int</span>&gt;::<span class="hljs-function">type</span><br><span class="hljs-function">  <span class="hljs-title">parse</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; input, std::shared_ptr&lt;T&gt;&amp; output)</span> </span>&#123;...&#125;<br></code></pre></td></tr></table></figure><p>But it’s invasive! We had modified the appearance of the return type <code>int</code>.</p><h3 id="Rewrite-it"><a href="#Rewrite-it" class="headerlink" title="Rewrite it"></a>Rewrite it</h3><p>We can rewrite it in another form:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// `std::enable_if&lt;bool&gt;` is equivalent to `std::enable_if&lt;bool, void&gt;`</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> = <span class="hljs-keyword">typename</span> std::enable_if&lt;std::is_base_of&lt;Base, T&gt;::value&gt;::type&gt;<br><span class="hljs-type">int</span> <span class="hljs-built_in">parse</span>(<span class="hljs-type">const</span> std::string&amp; input, std::shared_ptr&lt;T&gt;&amp; output) &#123;...&#125;<br></code></pre></td></tr></table></figure><p>As our common feeling, it’s still ugly. :(</p><h3 id="Rewrite-it-again"><a href="#Rewrite-it-again" class="headerlink" title="Rewrite it again"></a>Rewrite it again</h3><div class="note note-info">            <p><strong>For type traits:</strong><br>After C++14 <code>xxx_t&lt;T&gt;</code> is available and it’s equivalent to <code>xxx&lt;T&gt;::type</code> (even <code>typename xxx&lt;T&gt;::type</code>)<br>After C++17 <code>xxx_v&lt;T&gt;</code> is available and it’s equivalent to <code>xxx&lt;T&gt;::value</code></p>          </div><p>The previous code can be rewrited as below:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> = std::<span class="hljs-type">enable_if_t</span>&lt;std::is_base_of_v&lt;Base, T&gt;&gt;&gt;<br><span class="hljs-type">int</span> <span class="hljs-built_in">parse</span>(<span class="hljs-type">const</span> std::string&amp; input, std::shared_ptr&lt;T&gt;&amp; output) &#123;...&#125;<br></code></pre></td></tr></table></figure><p>It’s still a little hard to read and understand, especially since the second argument looks strange in the template argument list. We clearly need a constraint but why we need to bring in a weird thing like <code>typename = ...</code>?</p><p>Besides, template hell is horrible when displaying compiling error messages. It particularly affects the efficency to debug.</p><h3 id="Concepts-is-coming"><a href="#Concepts-is-coming" class="headerlink" title="Concepts is coming"></a><code>Concepts</code> is coming</h3><p>At the end of this page, this example rewritten by <code>concepts</code> will be shown.</p><h2 id="The-simplest-concepts"><a href="#The-simplest-concepts" class="headerlink" title="The simplest concepts"></a>The simplest concepts</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> Any = <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> None = <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><p>It’s easy to understand that concepts are essentially compile-time constant booleans.</p><h2 id="Unite-concepts-and-constexpr-bool"><a href="#Unite-concepts-and-constexpr-bool" class="headerlink" title="Unite concepts and constexpr bool"></a>Unite concepts and constexpr bool</h2><p>Here provides a way to reuse constexpr bool so that we may have impression that concepts can be united with constexpr bool.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> is_any_v = <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> Any = is_any_v&lt;T&gt;;<br></code></pre></td></tr></table></figure><h2 id="Requirements-on-operations"><a href="#Requirements-on-operations" class="headerlink" title="Requirements on operations"></a>Requirements on operations</h2><p>Assume we had declared a concept named whose declaration like below:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> Addable = <span class="hljs-built_in">requires</span>(T x, T y) &#123; x + y; &#125;;<br></code></pre></td></tr></table></figure><p>The concept has at least these 3 ways to use:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">requires</span> Addable&lt;T&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add1</span><span class="hljs-params">(T x, T y)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;Addable T&gt; <span class="hljs-comment">// Equivalent to template &lt;Addable&lt;&gt; T&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add2</span><span class="hljs-params">(T x, T y)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add3</span><span class="hljs-params">(Addable <span class="hljs-keyword">auto</span> x, Addable <span class="hljs-keyword">auto</span> y)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Constraints-on-member-functions"><a href="#Constraints-on-member-functions" class="headerlink" title="Constraints on member functions"></a>Constraints on member functions</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PowerThing</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">power</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; &#125;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> HasPower = <span class="hljs-built_in">requires</span>(T t) &#123;<br>                     <span class="hljs-comment">// std::same_as&lt;decltype(t.power()), int&gt;;</span><br>                     &#123; t.<span class="hljs-built_in">power</span>() &#125; -&gt; std::same_as&lt;<span class="hljs-type">int</span>&gt;;<br>                   &#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">usage</span><span class="hljs-params">()</span> </span>&#123;<br>  HasPower <span class="hljs-keyword">auto</span> something_has_power = <span class="hljs-built_in">PowerThing</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>In this case, I would like to show two places to notice:</p><ol><li>The uncommented line is exactly equivalent to the commented out line although their forms have something different. The uncommented forms is a <strong>syntactic sugar</strong>. It means the return type of <code>t.power()</code> is filled in the first parameter position of <code>std::same_as</code>, and the type <code>int</code> is actually the second parameter.</li><li>To decorate <code>auto</code>, or more precise saying is to constrain it, we can use a concept before <code>auto</code>. It’s a new usage.</li></ol><h2 id="Constraints-on-member-variables"><a href="#Constraints-on-member-variables" class="headerlink" title="Constraints on member variables"></a>Constraints on member variables</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PowerThing</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-type">int</span> power;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> HasPower = <span class="hljs-built_in">requires</span>(T t) &#123;<br>    <span class="hljs-comment">// Bad case:</span><br>    <span class="hljs-comment">// &#123; t.power &#125; -&gt; std::same_as&lt;int&gt;;</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Compiler complains:</span><br>    <span class="hljs-comment">// Deduced type &#x27;PowerThing&#x27; does not satisfy &#x27;HasPower&#x27;</span><br>    <span class="hljs-comment">// Because type constraint &#x27;std::same_as&lt;int &amp;, int&gt;&#x27; was not satisfied</span><br><br>    <span class="hljs-comment">// Good case:</span><br>    <span class="hljs-keyword">requires</span> std::same_as&lt;<span class="hljs-keyword">decltype</span>(t.power), <span class="hljs-type">int</span>&gt;; <span class="hljs-comment">// `requires` can be omitted</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">usage</span><span class="hljs-params">()</span> </span>&#123;<br>  HasPower <span class="hljs-keyword">auto</span> something_has_power = <span class="hljs-built_in">PowerThing</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>Here we need to notice that <code>t.power</code> is actually a lvalue so the use of <code>std::same_as</code> should be done carefully.</p><h2 id="Multiple-typenames"><a href="#Multiple-typenames" class="headerlink" title="Multiple typenames"></a>Multiple typenames</h2><p>I’ve introduced how to write a concept that indicates a single type is addable. How do we want to write a concept that indicates multiple types are addable?</p><p>It’s not really hard and we can quickly make it:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> Y&gt;<br><span class="hljs-keyword">concept</span> Addable = <span class="hljs-built_in">requires</span>(T t, Y y) &#123; t + y; &#125;;<br></code></pre></td></tr></table></figure><p>And we can also summarize its usage with 3 forms corresponding to the single type concept.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> Y&gt;<br>  <span class="hljs-function"><span class="hljs-keyword">requires</span> Addable&lt;T, Y&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add1</span><span class="hljs-params">(T t, Y y)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> t + y;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Y, Addable&lt;Y&gt; T&gt;<br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add2</span><span class="hljs-params">(T t, Y y)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> t + y;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add3</span><span class="hljs-params">(<span class="hljs-keyword">auto</span> y, Addable&lt;<span class="hljs-keyword">decltype</span>(y)&gt; <span class="hljs-keyword">auto</span> t)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> t + y;<br>&#125;<br></code></pre></td></tr></table></figure><p>The second and the third look weird. They are similar to the syntactic sugar just mentioned. <code>T</code> is the first parameter and <code>Y</code> is the second. In order to declare <code>T</code> (or <code>auto t</code>), we have to swap they positions and declare <code>Y</code> (or <code>auto y</code>) in advance. It likes a trick and there may be some difficulty to understand. Therefore, we have to  take some tradeoffs between readability and writability.</p><h2 id="Constraints-on-return-values"><a href="#Constraints-on-return-values" class="headerlink" title="Constraints on return values"></a>Constraints on return values</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">Addable <span class="hljs-keyword">auto</span> <span class="hljs-title">add</span><span class="hljs-params">(Addable <span class="hljs-keyword">auto</span> x, Addable <span class="hljs-keyword">auto</span> y)</span> </span>&#123; <span class="hljs-keyword">return</span> x + y; &#125;<br><br><span class="hljs-comment">// Bad case:</span><br><span class="hljs-keyword">auto</span> sum = <span class="hljs-built_in">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><span class="hljs-comment">// Good case:</span><br>Addable <span class="hljs-keyword">auto</span> sum = <span class="hljs-built_in">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h3 id="Best-Pratice-Prefer-concept-names-over-auto-for-local-variables-1"><a href="#Best-Pratice-Prefer-concept-names-over-auto-for-local-variables-1" class="headerlink" title="Best Pratice: Prefer concept names over auto for local variables[1]"></a>Best Pratice: Prefer concept names over <code>auto</code> for local variables<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[ISOCPP C++ Core Guidelines T.12](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#t12-prefer-concept-names-over-auto-for-local-variables)">[1]</span></a></sup></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> Sequence = <span class="hljs-built_in">requires</span>(T t) &#123;<br>                     t.<span class="hljs-built_in">begin</span>()++;<br>                     t.<span class="hljs-built_in">begin</span>() != t.<span class="hljs-built_in">end</span>();<br>                     &#123; *t.<span class="hljs-built_in">begin</span>() &#125; -&gt; std::same_as&lt;<span class="hljs-keyword">typename</span> T::reference&gt;;<br>                   &#125;;<br><br>Sequence <span class="hljs-keyword">auto</span> container = std::vector&lt;<span class="hljs-type">int</span>&gt;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Association-static-interface-x2F-polymorphism"><a href="#Association-static-interface-x2F-polymorphism" class="headerlink" title="Association: static interface&#x2F;polymorphism"></a>Association: static interface&#x2F;polymorphism</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> Sequence = <span class="hljs-built_in">requires</span>(T t) &#123;...&#125;;<br><br><span class="hljs-keyword">enum class</span> <span class="hljs-title class_">SequenceType</span> &#123; VECTOR, LIST, OTHER &#125;;<br><br><span class="hljs-comment">// Type Factory</span><br><span class="hljs-keyword">template</span> &lt;SequenceType&gt;<br><span class="hljs-function">Sequence <span class="hljs-keyword">auto</span> <span class="hljs-title">get_sequence</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;&gt;<br>Sequence <span class="hljs-keyword">auto</span> <span class="hljs-built_in">get_sequence</span>&lt;SequenceType::VECTOR&gt;() &#123; <span class="hljs-keyword">return</span> std::vector&lt;<span class="hljs-type">int</span>&gt;&#123;&#125;; &#125;<br><br><span class="hljs-keyword">template</span> &lt;&gt;<br>Sequence <span class="hljs-keyword">auto</span> <span class="hljs-built_in">get_sequence</span>&lt;SequenceType::LIST&gt;() &#123; <span class="hljs-keyword">return</span> std::list&lt;<span class="hljs-type">int</span>&gt;&#123;&#125;; &#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">usage</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-comment">// `Sequence` can be omitted</span><br>  Sequence <span class="hljs-keyword">auto</span> sequence = <span class="hljs-built_in">get_sequence</span>&lt;SequenceType::VECTOR&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><p>It seems it implements a simple factory pattern by type enumeration values.<br>From another perspective, concept also looks like interface though it’s static context.<br>Most importantly, it’s readable compared with a single <code>auto</code>.</p><h2 id="Anonymous-Concept"><a href="#Anonymous-Concept" class="headerlink" title="Anonymous Concept"></a>Anonymous Concept</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Container&gt;<br>  <span class="hljs-keyword">requires</span><br>    <span class="hljs-comment">/* Anonymous concept begin */</span><br>    <span class="hljs-built_in">requires</span>(Container container) &#123;<br>      &#123; container.<span class="hljs-built_in">size</span>() &#125; -&gt; std::same_as&lt;std::<span class="hljs-type">size_t</span>&gt;;<br>    &#125;<br>    <span class="hljs-comment">/* Anonymous concept end */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_container_size</span><span class="hljs-params">(Container container)</span> </span>&#123;<br>  std::cout &lt;&lt; container.<span class="hljs-built_in">size</span>() &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>The <code>requires</code> written twice isn’t a typo. It means it’s a anonymous concept used just here.</p><h2 id="Merge-multiple-statements-as-far-as-possible"><a href="#Merge-multiple-statements-as-far-as-possible" class="headerlink" title="Merge multiple statements as far as possible"></a>Merge multiple statements as far as possible</h2><div class="note note-info">            <p>I summarize it as a best practice.</p>          </div><h3 id="The-Duplicative-Form"><a href="#The-Duplicative-Form" class="headerlink" title="The Duplicative Form"></a>The Duplicative Form</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> C&gt;<br><span class="hljs-keyword">concept</span> Clonable = <span class="hljs-built_in">requires</span> (C clonable) &#123;<br>  clonable.<span class="hljs-built_in">clone</span>();<br>  <span class="hljs-keyword">requires</span> std::same_as&lt;<span class="hljs-keyword">decltype</span>(clonable.<span class="hljs-built_in">clone</span>()), C&gt;; <span class="hljs-comment">// `requires` can be omitted</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="The-Concise-Form"><a href="#The-Concise-Form" class="headerlink" title="The Concise Form"></a>The Concise Form</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> C&gt;<br><span class="hljs-keyword">concept</span> Clonable = <span class="hljs-built_in">requires</span> (C clonable) &#123;<br>  &#123; clonable.<span class="hljs-built_in">clone</span>() &#125; -&gt; std::same_as&lt;C&gt;;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Rewrite-the-previous-example-by-Concepts"><a href="#Rewrite-the-previous-example-by-Concepts" class="headerlink" title="Rewrite the previous example by Concepts"></a>Rewrite the previous example by <code>Concepts</code></h2><p>It’s time to rewrite the previous example by <code>Concepts</code>!</p><p>Let’s review the previous form:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> = std::<span class="hljs-type">enable_if_t</span>&lt;std::is_base_of_v&lt;Base, T&gt;&gt;&gt;<br><span class="hljs-type">int</span> <span class="hljs-built_in">parse</span>(<span class="hljs-type">const</span> std::string&amp; input, std::shared_ptr&lt;T&gt;&amp; output) &#123;...&#125;<br></code></pre></td></tr></table></figure><p>And rewrite it to a new form:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> Base&gt;<br><span class="hljs-keyword">concept</span> InheriteFrom = std::is_base_of_v&lt;Base, T&gt;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br>  <span class="hljs-function"><span class="hljs-keyword">requires</span> InheriteFrom&lt;T, Base&gt;</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">parse</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; input, std::shared_ptr&lt;T&gt;&amp; output)</span> </span>&#123;...&#125;<br></code></pre></td></tr></table></figure><p>As we see, the readability of the form rewritten by <code>concepts</code> is undoubtedly better than the previous form. It directly points out the concept is a constraint by keyword <code>requires</code>. It’s great.</p><section class="footnotes"><h2>References</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#t12-prefer-concept-names-over-auto-for-local-variables">ISOCPP C++ Core Guidelines T.12</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>cpp</category>
      
      <category>stl</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>stl</tag>
      
      <tag>cpp20</tag>
      
      <tag>concepts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Configure Vim</title>
    <link href="/Configuration/Vim/Configure-Vim/"/>
    <url>/Configuration/Vim/Configure-Vim/</url>
    
    <content type="html"><![CDATA[<h2 id="Install-plug-vim-file"><a href="#Install-plug-vim-file" class="headerlink" title="Install plug.vim file"></a>Install <code>plug.vim</code> file</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim &gt; ~/.vim/autoload<br></code></pre></td></tr></table></figure><h2 id="Configure-vimrc-file"><a href="#Configure-vimrc-file" class="headerlink" title="Configure .vimrc file"></a>Configure <code>.vimrc</code> file</h2><div class="note note-success">            <p>Copy the below configuration to <code>~/.vimrc</code>.</p>          </div><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">call</span> plug#begin(<span class="hljs-string">&#x27;~/.vim/plugged&#x27;</span>)<br><span class="hljs-string">&quot;在这里使用 Plug &quot;</span>github用户/项目名<span class="hljs-comment">&quot; 的方式引入插件</span><br><span class="hljs-string">&quot;Import plugin by using Plug &quot;</span>github_username/project_name<span class="hljs-comment">&quot;</span><br><br><span class="hljs-comment">&quot;彩虹括号</span><br><span class="hljs-comment">&quot;Rainbow bracket</span><br>Plug <span class="hljs-string">&#x27;luochen1990/rainbow&#x27;</span><br><br><span class="hljs-comment">&quot;历史记录</span><br><span class="hljs-comment">&quot;History record</span><br><span class="hljs-comment">&quot;Plug &#x27;mhinz/vim-startify&#x27;</span><br><br><span class="hljs-comment">&quot;One Dark Theme</span><br>Plug <span class="hljs-string">&#x27;joshdick/onedark.vim&#x27;</span><br><span class="hljs-keyword">call</span> plug#end()<br><br><br><span class="hljs-comment">&quot;设置配色，这里选择的是 desert，也有其他方案，在 vim 中输入 :color 再敲 tab 键可以查看</span><br><span class="hljs-comment">&quot;Set color. Here is desert by default. Type :color in vim and press tab to view other options</span><br><span class="hljs-comment">&quot;color desert</span><br>color onedark<br><br><span class="hljs-comment">&quot;设置背景色，每种配色有两种方案，一个 light、一个 dark</span><br><span class="hljs-comment">&quot;Set background each of which has two mode, light and dark</span><br><span class="hljs-keyword">set</span> background=dark<br><br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:rainbow_active</span> = <span class="hljs-number">1</span> <span class="hljs-comment">&quot;0 if you want to enable it later via :RainbowToggle</span><br><br><span class="hljs-comment">&quot;传说中的去掉边框用下边这一句</span><br><span class="hljs-comment">&quot;Remove border</span><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">go</span>=<br><br><span class="hljs-comment">&quot;打开语法高亮</span><br><span class="hljs-comment">&quot;Turn on syntax highlighting</span><br><span class="hljs-keyword">syntax</span> <span class="hljs-keyword">on</span><br><br><span class="hljs-comment">&quot;显示行号</span><br><span class="hljs-comment">&quot;Show line number</span><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">number</span><br><br><span class="hljs-comment">&quot;设置缩进有三个取值 cindent(C 风格)、smartindent(智能模式，其实不觉得有什么智能)、autoindent(简单的与上一行保持一致)</span><br><span class="hljs-comment">&quot;Set Indent with three values: cindent/、smartindent/、autoindent</span><br><span class="hljs-keyword">set</span> <span class="hljs-built_in">cindent</span><br><br><span class="hljs-comment">&quot;用空格键替换制表符</span><br><span class="hljs-comment">&quot;Replace tabs with the space bar</span><br>:<span class="hljs-keyword">set</span> expandtab<br><br><span class="hljs-comment">&quot;制表符占 4 个空格</span><br><span class="hljs-comment">&quot;Tabs take up 4 spaces</span><br><span class="hljs-keyword">set</span> tabstop=<span class="hljs-number">4</span><br><br><span class="hljs-comment">&quot;默认缩进 4 个空格大小</span><br><span class="hljs-comment">&quot;The default indent size is 4 spaces</span><br><span class="hljs-keyword">set</span> <span class="hljs-built_in">shiftwidth</span>=<span class="hljs-number">4</span><br><br><span class="hljs-comment">&quot;增量式搜索</span><br><span class="hljs-comment">&quot;Incremental search</span><br><span class="hljs-keyword">set</span> incsearch<br><br><span class="hljs-comment">&quot;高亮搜索</span><br><span class="hljs-comment">&quot;Highlight search</span><br><span class="hljs-keyword">set</span> hlsearch<br><br><span class="hljs-comment">&quot;有时中文会显示乱码，用一下几条命令解决</span><br><span class="hljs-comment">&quot;Solve Chinese garbled code</span><br><span class="hljs-keyword">let</span> &amp;termencoding=&amp;encoding<br><span class="hljs-keyword">set</span> fileencodings=utf-<span class="hljs-number">8</span>,gbk<br><br><span class="hljs-comment">&quot;很多插件都会要求的配置检测文件类型</span><br><span class="hljs-comment">&quot;Check file type</span><br>:<span class="hljs-keyword">filetype</span> <span class="hljs-keyword">on</span><br>:<span class="hljs-keyword">filetype</span> plugin <span class="hljs-keyword">on</span><br>:<span class="hljs-keyword">filetype</span> <span class="hljs-built_in">indent</span> <span class="hljs-keyword">on</span><br><br><span class="hljs-comment">&quot;下边这个很有用可以根据不同的文件类型执行不同的命令</span><br><span class="hljs-comment">&quot;Run different commands based on different file types</span><br><span class="hljs-comment">&quot;例如：如果是 C/C++ 类型</span><br><span class="hljs-comment">&quot;For example, if for C/C++</span><br>:<span class="hljs-keyword">autocmd</span> FileType <span class="hljs-keyword">c</span>,cpp :<span class="hljs-keyword">set</span> foldmethod=<span class="hljs-keyword">syntax</span><br>:<span class="hljs-keyword">autocmd</span> FileType <span class="hljs-keyword">c</span>,cpp :<span class="hljs-keyword">set</span> <span class="hljs-keyword">number</span><br>:<span class="hljs-keyword">autocmd</span> FileType <span class="hljs-keyword">c</span>,cpp :<span class="hljs-keyword">set</span> <span class="hljs-built_in">cindent</span><br><br><span class="hljs-comment">&quot;例如：如果是 Python 类型</span><br><span class="hljs-comment">&quot;For example, if for Python</span><br>:<span class="hljs-keyword">autocmd</span> FileType <span class="hljs-keyword">python</span> :<span class="hljs-keyword">set</span> <span class="hljs-keyword">number</span><br>:<span class="hljs-keyword">autocmd</span> FileType <span class="hljs-keyword">python</span> :<span class="hljs-keyword">set</span> foldmethod=<span class="hljs-keyword">syntax</span><br>:<span class="hljs-keyword">autocmd</span> FileType <span class="hljs-keyword">python</span> :<span class="hljs-keyword">set</span> smartindent<br></code></pre></td></tr></table></figure><h2 id="Vim-Plugin-Commands"><a href="#Vim-Plugin-Commands" class="headerlink" title="Vim Plugin Commands"></a>Vim Plugin Commands</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vim">&lt;!-- Install specific plugin such <span class="hljs-keyword">as</span>  --&gt;<br>&lt;!-- :PlugInstall gist-<span class="hljs-keyword">vim</span> --&gt;<br>:PlugInstall <span class="hljs-symbol">&lt;plugin_name&gt;</span><br>&lt;!-- Install <span class="hljs-keyword">all</span> plugins specified in .vimrc --&gt;<br>:PlugInstall<br><br>&lt;!-- Remove plugin --&gt;<br>&lt;!-- Note that <span class="hljs-built_in">remove</span> <span class="hljs-built_in">or</span> comment out plugin configuration in .vimrc in advance --&gt;<br>:PlugClean <span class="hljs-symbol">&lt;plugin_name&gt;</span><br><br>&lt;!-- Udgrade <span class="hljs-keyword">vim</span>-plug itself --&gt;<br>:PlugUpgrade<br><br>&lt;!-- Update <span class="hljs-keyword">all</span> plugins --&gt;<br>:PlugUpdate<br><br>&lt;!-- Review the infomation of installed plugin --&gt;<br>:PlugStatus <span class="hljs-symbol">&lt;plugin_name&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>configuration</category>
      
      <category>vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>configuration</tag>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TODO</title>
    <link href="/TODO/"/>
    <url>/TODO/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p>List what category of articles would be written.</p>          </div><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><ul><li><input checked="" disabled="" type="checkbox"> <del>Deleter in <code>std::shared_ptr</code></del></li><li><input checked="" disabled="" type="checkbox"> <del>What is <code>enable_shared_from_this</code></del></li><li><input checked="" disabled="" type="checkbox"> <del>Concepts</del></li><li><input checked="" disabled="" type="checkbox"> <del>jthread</del></li><li><input checked="" disabled="" type="checkbox"> <del>RTTI</del></li><li><input checked="" disabled="" type="checkbox"> <del>std::allocator</del></li><li><input checked="" disabled="" type="checkbox"> <del>std::string_view, std::span</del></li><li><input checked="" disabled="" type="checkbox"> <del>promise, future, packaged_task, shared_future</del></li><li><input disabled="" type="checkbox"> std::bind</li><li><input checked="" disabled="" type="checkbox"> <del>C++ Rule of Five</del></li><li><input disabled="" type="checkbox"> std::atomic<ul><li>std::memory_order_release</li><li>std::memory_order_acquire</li></ul></li><li><input checked="" disabled="" type="checkbox"> <del>C++17 CTAD (Ref: <a href="https://andreasfertig.blog/2022/11/cpp17s-ctad-a-sometimes-underrated-feature/">https://andreasfertig.blog/2022/11/cpp17s-ctad-a-sometimes-underrated-feature/</a>)</del></li><li><input checked="" disabled="" type="checkbox"> <del>Coroutines</del><ul><li><input checked="" disabled="" type="checkbox"> <del><code>co_await</code></del></li><li><input checked="" disabled="" type="checkbox"> <del>life cycle</del></li><li><input checked="" disabled="" type="checkbox"> <del>stackful &amp; stackless</del></li><li><input checked="" disabled="" type="checkbox"> <del>symmetric transfer</del></li></ul></li><li><input disabled="" type="checkbox"> Ranges</li><li><input disabled="" type="checkbox"> Modules</li><li><input disabled="" type="checkbox"> <code>std::format</code></li></ul><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><ul><li><input disabled="" type="checkbox"> goroutines</li><li><input disabled="" type="checkbox"> M:N scheduling models</li></ul><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><ul><li><input checked="" disabled="" type="checkbox"> <del>pre-order&#x2F;mid-order&#x2F;post-order traversal binary trees</del></li><li><input checked="" disabled="" type="checkbox"> <del>four arithmetic calculator</del></li><li><input checked="" disabled="" type="checkbox"> <del>KMP</del></li></ul><h3 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h3><h2 id="Library"><a href="#Library" class="headerlink" title="Library"></a>Library</h2><ul><li><input checked="" disabled="" type="checkbox"> <del>The implementation of coroutine by 云风</del></li><li><input disabled="" type="checkbox"> muduo</li><li><input disabled="" type="checkbox"> bRPC<ul><li><input disabled="" type="checkbox"> bthread</li><li><input disabled="" type="checkbox"> bvar</li></ul></li><li><input disabled="" type="checkbox"> gflags</li><li><input disabled="" type="checkbox"> googletest (gtest)</li><li><input disabled="" type="checkbox"> tcmalloc&#x2F;jemalloc</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>todo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
