<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Introduction to C++20 Coroutines - Part 1 Generator</title>
    <link href="/2023/04/08/Introduction-to-C-20-Coroutines-Part-1-Generator/"/>
    <url>/2023/04/08/Introduction-to-C-20-Coroutines-Part-1-Generator/</url>
    
    <content type="html"><![CDATA[<p>Why corouties were imported in C++20? In order to explain it, we could begin with some examples about Fibonacci sequences.</p><h2 id="Fibonacci"><a href="#Fibonacci" class="headerlink" title="Fibonacci"></a>Fibonacci</h2><p>At the beginning, we can write down code like below.</p><h3 id="0"><a href="#0" class="headerlink" title="0"></a>0</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">get_fibonacci</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; v;<br>    v.<span class="hljs-built_in">reserve</span>(n);<br><br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>, b = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        v.<span class="hljs-built_in">push_back</span>(b);<br>        <span class="hljs-type">int</span> sum = a + b;<br>        a = b;<br>        b = sum;<br>    &#125;<br>    <span class="hljs-keyword">return</span> v;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; v = <span class="hljs-built_in">get_fibonacci</span>(<span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : v) &#123;<br>        std::cout &lt;&lt; i &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>This function receives an integer that indicates the size of the Fibonacci sequence needed.</p><p>However, there are a few disadvantages:</p><ol><li>It returns an vector to store the temporary result, and the vector is just for traversalling once. The occupied space of this temporary vector can’t be ignored in case the needed size of sequence is pretty large.</li><li>It can’t support the occasion if we would like to get an infinite sequence.</li></ol><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">generate_fibonacci</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>, b = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> sum = a + b;<br>    a = b;<br>    b = sum;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;<br>        std::cout &lt;&lt; <span class="hljs-built_in">generate_fibonacci</span>() &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>As the code rewritten, it fixes the issues above with static variables. It not only uses minimum occupied space, but also supports for generating an infinite sequence.</p><p>But it still looks not enough to be considered as perfect. <strong>If we would like to get multiple independent sequences?</strong> After all, static variables can be initialized just once, and they have own states afterward.</p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FibonacciGenerator</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-type">int</span> sum = a + b;<br>        a = b;<br>        b = sum;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> a&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> b&#123;<span class="hljs-number">1</span>&#125;;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    FibonacciGenerator fibonacci_generator;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;<br>        std::cout &lt;&lt; fibonacci_generator.<span class="hljs-built_in">next</span>() &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>From the thought about states, we can easily to encapsulate them in a generator class and update their states within the generator’s member function.</p><h2 id="Bring-Coroutines-in"><a href="#Bring-Coroutines-in" class="headerlink" title="Bring Coroutines in"></a>Bring Coroutines in</h2><p>The states look easy to update because the context is simple. Trouble is coming if we have to do something with complicated context such as throw elements from two or even more vectors in a particular order like round robin. In many cases, we need to maintain the update of various states even a state machine.</p><p>Coroutines are brought in to reduce the cost of mantaining various states so that we focus on the work code itself.</p><h2 id="Coroutines-in-Python"><a href="#Coroutines-in-Python" class="headerlink" title="Coroutines in Python"></a>Coroutines in Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> Generator<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">finonacci</span>() -&gt; Generator[<span class="hljs-built_in">int</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>]:<br>    a, b = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        a, b = b, a + b<br>        <span class="hljs-keyword">yield</span> a<br><br><br>fibonacci_gen = finonacci()<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(fibonacci_gen))<br></code></pre></td></tr></table></figure><p>When <code>finonacci()</code> is called, the generator is returned but the function doesn’t start to run yet. When <code>next(fibonacci_gen)</code> is called every time, the execution inside the <code>finonacci</code> function runs until it encounters the keyword <code>yield</code>. It stores the current execution, suspends and returns to the outside execution. After <code>next(fibonacci_gen)</code> is called again, the execution inside the <code>finonacci</code> function will resume and continue to run until it encounters the keyword <code>yield</code> again.</p><p>The execution workflow is actually controlled with the help of compiler.</p><h2 id="Coroutines-in-C"><a href="#Coroutines-in-C" class="headerlink" title="Coroutines in C++"></a>Coroutines in C++</h2><h3 id="Declaration-of-coroutine"><a href="#Declaration-of-coroutine" class="headerlink" title="Declaration of coroutine"></a>Declaration of coroutine</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">fibonacci_generator <span class="hljs-title">fibonacci</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>, b = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-type">int</span> sum = a + b;<br>        a = b;<br>        b = sum;<br><br>        <span class="hljs-keyword">co_yield</span> a;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>The declaration of coroutines in C++ is similar to Python, and the execution flow is also easy to understand. Isn’t it?</p><p>There are 3 keywords <code>co_yield</code> <code>co_await</code> <code>co_return</code> are brought in in C++20. Once there are keywords among them occur in a scope, it’s actually a coroutine rather than a subroutine used in traditional C++. We only use <code>co_yield</code> here.</p><p>Now we definitely have at least 2 questions:</p><ol><li>How to implement <code>fibonacci_generator</code>?</li><li>How to use <code>fibonacci()</code>?</li></ol><p>I will explain them on by one.</p><h3 id="Implementation-of-generators"><a href="#Implementation-of-generators" class="headerlink" title="Implementation of generators"></a>Implementation of generators</h3><p>Apart from subroutines we are familiar with, the return type of coroutines must be written in a particular standard, otherwise it won’t pass compiling. Let’s follow the complaint from compiler to fill the needed contents little by little.</p><div class="note note-info">            <p>The below code is compiled under <code>gcc 11.3.0</code>.</p>          </div><div class="note note-warning">            <p>So far (March 2023), some compilers don’t provide complete support about coroutines. For instance, in clang, header file about coroutine is <code>&lt;experimental/coroutine&gt;</code>, and components about coroutine are in namespace <code>std::experimental</code>.</p>          </div><h4 id="Declaration-of-fibonacci-generator"><a href="#Declaration-of-fibonacci-generator" class="headerlink" title="Declaration of fibonacci_generator"></a>Declaration of <code>fibonacci_generator</code></h4><p>Assume we write the definition of <code>fibonacci_generator</code>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;coroutine&gt;</span> <span class="hljs-comment">// It wouldn&#x27;t be written in the code snippet afterwards</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">fibonacci_generator</span> &#123;&#125;;<br></code></pre></td></tr></table></figure><p>There is a complaint from compiler:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs log">class &quot;std::__n4861::coroutine_traits&lt;fibonacci_generator, int&gt;&quot; has no member &quot;promise_type&quot;<br></code></pre></td></tr></table></figure><p>Add a struct or class <code>promise_type</code> in <code>fibonacci_generator</code>.</p><h4 id="Declaration-of-promise-type"><a href="#Declaration-of-promise-type" class="headerlink" title="Declaration of promise_type"></a>Declaration of <code>promise_type</code></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">fibonacci_generator</span> &#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">promise_type</span> &#123;&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>There are several complaints from compiler:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs log">no member named &#x27;initial_suspend&#x27; in &#x27;std::__n4861::__coroutine_traits_impl&lt;fibonacci_generator, void&gt;::promise_type&#x27; &#123;aka &#x27;fibonacci_generator::promise_type&#x27;&#125;<br>no member named &#x27;unhandled_exception&#x27; in &#x27;std::__n4861::__coroutine_traits_impl&lt;fibonacci_generator, void&gt;::promise_type&#x27; &#123;aka &#x27;fibonacci_generator::promise_type&#x27;&#125;<br>no member named &#x27;final_suspend&#x27; in &#x27;std::__n4861::__coroutine_traits_impl&lt;fibonacci_generator, void&gt;::promise_type&#x27; &#123;aka &#x27;fibonacci_generator::promise_type&#x27;&#125;<br>no member named &#x27;get_return_object&#x27; in &#x27;std::__n4861::__coroutine_traits_impl&lt;fibonacci_generator, void&gt;::promise_type&#x27; &#123;aka &#x27;fibonacci_generator::promise_type&#x27;&#125;<br>no member named &#x27;yield_value&#x27; in &#x27;std::__n4861::__coroutine_traits_impl&lt;fibonacci_generator, void&gt;::promise_type&#x27; &#123;aka &#x27;fibonacci_generator::promise_type&#x27;&#125;<br></code></pre></td></tr></table></figure><h4 id="Definition-of-promise-type"><a href="#Definition-of-promise-type" class="headerlink" title="Definition of promise_type"></a>Definition of <code>promise_type</code></h4><p>Since there are a few functions and contents, let me fill them in and explain them in comments.</p><blockquote><p>In order to distinguish the execution time, I add some output to help understand.</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">fibonacci_generator</span> &#123;<br>    <span class="hljs-comment">// The functionality of `promise_type`:</span><br>    <span class="hljs-comment">// 1. Stores context.</span><br>    <span class="hljs-comment">// 2. Controls suspension and resumption by implementing the following functions</span><br>    <span class="hljs-comment">//    `get_return_object` `initial_suspend` `final_suspend` `yield_value`.</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">promise_type</span> &#123;<br>        <span class="hljs-built_in">promise_type</span>() &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;promise_type()&quot;</span> &lt;&lt; std::endl;<br>        &#125;<br>        ~<span class="hljs-built_in">promise_type</span>() &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;~promise_type() &quot;</span> &lt;&lt; std::endl;<br>        &#125;<br><br>        <span class="hljs-type">int</span> current_&#123;<span class="hljs-number">0</span>&#125;;  <span class="hljs-comment">// store the state/value</span><br><br>        <span class="hljs-comment">// Execute when the coroutine begins and to generate the result object at a particular memory space.</span><br>        <span class="hljs-comment">// Return this object when the coroutine returns.</span><br>        <span class="hljs-function">fibonacci_generator <span class="hljs-title">get_return_object</span><span class="hljs-params">()</span> </span>&#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;fibonacci_generator::promise_type::get_return_object&quot;</span> &lt;&lt; std::endl;<br>            <span class="hljs-keyword">return</span> std::coroutine_handle&lt;promise_type&gt;::<span class="hljs-built_in">from_promise</span>(<br>                *<span class="hljs-keyword">this</span>);  <span class="hljs-comment">// convert implicitly from `std::coroutine_handle&lt;promise_type&gt;` to `fibonacci_generator`</span><br>        &#125;<br><br>        <span class="hljs-comment">// Execute when the coroutine begins.</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">// 1) If its return type is `std::suspend_always`, the coroutine suspends and the execution returns to outside.</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">// 2) If its return type is `std::suspend_never`, after coroutine begins, it continues to run until encounters</span><br>        <span class="hljs-comment">//    keywords about coroutine Its return type can be customized flexibly as long as it implements the functions</span><br>        <span class="hljs-comment">//    `await_ready` `await_suspend` `await_resume`.</span><br>        <span class="hljs-function">std::suspend_always <span class="hljs-title">initial_suspend</span><span class="hljs-params">()</span> </span>&#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;fibonacci_generator::promise_type::initial_suspend&quot;</span> &lt;&lt; std::endl;<br>            <span class="hljs-keyword">return</span> &#123;&#125;;<br>        &#125;<br><br>        <span class="hljs-comment">// Execute when the coroutine ends (`co_return` is called or arrives the end of the scope).</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">// 1) If its return type is `std::suspend_always`, it will keep the context of coroutine and `promise_type`</span><br>        <span class="hljs-comment">//    object alive and give control of the release to user.</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">// 2) If its return type is `std::suspend_never`, it will release them automatically.</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">//     a) After that, if user tries to access `promise_type` object, it means it will access wild resources.</span><br>        <span class="hljs-comment">//        It should be avoided by user self.</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">//     b) After that, if user tries to call `handle_.destroy()`, it will release resource secondly like</span><br>        <span class="hljs-comment">//        double free. It should also be avoided.</span><br>        <span class="hljs-function">std::suspend_always <span class="hljs-title">final_suspend</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;fibonacci_generator::promise_type::final_suspend&quot;</span> &lt;&lt; std::endl;<br>            <span class="hljs-keyword">return</span> &#123;&#125;;<br>        &#125;<br><br>        <span class="hljs-comment">// Execute when `co_yield` is called in the coroutine.</span><br>        <span class="hljs-comment">// It receives the input value from `co_yield` and we can store values or update states.</span><br>        <span class="hljs-function">std::suspend_always <span class="hljs-title">yield_value</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> </span>&#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;fibonacci_generator::promise_type::yield_value&quot;</span> &lt;&lt; std::endl;<br>            current_ = value;<br>            <span class="hljs-keyword">return</span> &#123;&#125;;<br>        &#125;<br><br>        <span class="hljs-comment">// Process in case there is exception thrown from coroutine</span><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">unhandled_exception</span><span class="hljs-params">()</span> </span>&#123;<br>            std::<span class="hljs-built_in">terminate</span>();<br>        &#125;<br>    &#125;;<br><br>    std::coroutine_handle&lt;promise_type&gt; handle_;  <span class="hljs-comment">// the handle of coroutine</span><br><br>    <span class="hljs-built_in">fibonacci_generator</span>(std::coroutine_handle&lt;promise_type&gt; handle) : handle_&#123;handle&#125; &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;fibonacci_generator()&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br><br>    ~<span class="hljs-built_in">fibonacci_generator</span>() &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;~fibonacci_generator()&quot;</span> &lt;&lt; std::endl;<br><br>        std::cout &lt;&lt; <span class="hljs-string">&quot;before handle_.destroy()&quot;</span> &lt;&lt; std::endl;<br>        handle_.<span class="hljs-built_in">destroy</span>();<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;after handle_.destroy()&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Usage-of-fibonacci-generator"><a href="#Usage-of-fibonacci-generator" class="headerlink" title="Usage of fibonacci_generator"></a>Usage of <code>fibonacci_generator</code></h3><p>Before we use <code>fibonacci_generator</code>, add a member function <code>operator()</code> into it to call it like a function calling.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">fibonacci_generator</span> &#123;<br>    <span class="hljs-comment">// Other members...</span><br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">()</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;fibonacci_generator::operator()&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">if</span> (!handle_.<span class="hljs-built_in">done</span>()) &#123;<br>            handle_.<span class="hljs-built_in">resume</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> handle_.<span class="hljs-built_in">promise</span>().current_;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">fibonacci_generator <span class="hljs-title">fib</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>, b = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-type">int</span> sum = a + b;<br>        a = b;<br>        b = sum;<br><br>        std::cout &lt;&lt; <span class="hljs-string">&quot;before co_yield&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">co_yield</span> a;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;after co_yield&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;-----------------------------------before fib()&quot;</span> &lt;&lt; std::endl;<br>    fibonacci_generator f = <span class="hljs-built_in">fib</span>();<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;-----------------------------------after fib()&quot;</span> &lt;&lt; std::endl;<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;-----------------------------------loop begins&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;-----------------------------------begin: &quot;</span> &lt;&lt; i &lt;&lt; std::endl;<br>        std::cout &lt;&lt; <span class="hljs-built_in">f</span>() &lt;&lt; std::endl;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;-----------------------------------end: &quot;</span> &lt;&lt; i &lt;&lt; std::endl;<br>    &#125;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;-----------------------------------loop ends&quot;</span> &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs log">-----------------------------------before fib()<br>promise_type()<br>fibonacci_generator::promise_type::get_return_object<br>fibonacci_generator()<br>fibonacci_generator::promise_type::initial_suspend<br>-----------------------------------after fib()<br>-----------------------------------loop begins<br>-----------------------------------begin: 0<br>fibonacci_generator::operator()<br>fib()<br>before co_yield<br>fibonacci_generator::promise_type::yield_value<br>1<br>-----------------------------------end: 0<br>-----------------------------------begin: 1<br>fibonacci_generator::operator()<br>after co_yield<br>before co_yield<br>fibonacci_generator::promise_type::yield_value<br>1<br>-----------------------------------end: 1<br>-----------------------------------begin: 2<br>fibonacci_generator::operator()<br>after co_yield<br>before co_yield<br>fibonacci_generator::promise_type::yield_value<br>2<br>-----------------------------------end: 2<br>-----------------------------------loop ends<br>~fibonacci_generator()<br>before handle_.destroy()<br>~promise_type() <br>after handle_.destroy()<br></code></pre></td></tr></table></figure><div class="note note-primary">            <p>To understand the life cycle of coroutines or other cases, there is a useful method to insert some output at the beginning and the end of functions and other any necessary locations. :)</p>          </div><h2 id="More-Explanations"><a href="#More-Explanations" class="headerlink" title="More Explanations"></a>More Explanations</h2><h3 id="1-How-to-understand-promise-type"><a href="#1-How-to-understand-promise-type" class="headerlink" title="1. How to understand promise_type?"></a>1. How to understand <code>promise_type</code>?</h3><p>It indicates the situation of the coroutine. It’s like a controller that not only stores states and context but also controls coroutine’s suspension and resumption.</p><h3 id="2-How-to-understand-coroutine-handle"><a href="#2-How-to-understand-coroutine-handle" class="headerlink" title="2. How to understand coroutine_handle?"></a>2. How to understand <code>coroutine_handle</code>?</h3><p>As the name implies, it’s a handle to a coroutine. Haha…</p><p>I have an informal idea to understand it. We might consider it as the pointer to the coroutine. <code>coroutine_handle&lt;&gt;</code> points to the coroutine itself and <code>coroutine_handle&lt;promise_type&gt;</code> points to the <code>promise_type</code> object.</p><ul><li>With <code>coroutine_handle&lt;promise_type&gt;</code> we’are able to access the <code>promise_type</code> to read or write states inside the return type(<code>fibonacci_generator</code> is the return type in above example) or even outside the coroutine.</li><li>We can just use <code>coroutine_handle&lt;&gt;</code> if we don’t need to access any states of the coroutine.</li></ul><h3 id="3-How-to-release-coroutine-safely"><a href="#3-How-to-release-coroutine-safely" class="headerlink" title="3. How to release coroutine safely?"></a>3. How to release coroutine safely?</h3><ol><li>Carefully consider the return type of <code>initial_suspend</code> set as <code>std::suspend_always</code> <code>std::suspend_never</code> or other custom schema.</li><li>Sometimes we need to access states in the coroutine as the coroutine has ended, we must set the return type of <code>final_suspend</code> as <code>std::suspend_always</code>, otherwise they’re actually wild resources which are unsafe. At the same time, place <code>handle_.destroy()</code> at the destructor of the return type with RAII.</li><li>Note that never call <code>handle_.destroy()</code> if the return type of <code>final_suspend</code> as <code>std::suspend_never</code>.</li><li>It’s better to estimate whether the coroutine is done via <code>handle_.done()</code> or not when it’s called every time. It’s callable only if it isn’t done.</li></ol><h3 id="4-Construct-promise-type-with-parameters"><a href="#4-Construct-promise-type-with-parameters" class="headerlink" title="4. Construct promise_type with parameters"></a>4. Construct <code>promise_type</code> with parameters</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">fibonacci_generator</span> &#123;<br>    <span class="hljs-comment">// Other members...</span><br><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">promise_type</span> &#123;<br>        <span class="hljs-built_in">promise_type</span>(<span class="hljs-type">int</span> dummy) &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;promise_type() dummy = &quot;</span> &lt;&lt; dummy &lt;&lt; std::endl;<br>        &#125;<br>    &#125;;<br>&#125;;<br><br><span class="hljs-function">fibonacci_generator <span class="hljs-title">fib</span><span class="hljs-params">(<span class="hljs-type">int</span> dummy)</span> </span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>It can be understanded that the coroutine is initialized by some parameters.</p><h2 id="Example-Pop-up-elements-from-multiple-vectors"><a href="#Example-Pop-up-elements-from-multiple-vectors" class="headerlink" title="Example: Pop up elements from multiple vectors"></a>Example: Pop up elements from multiple vectors</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;coroutine&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">pop_up_generator</span> &#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">promise_type</span> &#123;<br>        <span class="hljs-built_in">promise_type</span>() &#123;<br>        &#125;<br><br>        <span class="hljs-type">int</span> current_&#123;<span class="hljs-number">0</span>&#125;;<br><br>        <span class="hljs-function">pop_up_generator <span class="hljs-title">get_return_object</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> std::coroutine_handle&lt;promise_type&gt;::<span class="hljs-built_in">from_promise</span>(*<span class="hljs-keyword">this</span>);<br>        &#125;<br><br>        <span class="hljs-function">std::suspend_always <span class="hljs-title">initial_suspend</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> &#123;&#125;;<br>        &#125;<br><br>        <span class="hljs-function">std::suspend_always <span class="hljs-title">final_suspend</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> &#123;&#125;;<br>        &#125;<br><br>        <span class="hljs-function">std::suspend_always <span class="hljs-title">yield_value</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> </span>&#123;<br>            current_ = value;<br>            <span class="hljs-keyword">return</span> &#123;&#125;;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">unhandled_exception</span><span class="hljs-params">()</span> </span>&#123;<br>            std::<span class="hljs-built_in">terminate</span>();<br>        &#125;<br>    &#125;;<br><br>    std::coroutine_handle&lt;promise_type&gt; handle_;<br><br>    <span class="hljs-built_in">pop_up_generator</span>(std::coroutine_handle&lt;promise_type&gt; handle) : handle_&#123;handle&#125; &#123;<br>    &#125;<br><br>    ~<span class="hljs-built_in">pop_up_generator</span>() &#123;<br>        handle_.<span class="hljs-built_in">destroy</span>();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">done</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!handle_.<span class="hljs-built_in">done</span>()) &#123;<br>            handle_.<span class="hljs-built_in">resume</span>();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> handle_.<span class="hljs-built_in">done</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> handle_.<span class="hljs-built_in">promise</span>().current_;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function">pop_up_generator <span class="hljs-title">pop_up</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt; a, std::vector&lt;<span class="hljs-type">int</span>&gt; b)</span> </span>&#123;<br>    <span class="hljs-keyword">auto</span> a_it = a.<span class="hljs-built_in">begin</span>(), b_it = b.<span class="hljs-built_in">begin</span>();<br><br>    <span class="hljs-keyword">while</span> (a_it != a.<span class="hljs-built_in">end</span>() || b_it != b.<span class="hljs-built_in">end</span>()) &#123;<br>        <span class="hljs-keyword">if</span> (a_it != a.<span class="hljs-built_in">end</span>()) &#123;<br>            <span class="hljs-keyword">co_yield</span> *a_it;<br>            ++a_it;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (b_it != b.<span class="hljs-built_in">end</span>()) &#123;<br>            <span class="hljs-keyword">co_yield</span> *b_it;<br>            ++b_it;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; a&#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>&#125;;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; b&#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>&#125;;<br><br>    pop_up_generator pop_up_gen = <span class="hljs-built_in">pop_up</span>(a, b);<br>    <span class="hljs-keyword">while</span> (!pop_up_gen.<span class="hljs-built_in">done</span>()) &#123;<br>        std::cout &lt;&lt; <span class="hljs-built_in">pop_up_gen</span>() &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p>The sub items below are where coroutines can be used.</p></blockquote><ul><li><a href="https://www.youtube.com/watch?v=ImLFlLjSveM">How C++20 Changes the Way We Write Code - Timur Doumler - CppCon 2020</a><ul><li>Generator</li><li>Compiler</li></ul></li><li><a href="https://www.youtube.com/watch?v=8sEe-4tig_A">C++20’s Coroutines for Beginners - Andreas Fertig - CppCon 2022</a></li><li><a href="https://www.youtube.com/watch?v=J7fYddslH0Q">Deciphering C++ Coroutines - A Diagrammatic Coroutine Cheat Sheet - Andreas Weis - CppCon 2022</a><ul><li>syncronous <code>read()</code> and asyncronous <code>co_await async_read</code></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>cpp</category>
      
      <category>stl</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>cpp20</tag>
      
      <tag>stl</tag>
      
      <tag>coroutines</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>.NET HttpWebRequest Connection Limit</title>
    <link href="/2023/04/07/NET-HttpWebRequest-Connection-Limit/"/>
    <url>/2023/04/07/NET-HttpWebRequest-Connection-Limit/</url>
    
    <content type="html"><![CDATA[<h2 id="Trap"><a href="#Trap" class="headerlink" title="Trap"></a>Trap</h2><p>Recently I stuck in a trap. There is a performance issue in the project I’m taking responsibility for. There is an interface in the project. As a .NET client, it would send quite a few keys to server and would receive the resources corresponding to the keys one by one.</p><p>Some customers gave us some feedback that the resources fetching costed very long time and it affected customers’ productivity unacceptably. Unfortunately, we’re not able to gain the actual quantity of keys in customers’ usage environment, but fortunately we found a way to reproduce the issue and recorded it by Windows Performance Recorder(WPR) though it costed at least 10 minutes.</p><p>The keys have been separated into multiple groups by every 200 keys as a group. Every group would be sent to server parallelly. From this perspective, the performance issue are beyond our expectations.</p><h2 id="Profiling-Call-Stack"><a href="#Profiling-Call-Stack" class="headerlink" title="Profiling Call Stack"></a>Profiling Call Stack</h2><p>After profiling in Windows Performance Analyzer(WPA), the call stack within threads showed some clues. Many threads’ wait time are pretty long. It means that they are blocked by IO or lock. With further inquiry, in most cases they are blocked inside <code>SendRequest</code> but before the actual request sending. We have to throw a question - what block these threads and make them waiting? Luckily, WPA shows the call stack of the ready thread(s) next to every blocked thread. Every ready thread is recorded at the socket <code>read</code> stage, and they are also blocked at <code>SendRequest</code> by other threads in <code>read</code> shown in the WPA call stack.</p><p>Based on it, I conjectured that the thread leverages a lock and releases the lock in <code>read</code>. After that, the waiting thread would gets the lock and then does sending its request. I have to mention that those threads follow one by one and they construct a dependent chain.</p><p>I suspected there is a thread pool inside the .NET network framework, after all there is a function named <code>WaitOne</code> about thread. However, I couldn’t find any keyword about thread pool by reviewing the code context through the call stack.</p><p>In the end, I noticed the type of request is <code>HttpWebRequest</code> and tried to search it in the Internet. Fortunately, there is another village in the dark.</p><h2 id="HttpWebRequest-Connection-limitation"><a href="#HttpWebRequest-Connection-limitation" class="headerlink" title="HttpWebRequest Connection limitation"></a>HttpWebRequest Connection limitation</h2><p><strong>For <code>HttpWebRequest</code>, it has a concurrent connection limit that is <code>2</code> by default.</strong> It approximates no concurrency! No wonder the pool threads were blocked one by one…</p><p>The solution to fix it isn’t hard. We just need to increase the connection limit to a reasonable value such as <code>512</code>.Actually we have 2 ways to achieve it:</p><h3 id="Adjust-in-Configuration"><a href="#Adjust-in-Configuration" class="headerlink" title="Adjust in Configuration"></a>Adjust in Configuration</h3><ol><li><p>Open the configuration file <code>App.config</code> in the project.</p></li><li><p>The original configuration might be like this:</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">startup</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">supportedRuntime</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;v4.0&quot;</span> <span class="hljs-attr">sku</span>=<span class="hljs-string">&quot;.NETFramework,Version=v4.6&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Add a field scope named <code>connectionManagement</code> and add a value about <code>maxconnection</code>.</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">startup</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">supportedRuntime</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;v4.0&quot;</span> <span class="hljs-attr">sku</span>=<span class="hljs-string">&quot;.NETFramework,Version=v4.6&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">system.net</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">defaultProxy</span> <span class="hljs-attr">enabled</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">proxy</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bypasslist</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">module</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">defaultProxy</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">connectionManagement</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">add</span> <span class="hljs-attr">address</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attr">maxconnection</span>=<span class="hljs-string">&quot;512&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">connectionManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">system.net</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="Adjust-in-Program"><a href="#Adjust-in-Program" class="headerlink" title="Adjust in Program"></a>Adjust in Program</h3><p>Add a line in code like below:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C#">System.Net.ServicePointManager.DefaultConnectionLimit = <span class="hljs-number">512</span>;<br></code></pre></td></tr></table></figure><h2 id="Other-Informations"><a href="#Other-Informations" class="headerlink" title="Other Informations"></a>Other Informations</h2><p>As for <code>HttpClient</code> after .NET 4.5, it seems that it doesn’t have the connection limit. <strong>Note that</strong> it’s different to <code>HttpWebRequest</code>.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://learn.microsoft.com/en-us/dotnet/api/system.net.servicepointmanager.defaultconnectionlimit?view=netframework-4.8#System_Net_ServicePointManager_DefaultConnectionLimit">Microsoft .NET Framework 4.8 Documentation</a></li><li><a href="https://blog.csdn.net/PLA12147111/article/details/105496791">https://blog.csdn.net/PLA12147111/article/details/105496791</a></li><li><a href="https://blog.csdn.net/defender_/article/details/91949613">https://blog.csdn.net/defender_/article/details/91949613</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>csharp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>csharp</tag>
      
      <tag>dot_net</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Some Template Meta Programming Practices</title>
    <link href="/2023/04/06/Some-Template-Meta-Programming-Practices/"/>
    <url>/2023/04/06/Some-Template-Meta-Programming-Practices/</url>
    
    <content type="html"><![CDATA[<h2 id="A-discovery"><a href="#A-discovery" class="headerlink" title="A discovery"></a>A discovery</h2><p>I found <a href="https://www.zhihu.com/question/593538067/answer/2967552181">a case</a> that struck me.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">temp</span> &#123;<br>    T value;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span>... Ts&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">temp</span> &#123;<br>    temp&lt;T&gt; value_temp;<br>    temp&lt;Ts...&gt; rest_temps;<br>&#125;;<br></code></pre></td></tr></table></figure><p>It can’t pass compiling with a error message - <em>Too many template parameters in template redeclaration</em>.</p><p>It would work if we changed it as below:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span>... Ts&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">temp</span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">temp</span>&lt;T&gt; &#123;<br>    T value;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span>... Ts&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">temp</span> &#123;<br>    temp&lt;T&gt; value_temp;<br>    temp&lt;Ts...&gt; rest_temps;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>The declaration with multiple parameters certainly can be placed at the beginning, as long as you like. :)</p></blockquote><h2 id="Accumulate-the-parameters-in-the-template"><a href="#Accumulate-the-parameters-in-the-template" class="headerlink" title="Accumulate the parameters in the template"></a>Accumulate the parameters in the template</h2><p>I wrote the below code to practice template specialization.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-type">int</span> i, <span class="hljs-type">int</span>... Args&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Sum</span> &#123;<br>    <span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> value = i + Sum&lt;Args...&gt;::value;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-type">int</span> i&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Sum</span>&lt;i&gt; &#123;<br>    <span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> value = i;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::cout &lt;&lt; Sum&lt;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&gt;::value &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>cpp</category>
      
      <category>template</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>template</tag>
      
      <tag>template-meta-programming</tag>
      
      <tag>tmp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>multi-thread Examples</title>
    <link href="/2023/04/05/multi-thread-Examples/"/>
    <url>/2023/04/05/multi-thread-Examples/</url>
    
    <content type="html"><![CDATA[<h2 id="std-promise"><a href="#std-promise" class="headerlink" title="std::promise"></a><code>std::promise</code></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;chrono&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;future&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">promise_set_value</span><span class="hljs-params">(std::promise&lt;<span class="hljs-type">int</span>&gt;&amp; promise)</span> </span>&#123;<br>    std::this_thread::<span class="hljs-built_in">sleep_for</span>(std::chrono::<span class="hljs-built_in">seconds</span>(<span class="hljs-number">1</span>));<br>    promise.<span class="hljs-built_in">set_value</span>(<span class="hljs-number">100</span>);  <span class="hljs-comment">// future would become ready after promise.set_value()</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::promise&lt;<span class="hljs-type">int</span>&gt; promise;<br>    std::future&lt;<span class="hljs-type">int</span>&gt; future = promise.<span class="hljs-built_in">get_future</span>();<br>    <span class="hljs-function">std::thread <span class="hljs-title">t</span><span class="hljs-params">(&amp;promise_set_value, std::ref(promise))</span></span>;<br>    std::cout &lt;&lt; future.<span class="hljs-built_in">get</span>() &lt;&lt; std::endl;  <span class="hljs-comment">// block</span><br><br>    t.<span class="hljs-built_in">join</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="std-async"><a href="#std-async" class="headerlink" title="std::async"></a><code>std::async</code></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;future&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> from, <span class="hljs-type">int</span> to)</span> </span>&#123;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = from; i &lt; to; ++i) &#123;<br>        ret += i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum_with_multi_thread</span><span class="hljs-params">(<span class="hljs-type">int</span> from, <span class="hljs-type">int</span> to, <span class="hljs-type">size_t</span> thread_num)</span> </span>&#123;<br>    <span class="hljs-type">int</span> count = to - from;<br>    <span class="hljs-type">int</span> count_per_thread = thread_num &gt; <span class="hljs-number">0</span> ? count / thread_num : count;<br>    std::vector&lt;std::future&lt;<span class="hljs-type">int</span>&gt;&gt; v;<br>    <span class="hljs-keyword">for</span> (; from &lt; to; from += count_per_thread) &#123;<br>        v.<span class="hljs-built_in">push_back</span>(std::<span class="hljs-built_in">async</span>(<br>            sum,<br>            from,<br>            from + count_per_thread &gt; to ? to : from + count_per_thread));<br>    &#125;<br><br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;f : v) &#123;<br>        ret += f.<span class="hljs-built_in">get</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="std-packaged-task"><a href="#std-packaged-task" class="headerlink" title="std::packaged_task"></a><code>std::packaged_task</code></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;chrono&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;future&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>&#123;<br>    std::this_thread::<span class="hljs-built_in">sleep_for</span>(std::chrono::<span class="hljs-built_in">seconds</span>(<span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">std::packaged_task&lt;<span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>&gt; <span class="hljs-title">pt</span><span class="hljs-params">(f)</span></span>;<br>    std::future&lt;<span class="hljs-type">int</span>&gt; future = pt.<span class="hljs-built_in">get_future</span>();<br><br>    <span class="hljs-function">std::thread <span class="hljs-title">thread</span><span class="hljs-params">(std::move(pt), <span class="hljs-number">1</span>)</span></span>;<br>    thread.<span class="hljs-built_in">join</span>();<br><br>    <span class="hljs-type">int</span> result = future.<span class="hljs-built_in">get</span>();<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;result: &quot;</span> &lt;&lt; result &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="std-shared-future"><a href="#std-shared-future" class="headerlink" title="std::shared_future"></a><code>std::shared_future</code></h2><p><code>future.get()</code> can be called only once, otherwise there is a segmentation fault.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;future&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::promise&lt;<span class="hljs-type">int</span>&gt; promise;<br><br>    std::future&lt;<span class="hljs-type">int</span>&gt; future = promise.<span class="hljs-built_in">get_future</span>();<br><br>    promise.<span class="hljs-built_in">set_value</span>(<span class="hljs-number">1</span>);<br><br>    std::cout &lt;&lt; future.<span class="hljs-built_in">get</span>() &lt;&lt; std::endl;<br><br>    <span class="hljs-comment">// Segmentation fault when call `future.get()` secondly</span><br>    <span class="hljs-comment">// std::cout &lt;&lt; future.get() &lt;&lt; std::endl;</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>If we have to get the result from the future such as inside multiple threads, we can request for help from <code>std::shared_future</code> whose feature is a little similar to <code>std::shared_ptr</code>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;future&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::promise&lt;<span class="hljs-type">int</span>&gt; promise;<br><br>    std::shared_future&lt;<span class="hljs-type">int</span>&gt; shared_future1 = promise.<span class="hljs-built_in">get_future</span>();<br>    <span class="hljs-comment">// The initialization of `shared_future1` is actually equivalent to the code below:</span><br>    <span class="hljs-comment">// std::future&lt;int&gt; future = promise.get_future();</span><br>    <span class="hljs-comment">// std::shared_future&lt;int&gt; shared_future1 = std::move(future);</span><br>    std::shared_future&lt;<span class="hljs-type">int</span>&gt; shared_future2 = future1;<br><br>    promise.<span class="hljs-built_in">set_value</span>(<span class="hljs-number">1</span>);<br><br>    std::cout &lt;&lt; shared_future1.<span class="hljs-built_in">get</span>() &lt;&lt; std::endl;<br>    std::cout &lt;&lt; shared_future2.<span class="hljs-built_in">get</span>() &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/553377822">https://zhuanlan.zhihu.com/p/553377822</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>cpp</category>
      
      <category>stl</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>cpp11</tag>
      
      <tag>multi-thread</tag>
      
      <tag>promise</tag>
      
      <tag>future</tag>
      
      <tag>packaged_task</tag>
      
      <tag>shared_future</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vtable, type_info and RTTI</title>
    <link href="/2023/04/04/vtable-type-info-and-RTTI/"/>
    <url>/2023/04/04/vtable-type-info-and-RTTI/</url>
    
    <content type="html"><![CDATA[<p>vtable’s concept is familiar to us, as well as <code>type_info</code>. They are different sides of implementation of RTTI - Runtime Type Identification.With them, we can get the real type of an object and call overwritten functions.</p><p>For understanding their memory distribution, let’s go through an example.</p><h2 id="vtable-x2F-type-info-Example"><a href="#vtable-x2F-type-info-Example" class="headerlink" title="vtable&#x2F;type_info Example"></a>vtable&#x2F;type_info Example</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> i&#123;<span class="hljs-number">1</span>&#125;;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">func1</span><span class="hljs-params">()</span> </span>&#123; std::cout &lt;&lt; <span class="hljs-string">&quot;func1, this: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span> &lt;&lt; std::endl; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">int</span> <span class="hljs-title">func2</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">auto</span> base = <span class="hljs-keyword">new</span> Base;<br>    base-&gt;<span class="hljs-built_in">func1</span>();<br><br>    <span class="hljs-type">void</span>*** vtable_ptr_addr = (<span class="hljs-type">void</span>***)base;<br>    <span class="hljs-type">void</span>** vtable = *vtable_ptr_addr;<br>    <span class="hljs-type">void</span>* vfunc = vtable[<span class="hljs-number">0</span>];<br><br>    <span class="hljs-keyword">using</span> VFUNC = <span class="hljs-built_in">void</span> (*)(Base*);<br>    VFUNC real_func = (VFUNC)vfunc;<br>    <span class="hljs-built_in">real_func</span>(base);<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;base: &quot;</span> &lt;&lt; base &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;vtable_ptr_addr: &quot;</span> &lt;&lt; vtable_ptr_addr &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;vtable: &quot;</span> &lt;&lt; vtable &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;vfunc: &quot;</span> &lt;&lt; vfunc &lt;&lt; std::endl;<br><br>    <span class="hljs-type">const</span> std::type_info&amp; type = <span class="hljs-built_in">typeid</span>(Base);<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;type_info addr: &quot;</span> &lt;&lt; &amp;type &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;type_info size: &quot;</span> &lt;&lt; std::hex &lt;&lt; <span class="hljs-string">&quot;0x&quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(type) &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Here is a result after a run in my machine:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs log">func1, this: 0x139e066e0<br>func1, this: 0x139e066e0<br>base: 0x139e066e0<br>vtable_ptr_addr: 0x139e066e0<br>vtable: 0x1008e8110<br>vfunc: 0x1008e7138<br>type_info addr: 0x1008e80f0<br>type_info size: 0x10<br></code></pre></td></tr></table></figure><h2 id="Memory-Description"><a href="#Memory-Description" class="headerlink" title="Memory Description"></a>Memory Description</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs log">                                                                                                       +-----------------------+<br>                                                                                           0x1008e80f0 |       type_info       |<br>                                                                                                       |                       |<br>                                                                                                       +-----------------------+<br>                                                                                           0x1008e8100 |       gap buffer      |<br>                                                                  Base object                          |                       |<br>+---------------------------------------+                  +------------------------+                  +-----------------------+              func1<br>|  base(vtable_ptr_addr) = 0x139e066e0  |----&gt; 0x139e066e0 |  vtable = 0x1008e8110  |----&gt; 0x1008e8110 |  func1 = 0x1008e7138  |---------&gt; 0x1008e7138<br>+---------------------------------------+                  +------------------------+                  +-----------------------+              func2<br>                base addr                      0x139e066e8 |       i = 1            |      0x1008e8118 |  func2 = 0xdeadbeef0  |---------&gt; 0xdeadbeef0<br>                                                           +------------------------+                  +-----------------------+         <br></code></pre></td></tr></table></figure><blockquote><p>The address of the function <code>func2</code> is mocked.</p></blockquote><p>The address of vtable and type_info are close and they can be calculated from each other by a specific offset.</p><h2 id="type-info-Example"><a href="#type-info-Example" class="headerlink" title="type_info Example"></a><code>type_info</code> Example</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseWithoutRTTI</span> &#123;&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DerivedWithoutRTTI</span> : <span class="hljs-keyword">public</span> BaseWithoutRTTI &#123;&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseWithRTTI</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> </span>&#123;&#125;;<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">BaseWithRTTI</span>() = <span class="hljs-keyword">default</span>;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DerivedWithRTTI</span> : <span class="hljs-keyword">public</span> BaseWithRTTI &#123;&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    BaseWithoutRTTI* base_without_RTTI = <span class="hljs-keyword">new</span> DerivedWithoutRTTI;<br>    std::cout &lt;&lt; <span class="hljs-built_in">typeid</span>(base_without_RTTI).<span class="hljs-built_in">name</span>() &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-built_in">typeid</span>(*base_without_RTTI).<span class="hljs-built_in">name</span>() &lt;&lt; std::endl;<br><br>    BaseWithRTTI* base_with_RTTI = <span class="hljs-keyword">new</span> DerivedWithRTTI;<br>    std::cout &lt;&lt; <span class="hljs-built_in">typeid</span>(base_with_RTTI).<span class="hljs-built_in">name</span>() &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-built_in">typeid</span>(*base_with_RTTI).<span class="hljs-built_in">name</span>() &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>The output is:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">P15BaseWithoutRTTI<br>15BaseWithoutRTTI<br>P12BaseWithRTTI<br>15DerivedWithRTTI<br></code></pre></td></tr></table></figure><p>We can easily find we can get the real object correctly only if there are virtual functions inside <code>Base</code> class. In other words, <code>vtable</code> and <code>type_info</code> are twins.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.sandordargo.com/blog/2023/03/01/binary-sizes-and-rtti">https://www.sandordargo.com/blog/2023/03/01/binary-sizes-and-rtti</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>rtti</tag>
      
      <tag>vtable</tag>
      
      <tag>vfunction</tag>
      
      <tag>type_info</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Introduction to C++20 jthread</title>
    <link href="/2023/04/03/Introduction-to-C-20-jthread/"/>
    <url>/2023/04/03/Introduction-to-C-20-jthread/</url>
    
    <content type="html"><![CDATA[<h2 id="std-thread"><a href="#std-thread" class="headerlink" title="std::thread"></a><code>std::thread</code></h2><p>Generally, we have to control <code>std::thread</code>‘s life cycle by writting <code>join</code>&#x2F;<code>detach</code> manually, but actually RAII can help to do it perfectly. Fortuantely, we can achieve it by using <code>std::jthread</code> in C++20 standard library.</p><h2 id="std-jthread"><a href="#std-jthread" class="headerlink" title="std::jthread"></a><code>std::jthread</code></h2><div class="note note-info">            <p>The implementation of <code>std::jthread</code> shown in this page is from MSVC STL.</p>          </div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">nostopstate_t</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">nostopstate_t</span><span class="hljs-params">()</span> </span>= <span class="hljs-keyword">default</span>;<br>&#125;;<br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">nostopstate_t</span> nostopstate&#123;&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">jthread</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">using</span> id                 = thread::id;<br>    <span class="hljs-keyword">using</span> native_handle_type = thread::native_handle_type;<br><br>    <span class="hljs-built_in">jthread</span>() <span class="hljs-keyword">noexcept</span> : _Impl&#123;&#125;, _Ssource&#123;nostopstate&#125; &#123;&#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Fn</span>, <span class="hljs-keyword">class</span>... _Args, <span class="hljs-type">enable_if_t</span>&lt;!is_same_v&lt;<span class="hljs-type">remove_cvref_t</span>&lt;_Fn&gt;, jthread&gt;, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    _NODISCARD_CTOR <span class="hljs-keyword">explicit</span> <span class="hljs-built_in">jthread</span>(_Fn&amp;&amp; _Fx, _Args&amp;&amp;... _Ax) &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">constexpr</span> (is_invocable_v&lt;<span class="hljs-type">decay_t</span>&lt;_Fn&gt;, stop_token, <span class="hljs-type">decay_t</span>&lt;_Args&gt;...&gt;) &#123;<br>            _Impl._Start(_STD forward&lt;_Fn&gt;(_Fx), _Ssource.<span class="hljs-built_in">get_token</span>(), _STD forward&lt;_Args&gt;(_Ax)...);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            _Impl._Start(_STD forward&lt;_Fn&gt;(_Fx), _STD forward&lt;_Args&gt;(_Ax)...);<br>        &#125;<br>    &#125;<br><br>    ~<span class="hljs-built_in">jthread</span>() &#123;<br>        _Try_cancel_and_join();<br>    &#125;<br><br>    <span class="hljs-built_in">jthread</span>(<span class="hljs-type">const</span> jthread&amp;)     = <span class="hljs-keyword">delete</span>;<br>    <span class="hljs-built_in">jthread</span>(jthread&amp;&amp;) <span class="hljs-keyword">noexcept</span> = <span class="hljs-keyword">default</span>;<br>    jthread&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> jthread&amp;) = <span class="hljs-keyword">delete</span>;<br><br>    jthread&amp; <span class="hljs-keyword">operator</span>=(jthread&amp;&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-comment">// note: the standard specifically disallows making self-move-assignment a no-op here</span><br>        <span class="hljs-comment">// N4861 [thread.jthread.cons]/13</span><br>        <span class="hljs-comment">// Effects: If joinable() is true, calls request_stop() and then join(). Assigns the state</span><br>        <span class="hljs-comment">// of x to *this and sets x to a default constructed state.</span><br>        _Try_cancel_and_join();<br>        _Impl    = _STD <span class="hljs-built_in">move</span>(_Other._Impl);<br>        _Ssource = _STD <span class="hljs-built_in">move</span>(_Other._Ssource);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(jthread&amp; _Other)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        _Impl.<span class="hljs-built_in">swap</span>(_Other._Impl);<br>        _Ssource.<span class="hljs-built_in">swap</span>(_Other._Ssource);<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD <span class="hljs-type">bool</span> <span class="hljs-title">joinable</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _Impl.<span class="hljs-built_in">joinable</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">join</span><span class="hljs-params">()</span> </span>&#123;<br>        _Impl.<span class="hljs-built_in">join</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">detach</span><span class="hljs-params">()</span> </span>&#123;<br>        _Impl.<span class="hljs-built_in">detach</span>();<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD id <span class="hljs-title">get_id</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _Impl.<span class="hljs-built_in">get_id</span>();<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD native_handle_type <span class="hljs-title">native_handle</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> <span class="hljs-comment">/* strengthened */</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _Impl.<span class="hljs-built_in">native_handle</span>();<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD stop_source <span class="hljs-title">get_stop_source</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _Ssource;<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD stop_token <span class="hljs-title">get_stop_token</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _Ssource.<span class="hljs-built_in">get_token</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">request_stop</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _Ssource.<span class="hljs-built_in">request_stop</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(jthread&amp; _Lhs, jthread&amp; _Rhs)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        _Lhs.<span class="hljs-built_in">swap</span>(_Rhs);<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD <span class="hljs-type">static</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title">hardware_concurrency</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> thread::<span class="hljs-built_in">hardware_concurrency</span>();<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">void</span> _Try_cancel_and_join() <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">if</span> (_Impl.<span class="hljs-built_in">joinable</span>()) &#123;<br>            _Ssource.<span class="hljs-built_in">request_stop</span>();<br>            _Impl.<span class="hljs-built_in">join</span>();<br>        &#125;<br>    &#125;<br><br>    thread _Impl;<br>    stop_source _Ssource;<br>&#125;;<br></code></pre></td></tr></table></figure><p><code>std::jthread</code> looks basically similar to <code>std::thread</code>. It identifies the thread state by <code>joinable()</code> and adjusts the thread state by <code>join()</code>. In addition to this, we cann’t ignore the member variable <code>_Ssource</code> whose type is <code>stop_source</code>. What is it?</p><h2 id="stop-source"><a href="#stop-source" class="headerlink" title="stop_source"></a><code>stop_source</code></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">stop_source</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">stop_source</span>() : _State&#123;<span class="hljs-keyword">new</span> _Stop_state&#125; &#123;&#125;<br>    <span class="hljs-keyword">explicit</span> <span class="hljs-built_in">stop_source</span>(<span class="hljs-type">nostopstate_t</span>) <span class="hljs-keyword">noexcept</span> : _State&#123;&#125; &#123;&#125;<br>    <span class="hljs-built_in">stop_source</span>(<span class="hljs-type">const</span> stop_source&amp; _Other) <span class="hljs-keyword">noexcept</span> : _State&#123;_Other._State&#125; &#123;<br>        <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> _Local = _State;<br>        <span class="hljs-keyword">if</span> (_Local != <span class="hljs-literal">nullptr</span>) &#123;<br>            _Local-&gt;_Stop_sources.<span class="hljs-built_in">fetch_add</span>(<span class="hljs-number">2</span>, memory_order_relaxed);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">stop_source</span>(stop_source&amp;&amp; _Other) <span class="hljs-keyword">noexcept</span> : _State&#123;<span class="hljs-function">_STD <span class="hljs-title">exchange</span><span class="hljs-params">(_Other._State, <span class="hljs-literal">nullptr</span>)</span>&#125; </span>&#123;&#125;<br>    stop_source&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> stop_source&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123;<br>        stop_source&#123;_Other&#125;.<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    stop_source&amp; <span class="hljs-keyword">operator</span>=(stop_source&amp;&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123;<br>        stop_source&#123;_STD <span class="hljs-built_in">move</span>(_Other)&#125;.<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    ~<span class="hljs-built_in">stop_source</span>() &#123;<br>        <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> _Local = _State;<br>        <span class="hljs-keyword">if</span> (_Local != <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">if</span> ((_Local-&gt;_Stop_sources.<span class="hljs-built_in">fetch_sub</span>(<span class="hljs-number">2</span>, memory_order_acq_rel) &gt;&gt; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">if</span> (_Local-&gt;_Stop_tokens.<span class="hljs-built_in">fetch_sub</span>(<span class="hljs-number">1</span>, memory_order_acq_rel) == <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">delete</span> _Local;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(stop_source&amp; _Other)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-function">_STD <span class="hljs-title">swap</span><span class="hljs-params">(_State, _Other._State)</span></span>;<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD stop_token <span class="hljs-title">get_token</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> _Local = _State;<br>        <span class="hljs-keyword">if</span> (_Local != <span class="hljs-literal">nullptr</span>) &#123;<br>            _Local-&gt;_Stop_tokens.<span class="hljs-built_in">fetch_add</span>(<span class="hljs-number">1</span>, memory_order_relaxed);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> stop_token&#123;_Local&#125;;<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD <span class="hljs-type">bool</span> <span class="hljs-title">stop_requested</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> _Local = _State;<br>        <span class="hljs-keyword">return</span> _Local != <span class="hljs-literal">nullptr</span> &amp;&amp; _Local-&gt;_Stop_requested();<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD <span class="hljs-type">bool</span> <span class="hljs-title">stop_possible</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _State != <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">request_stop</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> _Local = _State;<br>        <span class="hljs-keyword">return</span> _Local &amp;&amp; _Local-&gt;_Request_stop();<br>    &#125;<br><br>    _NODISCARD <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> stop_source&amp; _Lhs, <span class="hljs-type">const</span> stop_source&amp; _Rhs) <span class="hljs-keyword">noexcept</span> = <span class="hljs-keyword">default</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(stop_source&amp; _Lhs, stop_source&amp; _Rhs)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-function">_STD <span class="hljs-title">swap</span><span class="hljs-params">(_Lhs._State, _Rhs._State)</span></span>;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    _Stop_state* _State;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Stop-state"><a href="#Stop-state" class="headerlink" title="_Stop_state"></a><code>_Stop_state</code></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">_Stop_state</span> &#123;<br>    atomic&lt;<span class="hljs-type">uint32_t</span>&gt; _Stop_tokens  = <span class="hljs-number">1</span>; <span class="hljs-comment">// plus one shared by all stop_sources</span><br>    atomic&lt;<span class="hljs-type">uint32_t</span>&gt; _Stop_sources = <span class="hljs-number">2</span>; <span class="hljs-comment">// plus the low order bit is the stop requested bit</span><br>    _Locked_pointer&lt;_Stop_callback_base&gt; _Callbacks;<br>    <span class="hljs-comment">// always uses relaxed operations; ordering provided by the _Callbacks lock</span><br>    <span class="hljs-comment">// (atomic just to get wait/notify support)</span><br>    atomic&lt;<span class="hljs-type">const</span> _Stop_callback_base*&gt; _Current_callback = <span class="hljs-literal">nullptr</span>;<br>    _Thrd_id_t _Stopping_thread                          = <span class="hljs-number">0</span>;<br><br>    _NODISCARD <span class="hljs-type">bool</span> _Stop_requested() <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">return</span> (_Stop_sources.<span class="hljs-built_in">load</span>() &amp; <span class="hljs-type">uint32_t</span>&#123;<span class="hljs-number">1</span>&#125;) != <span class="hljs-number">0</span>;<br>    &#125;<br><br>    _NODISCARD <span class="hljs-type">bool</span> _Stop_possible() <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">return</span> _Stop_sources.<span class="hljs-built_in">load</span>() != <span class="hljs-number">0</span>;<br>    &#125;<br><br>    _NODISCARD <span class="hljs-type">bool</span> _Request_stop() <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-comment">// Attempts to request stop and call callbacks, returns whether request was successful</span><br>        <span class="hljs-keyword">if</span> ((_Stop_sources.<span class="hljs-built_in">fetch_or</span>(<span class="hljs-type">uint32_t</span>&#123;<span class="hljs-number">1</span>&#125;) &amp; <span class="hljs-type">uint32_t</span>&#123;<span class="hljs-number">1</span>&#125;) != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// another thread already requested</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        _Stopping_thread = _Thrd_id();<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-keyword">auto</span> _Head = _Callbacks._Lock_and_load();<br>            _Current_callback.<span class="hljs-built_in">store</span>(_Head, memory_order_relaxed);<br>            _Current_callback.<span class="hljs-built_in">notify_all</span>();<br>            <span class="hljs-keyword">if</span> (_Head == <span class="hljs-literal">nullptr</span>) &#123;<br>                _Callbacks._Store_and_unlock(<span class="hljs-literal">nullptr</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> _Next = _STD <span class="hljs-built_in">exchange</span>(_Head-&gt;_Next, <span class="hljs-literal">nullptr</span>);<br>            _STL_INTERNAL_CHECK(_Head-&gt;_Prev == <span class="hljs-literal">nullptr</span>);<br>            <span class="hljs-keyword">if</span> (_Next != <span class="hljs-literal">nullptr</span>) &#123;<br>                _Next-&gt;_Prev = <span class="hljs-literal">nullptr</span>;<br>            &#125;<br><br>            _Callbacks._Store_and_unlock(_Next); <span class="hljs-comment">// unlock before running _Head so other registrations</span><br>                                                 <span class="hljs-comment">// can detach without blocking on the callback</span><br><br>            _Head-&gt;_Fn(_Head); <span class="hljs-comment">// might destroy *_Head</span><br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Usage-of-std-jthread"><a href="#Usage-of-std-jthread" class="headerlink" title="Usage of std::jthread"></a>Usage of <code>std::jthread</code></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">std::jthread <span class="hljs-title">thread</span><span class="hljs-params">([](std::stop_token st) &#123;</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-keyword">while</span> (!st.stop_requested()) &#123;</span></span><br><span class="hljs-params"><span class="hljs-function">            std::cout &lt;&lt; i++ &lt;&lt; std::endl;</span></span><br><span class="hljs-params"><span class="hljs-function">            std::this_thread::sleep_for(std::chrono::seconds(<span class="hljs-number">1</span>));</span></span><br><span class="hljs-params"><span class="hljs-function">        &#125;</span></span><br><span class="hljs-params"><span class="hljs-function">    &#125;)</span></span>;<br><br>    std::this_thread::<span class="hljs-built_in">sleep_for</span>(std::chrono::<span class="hljs-built_in">seconds</span>(<span class="hljs-number">5</span>));<br>    <span class="hljs-comment">// `request_stop()` will be called when thread&#x27;s dustruction</span><br>    <span class="hljs-comment">// So its explicit call can be omitted</span><br>    thread.<span class="hljs-built_in">request_stop</span>(); <br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>Refer to <a href="https://github.com/josuttis/jthread/tree/master/source">https://github.com/josuttis/jthread/tree/master/source</a> if needing more examples.</p>          </div>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>cpp</category>
      
      <category>stl</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>cpp20</tag>
      
      <tag>stl</tag>
      
      <tag>thread</tag>
      
      <tag>jthread</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>What is std::shared_ptr</title>
    <link href="/2023/04/02/What-is-std-shared-ptr/"/>
    <url>/2023/04/02/What-is-std-shared-ptr/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>The implementation of <code>std::shared_ptr</code> shown in this page is from MSVC STL.</p>          </div><h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><pre><code class=" mermaid">classDiagram_Ptr_base &lt;|-- shared_ptr_Ptr_base &lt;|-- weak_ptr_Ptr_base o-- _Ref_count_base_Ref_count_base &lt;|-- _Ref_count_Ptr_base: - element_type* _ptr_Ptr_base: - _Ref_count_base* _Rep_Ptr_base: - _Move_construct_from(...)_Ptr_base: - _Copy_construct_from(...)_Ptr_base: - _Alias_construct_from(...)_Ptr_base: - _Alias_move_construct_from(...)_Ptr_base: - _Construct_from_weak(...)_Ptr_base: - _Weakly_construct_from(...)shared_ptr: + Constructor()shared_ptr: + Assignment()shared_ptr: + Destructor()shared_ptr: + swap()shared_ptr: + get()shared_ptr: + reset()shared_ptr: + operator*shared_ptr: + operator-&gt;shared_ptr: + operator[]shared_ptr: + operator boolweak_ptr: + Constructor()weak_ptr: + Assignment()weak_ptr: + Destructor()weak_ptr: + swap()weak_ptr: + reset()weak_ptr: + expired()weak_ptr: + lock()_Ref_count_base: - _Atomic_counter_t _Uses_Ref_count_base: - _Atomic_counter_t _Weaks_Ref_count_base: - _Incref()_Ref_count_base: - _Incwref()_Ref_count_base: - _Decref()_Ref_count_base: - _Decwref()_Ref_count_base: - _Use_count()_Ref_count_base: - _Destroy()_Ref_count_base: - _Delete_this()_Ref_count: - _Ty* _ptr_Ref_count: - _Destroy()_Ref_count: - _Delete_this()</code></pre><div class="note note-primary">            <p>Note that <code>element_type* _ptr</code> in <code>_Ptr_base</code> isn’t the same with <code>_Ty* _ptr</code> in <code>_Ref_count</code> strictly.</p>          </div><h2 id="Control-Block-Ref-count-base"><a href="#Control-Block-Ref-count-base" class="headerlink" title="Control Block (_Ref_count_base)"></a>Control Block (<code>_Ref_count_base</code>)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// The abstract base class of control block</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">__declspec</span>(novtable) _Ref_count_base &#123; <span class="hljs-comment">// common code for reference counting</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">// The implementations are in derived class</span><br>    <span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> _Destroy() <span class="hljs-keyword">noexcept</span>     = <span class="hljs-number">0</span>; <span class="hljs-comment">// destroy managed resource (target object)</span><br>    <span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> _Delete_this() <span class="hljs-keyword">noexcept</span> = <span class="hljs-number">0</span>; <span class="hljs-comment">// destroy self</span><br><br>    _Atomic_counter_t _Uses  = <span class="hljs-number">1</span>;<br>    _Atomic_counter_t _Weaks = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-keyword">constexpr</span> _Ref_count_base() <span class="hljs-keyword">noexcept</span> = <span class="hljs-keyword">default</span>; <span class="hljs-comment">// non-atomic initializations</span><br><br><span class="hljs-keyword">public</span>:<br>    _Ref_count_base(<span class="hljs-type">const</span> _Ref_count_base&amp;) = <span class="hljs-keyword">delete</span>;<br>    _Ref_count_base&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> _Ref_count_base&amp;) = <span class="hljs-keyword">delete</span>;<br><br>    <span class="hljs-keyword">virtual</span> ~_Ref_count_base() <span class="hljs-keyword">noexcept</span> &#123;&#125; <span class="hljs-comment">// TRANSITION, should be non-virtual</span><br><br>    <span class="hljs-type">bool</span> _Incref_nz() <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// increment use count if not zero, return true if successful</span><br>        <span class="hljs-keyword">auto</span>&amp; _Volatile_uses = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span>&amp;&gt;(_Uses);<br>        <span class="hljs-type">long</span> _Count = __iso_volatile_load32(<span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span>*&gt;(&amp;_Volatile_uses));<br><br>        <span class="hljs-keyword">while</span> (_Count != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">const</span> <span class="hljs-type">long</span> _Old_value = _INTRIN_RELAXED(_InterlockedCompareExchange)(&amp;_Volatile_uses, _Count + <span class="hljs-number">1</span>, _Count);<br>            <span class="hljs-keyword">if</span> (_Old_value == _Count) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            _Count = _Old_value;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-type">void</span> _Incref() <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// increment use count</span><br>        _MT_INCR(_Uses);<br>    &#125;<br><br>    <span class="hljs-type">void</span> _Incwref() <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// increment weak reference count</span><br>        _MT_INCR(_Weaks);<br>    &#125;<br><br>    <span class="hljs-type">void</span> _Decref() <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// decrement use count</span><br>        <span class="hljs-keyword">if</span> (_MT_DECR(_Uses) == <span class="hljs-number">0</span>) &#123;<br>            _Destroy();<br>            _Decwref();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">void</span> _Decwref() <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// decrement weak reference count</span><br>        <span class="hljs-keyword">if</span> (_MT_DECR(_Weaks) == <span class="hljs-number">0</span>) &#123;<br>            _Delete_this();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">long</span> _Use_count() <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">long</span>&gt;(_Uses);<br>    &#125;<br><br>    <span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span>* _Get_deleter(<span class="hljs-type">const</span> type_info&amp;) <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ref_count</span> : <span class="hljs-keyword">public</span> _Ref_count_base &#123; <span class="hljs-comment">// handle reference counting for pointer without deleter</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">explicit</span> _Ref_count(_Ty* _Px) : _Ref_count_base(), _Ptr(_Px) &#123;&#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">void</span> _Destroy() <span class="hljs-keyword">noexcept</span> <span class="hljs-keyword">override</span> &#123; <span class="hljs-comment">// destroy managed resource</span><br>        <span class="hljs-keyword">delete</span> _Ptr;<br>    &#125;<br><br>    <span class="hljs-type">void</span> _Delete_this() <span class="hljs-keyword">noexcept</span> <span class="hljs-keyword">override</span> &#123; <span class="hljs-comment">// destroy self</span><br>        <span class="hljs-keyword">delete</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    _Ty* _Ptr;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Ptr-base"><a href="#Ptr-base" class="headerlink" title="Ptr_base"></a><code>Ptr_base</code></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ptr_base</span> &#123; <span class="hljs-comment">// base class for `shared_ptr` and `weak_ptr`</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">using</span> element_type = <span class="hljs-type">remove_extent_t</span>&lt;_Ty&gt;;<br><br>    <span class="hljs-function">_NODISCARD <span class="hljs-type">long</span> <span class="hljs-title">use_count</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _Rep ? _Rep-&gt;_Use_count() : <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    <span class="hljs-function">_NODISCARD <span class="hljs-type">bool</span> <span class="hljs-title">owner_before</span><span class="hljs-params">(<span class="hljs-type">const</span> _Ptr_base&lt;_Ty2&gt;&amp; _Right)</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123; <span class="hljs-comment">// compare addresses of manager objects</span><br>        <span class="hljs-keyword">return</span> _Rep &lt; _Right._Rep;<br>    &#125;<br><br>    _Ptr_base(<span class="hljs-type">const</span> _Ptr_base&amp;) = <span class="hljs-keyword">delete</span>;<br>    _Ptr_base&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> _Ptr_base&amp;) = <span class="hljs-keyword">delete</span>;<br><br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-function">_NODISCARD element_type* <span class="hljs-title">get</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _Ptr;<br>    &#125;<br><br>    <span class="hljs-keyword">constexpr</span> _Ptr_base() <span class="hljs-keyword">noexcept</span> = <span class="hljs-keyword">default</span>;<br><br>    ~_Ptr_base() = <span class="hljs-keyword">default</span>;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    <span class="hljs-type">void</span> _Move_construct_from(_Ptr_base&lt;_Ty2&gt;&amp;&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-comment">// implement shared_ptr&#x27;s (converting) move ctor and weak_ptr&#x27;s move ctor</span><br>        _Ptr = _Right._Ptr;<br>        _Rep = _Right._Rep;<br><br>        _Right._Ptr = <span class="hljs-literal">nullptr</span>;<br>        _Right._Rep = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    <span class="hljs-type">void</span> _Copy_construct_from(<span class="hljs-type">const</span> shared_ptr&lt;_Ty2&gt;&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-comment">// implement shared_ptr&#x27;s (converting) copy ctor</span><br>        _Other._Incref();<br><br>        _Ptr = _Other._Ptr;<br>        _Rep = _Other._Rep;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    <span class="hljs-type">void</span> _Alias_construct_from(<span class="hljs-type">const</span> shared_ptr&lt;_Ty2&gt;&amp; _Other, element_type* _Px) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-comment">// implement shared_ptr&#x27;s aliasing ctor</span><br>        _Other._Incref();<br><br>        _Ptr = _Px;<br>        _Rep = _Other._Rep;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    <span class="hljs-type">void</span> _Alias_move_construct_from(shared_ptr&lt;_Ty2&gt;&amp;&amp; _Other, element_type* _Px) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-comment">// implement shared_ptr&#x27;s aliasing move ctor</span><br>        _Ptr = _Px;<br>        _Rep = _Other._Rep;<br><br>        _Other._Ptr = <span class="hljs-literal">nullptr</span>;<br>        _Other._Rep = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty0</span>&gt;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">weak_ptr</span>; <span class="hljs-comment">// specifically, weak_ptr::lock()</span><br><br>    <span class="hljs-comment">// weak -&gt; shared</span><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    <span class="hljs-type">bool</span> _Construct_from_weak(<span class="hljs-type">const</span> weak_ptr&lt;_Ty2&gt;&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-comment">// implement shared_ptr&#x27;s ctor from weak_ptr, and weak_ptr::lock()</span><br>        <span class="hljs-keyword">if</span> (_Other._Rep &amp;&amp; _Other._Rep-&gt;_Incref_nz()) &#123;<br>            _Ptr = _Other._Ptr;<br>            _Rep = _Other._Rep;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-type">void</span> _Incref() <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">if</span> (_Rep) &#123;<br>            _Rep-&gt;_Incref();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">void</span> _Decref() <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// decrement reference count</span><br>        <span class="hljs-keyword">if</span> (_Rep) &#123;<br>            _Rep-&gt;_Decref();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">void</span> _Swap(_Ptr_base&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// swap pointers</span><br>        <span class="hljs-function">_STD <span class="hljs-title">swap</span><span class="hljs-params">(_Ptr, _Right._Ptr)</span></span>;<br>        <span class="hljs-function">_STD <span class="hljs-title">swap</span><span class="hljs-params">(_Rep, _Right._Rep)</span></span>;<br>    &#125;<br><br>    <span class="hljs-comment">// shared -&gt; weak</span><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    <span class="hljs-type">void</span> _Weakly_construct_from(<span class="hljs-type">const</span> _Ptr_base&lt;_Ty2&gt;&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// implement weak_ptr&#x27;s ctors</span><br>        <span class="hljs-keyword">if</span> (_Other._Rep) &#123;<br>            _Ptr = _Other._Ptr;<br>            _Rep = _Other._Rep;<br>            _Rep-&gt;_Incwref();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            _STL_INTERNAL_CHECK(!_Ptr &amp;&amp; !_Rep);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    <span class="hljs-type">void</span> _Weakly_convert_lvalue_avoiding_expired_conversions(<span class="hljs-type">const</span> _Ptr_base&lt;_Ty2&gt;&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-comment">// implement weak_ptr&#x27;s copy converting ctor</span><br>        <span class="hljs-keyword">if</span> (_Other._Rep) &#123;<br>            _Rep = _Other._Rep; <span class="hljs-comment">// always share ownership</span><br>            _Rep-&gt;_Incwref();<br><br>            <span class="hljs-keyword">if</span> (_Rep-&gt;_Incref_nz()) &#123;<br>                _Ptr = _Other._Ptr; <span class="hljs-comment">// keep resource alive during conversion, handling virtual inheritance</span><br>                _Rep-&gt;_Decref();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                _STL_INTERNAL_CHECK(!_Ptr);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            _STL_INTERNAL_CHECK(!_Ptr &amp;&amp; !_Rep);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    <span class="hljs-type">void</span> _Weakly_convert_rvalue_avoiding_expired_conversions(_Ptr_base&lt;_Ty2&gt;&amp;&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-comment">// implement weak_ptr&#x27;s move converting ctor</span><br>        _Rep        = _Other._Rep; <span class="hljs-comment">// always transfer ownership</span><br>        _Other._Rep = <span class="hljs-literal">nullptr</span>;<br><br>        <span class="hljs-keyword">if</span> (_Rep &amp;&amp; _Rep-&gt;_Incref_nz()) &#123;<br>            _Ptr = _Other._Ptr; <span class="hljs-comment">// keep resource alive during conversion, handling virtual inheritance</span><br>            _Rep-&gt;_Decref();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            _STL_INTERNAL_CHECK(!_Ptr);<br>        &#125;<br><br>        _Other._Ptr = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><br>    <span class="hljs-type">void</span> _Incwref() <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">if</span> (_Rep) &#123;<br>            _Rep-&gt;_Incwref();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">void</span> _Decwref() <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// decrement weak reference count</span><br>        <span class="hljs-keyword">if</span> (_Rep) &#123;<br>            _Rep-&gt;_Decwref();<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    element_type* _Ptr&#123;<span class="hljs-literal">nullptr</span>&#125;;<br>    _Ref_count_base* _Rep&#123;<span class="hljs-literal">nullptr</span>&#125;;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty0</span>&gt;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ptr_base</span>;<br><br>    <span class="hljs-keyword">friend</span> shared_ptr&lt;_Ty&gt;;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty0</span>&gt;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">atomic</span>;<br><br>    <span class="hljs-keyword">friend</span> _Exception_ptr_access;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> _HAS_STATIC_RTTI</span><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty0</span>&gt;<br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> _Dx* <span class="hljs-title">get_deleter</span><span class="hljs-params">(<span class="hljs-type">const</span> shared_ptr&lt;_Ty0&gt;&amp; _Sx)</span> <span class="hljs-keyword">noexcept</span></span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// _HAS_STATIC_RTTI</span></span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a><code>shared_ptr</code></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">shared_ptr</span> : <span class="hljs-keyword">public</span> _Ptr_base&lt;_Ty&gt; &#123; <span class="hljs-comment">// class for reference counted resource management</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">using</span> _Mybase = _Ptr_base&lt;_Ty&gt;;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">using</span> <span class="hljs-keyword">typename</span> _Mybase::element_type;<br><br>    <span class="hljs-keyword">using</span> weak_type = weak_ptr&lt;_Ty&gt;;<br><br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">shared_ptr</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>= <span class="hljs-keyword">default</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">shared_ptr</span><span class="hljs-params">(<span class="hljs-type">nullptr_t</span>)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;&#125; <span class="hljs-comment">// construct empty shared_ptr</span><br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ux</span>,<br>        <span class="hljs-type">enable_if_t</span>&lt;conjunction_v&lt;<span class="hljs-type">conditional_t</span>&lt;is_array_v&lt;_Ty&gt;, _Can_array_delete&lt;_Ux&gt;, _Can_scalar_delete&lt;_Ux&gt;&gt;,<br>                        _SP_convertible&lt;_Ux, _Ty&gt;&gt;,<br>            <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-keyword">explicit</span> <span class="hljs-built_in">shared_ptr</span>(_Ux* _Px) &#123; <span class="hljs-comment">// construct shared_ptr object that owns _Px</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">constexpr</span> (is_array_v&lt;_Ty&gt;) &#123;<br>            _Setpd(_Px, default_delete&lt;_Ux[]&gt;&#123;&#125;);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            _Temporary_owner&lt;_Ux&gt; _Owner(_Px);<br>            _Set_ptr_rep_and_enable_shared(_Owner._Ptr, <span class="hljs-keyword">new</span> _Ref_count&lt;_Ux&gt;(_Owner._Ptr));<br>            _Owner._Ptr = <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ux</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx</span>,<br>        <span class="hljs-type">enable_if_t</span>&lt;conjunction_v&lt;is_move_constructible&lt;_Dx&gt;, _Can_call_function_object&lt;_Dx&amp;, _Ux*&amp;&gt;,<br>                        _SP_convertible&lt;_Ux, _Ty&gt;&gt;,<br>            <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">shared_ptr</span>(_Ux* _Px, _Dx _Dt) &#123; <span class="hljs-comment">// construct with _Px, deleter</span><br>        _Setpd(_Px, _STD <span class="hljs-built_in">move</span>(_Dt));<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ux</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Alloc</span>,<br>        <span class="hljs-type">enable_if_t</span>&lt;conjunction_v&lt;is_move_constructible&lt;_Dx&gt;, _Can_call_function_object&lt;_Dx&amp;, _Ux*&amp;&gt;,<br>                        _SP_convertible&lt;_Ux, _Ty&gt;&gt;,<br>            <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">shared_ptr</span>(_Ux* _Px, _Dx _Dt, _Alloc _Ax) &#123; <span class="hljs-comment">// construct with _Px, deleter, allocator</span><br>        _Setpda(_Px, _STD <span class="hljs-built_in">move</span>(_Dt), _Ax);<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx</span>,<br>        <span class="hljs-type">enable_if_t</span>&lt;conjunction_v&lt;is_move_constructible&lt;_Dx&gt;, _Can_call_function_object&lt;_Dx&amp;, <span class="hljs-type">nullptr_t</span>&amp;&gt;&gt;, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">shared_ptr</span>(<span class="hljs-type">nullptr_t</span>, _Dx _Dt) &#123; <span class="hljs-comment">// construct with nullptr, deleter</span><br>        _Setpd(<span class="hljs-literal">nullptr</span>, _STD <span class="hljs-built_in">move</span>(_Dt));<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Alloc</span>,<br>        <span class="hljs-type">enable_if_t</span>&lt;conjunction_v&lt;is_move_constructible&lt;_Dx&gt;, _Can_call_function_object&lt;_Dx&amp;, <span class="hljs-type">nullptr_t</span>&amp;&gt;&gt;, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">shared_ptr</span>(<span class="hljs-type">nullptr_t</span>, _Dx _Dt, _Alloc _Ax) &#123; <span class="hljs-comment">// construct with nullptr, deleter, allocator</span><br>        _Setpda(<span class="hljs-literal">nullptr</span>, _STD <span class="hljs-built_in">move</span>(_Dt), _Ax);<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    <span class="hljs-built_in">shared_ptr</span>(<span class="hljs-type">const</span> shared_ptr&lt;_Ty2&gt;&amp; _Right, element_type* _Px) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-comment">// construct shared_ptr object that aliases _Right</span><br>        <span class="hljs-keyword">this</span>-&gt;_Alias_construct_from(_Right, _Px);<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    <span class="hljs-built_in">shared_ptr</span>(shared_ptr&lt;_Ty2&gt;&amp;&amp; _Right, element_type* _Px) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-comment">// move construct shared_ptr object that aliases _Right</span><br>        <span class="hljs-keyword">this</span>-&gt;_Alias_move_construct_from(_STD <span class="hljs-built_in">move</span>(_Right), _Px);<br>    &#125;<br><br>    <span class="hljs-built_in">shared_ptr</span>(<span class="hljs-type">const</span> shared_ptr&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// construct shared_ptr object that owns same resource as _Other</span><br>        <span class="hljs-keyword">this</span>-&gt;_Copy_construct_from(_Other);<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>, <span class="hljs-type">enable_if_t</span>&lt;_SP_pointer_compatible&lt;_Ty2, _Ty&gt;::value, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">shared_ptr</span>(<span class="hljs-type">const</span> shared_ptr&lt;_Ty2&gt;&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-comment">// construct shared_ptr object that owns same resource as _Other</span><br>        <span class="hljs-keyword">this</span>-&gt;_Copy_construct_from(_Other);<br>    &#125;<br><br>    <span class="hljs-built_in">shared_ptr</span>(shared_ptr&amp;&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// construct shared_ptr object that takes resource from _Right</span><br>        <span class="hljs-keyword">this</span>-&gt;_Move_construct_from(_STD <span class="hljs-built_in">move</span>(_Right));<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>, <span class="hljs-type">enable_if_t</span>&lt;_SP_pointer_compatible&lt;_Ty2, _Ty&gt;::value, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">shared_ptr</span>(shared_ptr&lt;_Ty2&gt;&amp;&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// construct shared_ptr object that takes resource from _Right</span><br>        <span class="hljs-keyword">this</span>-&gt;_Move_construct_from(_STD <span class="hljs-built_in">move</span>(_Right));<br>    &#125;<br><br>    <span class="hljs-comment">// Upgrade from weak_ptr to shared_ptr</span><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>, <span class="hljs-type">enable_if_t</span>&lt;_SP_pointer_compatible&lt;_Ty2, _Ty&gt;::value, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-keyword">explicit</span> <span class="hljs-built_in">shared_ptr</span>(<span class="hljs-type">const</span> weak_ptr&lt;_Ty2&gt;&amp; _Other) &#123; <span class="hljs-comment">// construct shared_ptr object that owns resource *_Other</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>-&gt;_Construct_from_weak(_Other)) &#123;<br>            _Throw_bad_weak_ptr();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ux</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx</span>,<br>        <span class="hljs-type">enable_if_t</span>&lt;conjunction_v&lt;_SP_pointer_compatible&lt;_Ux, _Ty&gt;,<br>                        is_convertible&lt;<span class="hljs-keyword">typename</span> unique_ptr&lt;_Ux, _Dx&gt;::pointer, element_type*&gt;&gt;,<br>            <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">shared_ptr</span>(unique_ptr&lt;_Ux, _Dx&gt;&amp;&amp; _Other) &#123;<br>        <span class="hljs-keyword">using</span> _Fancy_t   = <span class="hljs-keyword">typename</span> unique_ptr&lt;_Ux, _Dx&gt;::pointer;<br>        <span class="hljs-keyword">using</span> _Raw_t     = <span class="hljs-keyword">typename</span> unique_ptr&lt;_Ux, _Dx&gt;::element_type*;<br>        <span class="hljs-keyword">using</span> _Deleter_t = <span class="hljs-type">conditional_t</span>&lt;is_reference_v&lt;_Dx&gt;, <span class="hljs-keyword">decltype</span>(_STD <span class="hljs-built_in">ref</span>(_Other.<span class="hljs-built_in">get_deleter</span>())), _Dx&gt;;<br><br>        <span class="hljs-type">const</span> _Fancy_t _Fancy = _Other.<span class="hljs-built_in">get</span>();<br><br>        <span class="hljs-keyword">if</span> (_Fancy) &#123;<br>            <span class="hljs-type">const</span> _Raw_t _Raw = _Fancy;<br>            <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> _Rx =<br>                <span class="hljs-keyword">new</span> _Ref_count_resource&lt;_Fancy_t, _Deleter_t&gt;(_Fancy, _STD forward&lt;_Dx&gt;(_Other.<span class="hljs-built_in">get_deleter</span>()));<br>            _Set_ptr_rep_and_enable_shared(_Raw, _Rx);<br>            _Other.<span class="hljs-built_in">release</span>();<br>        &#125;<br>    &#125;<br><br>    ~<span class="hljs-built_in">shared_ptr</span>() <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// release resource</span><br>        <span class="hljs-keyword">this</span>-&gt;_Decref();<br>    &#125;<br><br>    shared_ptr&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> shared_ptr&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-built_in">shared_ptr</span>(_Right).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    shared_ptr&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> shared_ptr&lt;_Ty2&gt;&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-built_in">shared_ptr</span>(_Right).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    shared_ptr&amp; <span class="hljs-keyword">operator</span>=(shared_ptr&amp;&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// take resource from _Right</span><br>        <span class="hljs-built_in">shared_ptr</span>(_STD <span class="hljs-built_in">move</span>(_Right)).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    shared_ptr&amp; <span class="hljs-keyword">operator</span>=(shared_ptr&lt;_Ty2&gt;&amp;&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// take resource from _Right</span><br>        <span class="hljs-built_in">shared_ptr</span>(_STD <span class="hljs-built_in">move</span>(_Right)).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ux</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx</span>&gt;<br>    shared_ptr&amp; <span class="hljs-keyword">operator</span>=(unique_ptr&lt;_Ux, _Dx&gt;&amp;&amp; _Right) &#123; <span class="hljs-comment">// move from unique_ptr</span><br>        <span class="hljs-built_in">shared_ptr</span>(_STD <span class="hljs-built_in">move</span>(_Right)).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(shared_ptr&amp; _Other)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>-&gt;_Swap(_Other);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reset</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123; <span class="hljs-comment">// release resource and convert to empty shared_ptr object</span><br>        <span class="hljs-built_in">shared_ptr</span>().<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ux</span>&gt;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reset</span><span class="hljs-params">(_Ux* _Px)</span> </span>&#123; <span class="hljs-comment">// release, take ownership of _Px</span><br>        <span class="hljs-built_in">shared_ptr</span>(_Px).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ux</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx</span>&gt;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reset</span><span class="hljs-params">(_Ux* _Px, _Dx _Dt)</span> </span>&#123; <span class="hljs-comment">// release, take ownership of _Px, with deleter _Dt</span><br>        <span class="hljs-built_in">shared_ptr</span>(_Px, _Dt).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ux</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Alloc</span>&gt;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reset</span><span class="hljs-params">(_Ux* _Px, _Dx _Dt, _Alloc _Ax)</span> </span>&#123; <span class="hljs-comment">// release, take ownership of _Px, with deleter _Dt, allocator _Ax</span><br>        <span class="hljs-built_in">shared_ptr</span>(_Px, _Dt, _Ax).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">using</span> _Mybase::get;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span> = _Ty, <span class="hljs-type">enable_if_t</span>&lt;!disjunction_v&lt;is_array&lt;_Ty2&gt;, is_void&lt;_Ty2&gt;&gt;, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    _NODISCARD _Ty2&amp; <span class="hljs-keyword">operator</span>*() <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-built_in">get</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span> = _Ty, <span class="hljs-type">enable_if_t</span>&lt;!is_array_v&lt;_Ty2&gt;, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    _NODISCARD _Ty2* <span class="hljs-keyword">operator</span>-&gt;() <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">get</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span> = _Ty, <span class="hljs-keyword">class</span> _Elem = element_type, <span class="hljs-type">enable_if_t</span>&lt;is_array_v&lt;_Ty2&gt;, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    _NODISCARD _Elem&amp; <span class="hljs-keyword">operator</span>[](<span class="hljs-type">ptrdiff_t</span> _Idx) <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> <span class="hljs-comment">/* strengthened */</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">get</span>()[_Idx];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">bool</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">get</span>() != <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_UxptrOrNullptr</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx</span>&gt;<br>    <span class="hljs-type">void</span> _Setpd(<span class="hljs-type">const</span> _UxptrOrNullptr _Px, _Dx _Dt) &#123; <span class="hljs-comment">// take ownership of _Px, deleter _Dt</span><br>        _Temporary_owner_del&lt;_UxptrOrNullptr, _Dx&gt; _Owner(_Px, _Dt);<br>        _Set_ptr_rep_and_enable_shared(<br>            _Owner._Ptr, <span class="hljs-keyword">new</span> _Ref_count_resource&lt;_UxptrOrNullptr, _Dx&gt;(_Owner._Ptr, _STD <span class="hljs-built_in">move</span>(_Dt)));<br>        _Owner._Call_deleter = <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_UxptrOrNullptr</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Alloc</span>&gt;<br>    <span class="hljs-type">void</span> _Setpda(<span class="hljs-type">const</span> _UxptrOrNullptr _Px, _Dx _Dt, _Alloc _Ax) &#123; <span class="hljs-comment">// take ownership of _Px, deleter _Dt, allocator _Ax</span><br>        <span class="hljs-keyword">using</span> _Alref_alloc = _Rebind_alloc_t&lt;_Alloc, _Ref_count_resource_alloc&lt;_UxptrOrNullptr, _Dx, _Alloc&gt;&gt;;<br><br>        _Temporary_owner_del&lt;_UxptrOrNullptr, _Dx&gt; _Owner(_Px, _Dt);<br>        _Alref_alloc _Alref(_Ax);<br>        _Alloc_construct_ptr&lt;_Alref_alloc&gt; _Constructor(_Alref);<br>        _Constructor._Allocate();<br>        _Construct_in_place(*_Constructor._Ptr, _Owner._Ptr, _STD <span class="hljs-built_in">move</span>(_Dt), _Ax);<br>        _Set_ptr_rep_and_enable_shared(_Owner._Ptr, _Unfancy(_Constructor._Ptr));<br>        _Constructor._Ptr    = <span class="hljs-literal">nullptr</span>;<br>        _Owner._Call_deleter = <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ux</span>&gt;<br>    <span class="hljs-type">void</span> _Set_ptr_rep_and_enable_shared(_Ux* <span class="hljs-type">const</span> _Px, _Ref_count_base* <span class="hljs-type">const</span> _Rx) <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// take ownership of _Px</span><br>        <span class="hljs-keyword">this</span>-&gt;_Ptr = _Px;<br>        <span class="hljs-keyword">this</span>-&gt;_Rep = _Rx;<br>        <span class="hljs-function"><span class="hljs-keyword">if</span> <span class="hljs-title">constexpr</span> <span class="hljs-params">(conjunction_v&lt;negation&lt;is_array&lt;_Ty&gt;&gt;, negation&lt;is_volatile&lt;_Ux&gt;&gt;, _Can_enable_shared&lt;_Ux&gt;&gt;)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (_Px &amp;&amp; _Px-&gt;_Wptr.<span class="hljs-built_in">expired</span>()) &#123;<br>                _Px-&gt;_Wptr = shared_ptr&lt;<span class="hljs-type">remove_cv_t</span>&lt;_Ux&gt;&gt;(*<span class="hljs-keyword">this</span>, <span class="hljs-keyword">const_cast</span>&lt;<span class="hljs-type">remove_cv_t</span>&lt;_Ux&gt;*&gt;(_Px));<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">void</span> _Set_ptr_rep_and_enable_shared(<span class="hljs-type">nullptr_t</span>, _Ref_count_base* <span class="hljs-type">const</span> _Rx) <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// take ownership of nullptr</span><br>        <span class="hljs-keyword">this</span>-&gt;_Ptr = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-keyword">this</span>-&gt;_Rep = _Rx;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="shared-ptr-and-array"><a href="#shared-ptr-and-array" class="headerlink" title="shared_ptr and array"></a><code>shared_ptr</code> and array</h3><p>Before C++17, we have to specify deleter when using <code>shared_ptr</code> for array. e.g.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">std::shared_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ptr</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">10</span>], std::default_delete&lt;<span class="hljs-type">int</span>[]&gt;())</span></span>;<br></code></pre></td></tr></table></figure><p>After C++17, <code>shared_ptr</code> supports array and we don’t have to provide custom deleter. e.g.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">std::shared_ptr&lt;<span class="hljs-type">int</span>[]&gt; <span class="hljs-title">ptr</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">10</span>])</span></span>;<br></code></pre></td></tr></table></figure><h3 id="Set-ptr-rep-and-enable-shared"><a href="#Set-ptr-rep-and-enable-shared" class="headerlink" title="_Set_ptr_rep_and_enable_shared"></a><code>_Set_ptr_rep_and_enable_shared</code></h3><p><code>_Set_ptr_rep_and_enable_shared</code> is related to <code>enable_from_shared_this</code>.</p><p><code>_Wptr</code> is actually a <code>weak_ptr</code>. <code>expired()</code> means its use count is 0. In other words, it can be initialized.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">weak_ptr</span> : <span class="hljs-keyword">public</span> _Ptr_base&lt;_Ty&gt; &#123; <span class="hljs-comment">// class for pointer to reference </span><br>    <span class="hljs-function">_NODISCARD <span class="hljs-type">bool</span> <span class="hljs-title">expired</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">use_count</span>() == <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// Others...</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="enable-from-shared-this"><a href="#enable-from-shared-this" class="headerlink" title="enable_from_shared_this"></a><code>enable_from_shared_this</code></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">enable_shared_from_this</span> &#123; <span class="hljs-comment">// provide member functions that create shared_ptr to this</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">using</span> _Esft_type = enable_shared_from_this;<br><br>    <span class="hljs-function">_NODISCARD shared_ptr&lt;_Ty&gt; <span class="hljs-title">shared_from_this</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">shared_ptr</span>&lt;_Ty&gt;(_Wptr);<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD shared_ptr&lt;<span class="hljs-type">const</span> _Ty&gt; <span class="hljs-title">shared_from_this</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">shared_ptr</span>&lt;<span class="hljs-type">const</span> _Ty&gt;(_Wptr);<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD weak_ptr&lt;_Ty&gt; <span class="hljs-title">weak_from_this</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _Wptr;<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD weak_ptr&lt;<span class="hljs-type">const</span> _Ty&gt; <span class="hljs-title">weak_from_this</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _Wptr;<br>    &#125;<br><br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">enable_shared_from_this</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> : _Wptr() &#123;</span>&#125;<br><br>    <span class="hljs-built_in">enable_shared_from_this</span>(<span class="hljs-type">const</span> enable_shared_from_this&amp;) <span class="hljs-keyword">noexcept</span> : _Wptr() &#123;<br>        <span class="hljs-comment">// construct (must value-initialize _Wptr)</span><br>    &#125;<br><br>    enable_shared_from_this&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> enable_shared_from_this&amp;) <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// assign (must not change _Wptr)</span><br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    ~<span class="hljs-built_in">enable_shared_from_this</span>() = <span class="hljs-keyword">default</span>;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Yty</span>&gt;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">shared_ptr</span>;<br><br>    <span class="hljs-keyword">mutable</span> weak_ptr&lt;_Ty&gt; _Wptr;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Notice that there is no way to initialize the <code>_Wptr</code> in <code>enable_shared_from_this</code> hence we need to construct <code>shared_ptr</code> in advance to apply <code>enable_shared_from_this</code> correctly.</p><h2 id="make-shared"><a href="#make-shared" class="headerlink" title="make_shared"></a><code>make_shared</code></h2><p>We all know <code>make_shared</code> is the best practice of the usage about <code>shared_ptr</code>. But why?</p><h3 id="Ref-count-obj2"><a href="#Ref-count-obj2" class="headerlink" title="_Ref_count_obj2"></a><code>_Ref_count_obj2</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">_Wrap</span> &#123;<br>    _Ty _Value; <span class="hljs-comment">// workaround for VSO-586813 &quot;T^ is not allowed in a union&quot;</span><br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ref_count_obj2</span> : <span class="hljs-keyword">public</span> _Ref_count_base &#123; <span class="hljs-comment">// handle reference counting for object in control block, no allocator</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span>... _Types&gt;<br>    <span class="hljs-keyword">explicit</span> _Ref_count_obj2(_Types&amp;&amp;... _Args) : _Ref_count_base() &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> _HAS_CXX20</span><br>        <span class="hljs-function"><span class="hljs-keyword">if</span> <span class="hljs-title">constexpr</span> <span class="hljs-params">(<span class="hljs-keyword">sizeof</span>...(_Types) == <span class="hljs-number">1</span> &amp;&amp; (is_same_v&lt;_For_overwrite_tag, <span class="hljs-type">remove_cvref_t</span>&lt;_Types&gt;&gt; &amp;&amp; ...))</span> </span>&#123;<br>            _Default_construct_in_place(_Storage._Value);<br>            ((<span class="hljs-type">void</span>) _Args, ...);<br>        &#125; <span class="hljs-keyword">else</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// _HAS_CXX20</span></span><br>        &#123;<br>            _Construct_in_place(_Storage._Value, _STD forward&lt;_Types&gt;(_Args)...);<br>        &#125;<br>    &#125;<br><br>    ~_Ref_count_obj2() <span class="hljs-keyword">noexcept</span> <span class="hljs-keyword">override</span> &#123; <span class="hljs-comment">// TRANSITION, should be non-virtual</span><br>        <span class="hljs-comment">// nothing to do, _Storage._Value was already destroyed in _Destroy</span><br><br>        <span class="hljs-comment">// N4849 [class.dtor]/7:</span><br>        <span class="hljs-comment">// &quot;A defaulted destructor for a class X is defined as deleted if:</span><br>        <span class="hljs-comment">// X is a union-like class that has a variant member with a non-trivial destructor&quot;</span><br>    &#125;<br><br>    <span class="hljs-keyword">union</span> &#123;<br>        _Wrap&lt;_Ty&gt; _Storage;<br>    &#125;;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">void</span> _Destroy() <span class="hljs-keyword">noexcept</span> <span class="hljs-keyword">override</span> &#123; <span class="hljs-comment">// destroy managed resource</span><br>        _Destroy_in_place(_Storage._Value);<br>    &#125;<br><br>    <span class="hljs-type">void</span> _Delete_this() <span class="hljs-keyword">noexcept</span> <span class="hljs-keyword">override</span> &#123; <span class="hljs-comment">// destroy self</span><br>        <span class="hljs-keyword">delete</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">if</span> _HAS_CXX20</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>, <span class="hljs-keyword">class</span>... _Types,<br>    <span class="hljs-keyword">class</span> = <span class="hljs-type">void_t</span>&lt;<span class="hljs-keyword">decltype</span>(::<span class="hljs-built_in">new</span> (_STD <span class="hljs-built_in">declval</span>&lt;<span class="hljs-type">void</span>*&gt;()) _Ty(_STD <span class="hljs-built_in">declval</span>&lt;_Types&gt;()...))&gt;&gt;<br><span class="hljs-keyword">constexpr</span> _Ty* <span class="hljs-built_in">construct_at</span>(_Ty* <span class="hljs-type">const</span> _Location, _Types&amp;&amp;... _Args) <span class="hljs-built_in">noexcept</span>(<br>    <span class="hljs-built_in">noexcept</span>(::<span class="hljs-built_in">new</span> (_Voidify_iter(_Location)) _Ty(_STD forward&lt;_Types&gt;(_Args)...))) <span class="hljs-comment">/* strengthened */</span> &#123;<br>    <span class="hljs-keyword">return</span> ::<span class="hljs-built_in">new</span> (_Voidify_iter(_Location)) _Ty(_STD forward&lt;_Types&gt;(_Args)...);<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// _HAS_CXX20</span></span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>, <span class="hljs-keyword">class</span>... _Types&gt;<br>_CONSTEXPR20 <span class="hljs-type">void</span> _Construct_in_place(_Ty&amp; _Obj, _Types&amp;&amp;... _Args) <span class="hljs-built_in">noexcept</span>(<br>    is_nothrow_constructible_v&lt;_Ty, _Types...&gt;) &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> _HAS_CXX20</span><br>    <span class="hljs-keyword">if</span> (_STD <span class="hljs-built_in">is_constant_evaluated</span>()) &#123;<br>        <span class="hljs-function">_STD <span class="hljs-title">construct_at</span><span class="hljs-params">(_STD addressof(_Obj), _STD forward&lt;_Types&gt;(_Args)...)</span></span>;<br>    &#125; <span class="hljs-keyword">else</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// _HAS_CXX20</span></span><br>    &#123;<br>        ::<span class="hljs-built_in">new</span> (_Voidify_iter(_STD <span class="hljs-built_in">addressof</span>(_Obj))) _Ty(_STD forward&lt;_Types&gt;(_Args)...);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>&gt;<br><span class="hljs-type">void</span> _Default_construct_in_place(_Ty&amp; _Obj) <span class="hljs-built_in">noexcept</span>(is_nothrow_default_constructible_v&lt;_Ty&gt;) &#123;<br>    ::<span class="hljs-keyword">new</span> (_Voidify_iter(_STD <span class="hljs-built_in">addressof</span>(_Obj))) _Ty;<br>&#125;<br></code></pre></td></tr></table></figure><p>We can find the counters in <code>_Ref_count_base</code> and the target object (<code>_Storage</code> in <code>_Ref_count_obj2</code>) are allocated at the same time.</p><p>There are at lease 2 advantages in this way:</p><ul><li>Allocates memory at a tight memory space.</li><li>Allocates just once to reduce the number of system calls.</li></ul><h3 id="The-implementation-of-make-shared"><a href="#The-implementation-of-make-shared" class="headerlink" title="The implementation of make_shared"></a>The implementation of <code>make_shared</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>, <span class="hljs-keyword">class</span>... _Types&gt;<br>_NODISCARD<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> _HAS_CXX20</span><br>    <span class="hljs-type">enable_if_t</span>&lt;!is_array_v&lt;_Ty&gt;, shared_ptr&lt;_Ty&gt;&gt;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span> <span class="hljs-comment">// _HAS_CXX20</span></span><br>    shared_ptr&lt;_Ty&gt;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// _HAS_CXX20</span></span><br>    <span class="hljs-built_in">make_shared</span>(_Types&amp;&amp;... _Args) &#123; <span class="hljs-comment">// make a shared_ptr to non-array object</span><br>    <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> _Rx = <span class="hljs-keyword">new</span> _Ref_count_obj2&lt;_Ty&gt;(_STD forward&lt;_Types&gt;(_Args)...);<br>    shared_ptr&lt;_Ty&gt; _Ret;<br>    _Ret._Set_ptr_rep_and_enable_shared(_STD <span class="hljs-built_in">addressof</span>(_Rx-&gt;_Storage._Value), _Rx);<br>    <span class="hljs-keyword">return</span> _Ret;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Deleter-in-shared-ptr"><a href="#Deleter-in-shared-ptr" class="headerlink" title="Deleter in shared_ptr"></a>Deleter in <code>shared_ptr</code></h2><p>An interesting point:</p><pre><code class=" mermaid">classDiagramshared_ptr o-- _Ref_countshared_ptr: - element_type* _ptr_Ref_count: - _Ty* _ptr_Ref_count: - _Destroy()_Ref_count: - _Delete_this()</code></pre><p>There are 2 pointers:</p><ul><li><code>element_type* _ptr</code>: the pointer of specified type for <code>shared_ptr&lt;T&gt;</code></li><li><code>_Ty* _ptr</code>: the pointer approximating to the real type</li></ul><p>Maybe it’s still a little confusing.</p><p>Given a base class and its derived class:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Base</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;Base&quot;</span> &lt;&lt; std::endl; &#125;<br>    ~<span class="hljs-built_in">Base</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;~Base&quot;</span> &lt;&lt; std::endl; &#125;;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span> : <span class="hljs-keyword">public</span> Base &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Derived</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;Derived&quot;</span> &lt;&lt; std::endl; &#125;<br>    ~<span class="hljs-built_in">Derived</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;~Derived&quot;</span> &lt;&lt; std::endl; &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>Note that their destructors aren’t marked as <code>virtual</code>.</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123; Base* base = <span class="hljs-keyword">new</span> Derived; &#125;<br>&#123; <span class="hljs-function">std::unique_ptr&lt;Base&gt; <span class="hljs-title">base</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Derived)</span></span>; &#125;<br>&#123; <span class="hljs-function">std::shared_ptr&lt;Base&gt; <span class="hljs-title">base</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Derived)</span></span>; &#125;<br></code></pre></td></tr></table></figure><p>The first two cases will result in memory leak, but the last one will release correctly. Why?</p><p>The reason why it’s special to bind an object with <code>shared_ptr</code> is that <code>shared_ptr</code> has <code>_Ref_count</code> leveraging the real pointer and real deleter!<br>More specifically, in this case, <code>element_type*</code> in <code>shared_ptr&lt;T&gt;</code> refers to <code>Base*</code>. But <code>_Ref_count&lt;_Ty&gt;</code> is specialized as <code>_Ref_count&lt;Derived&gt;</code> thus <code>_Ty*</code> in <code>_Ref_count</code> refers to <code>Derived*</code>, and <code>_Destroy()</code> is to delete a <code>Derived</code> object.</p><p>However, the example below would still result in memory leak.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>    Base *base = <span class="hljs-keyword">new</span> Derived;<br>    <span class="hljs-function">std::shared_ptr&lt;Base&gt; <span class="hljs-title">base_ptr</span><span class="hljs-params">(base)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Because the original type of the object has lost when the <code>shared_ptr</code> is constructed.</p><h2 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a><code>weak_ptr</code></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">weak_ptr</span> : <span class="hljs-keyword">public</span> _Ptr_base&lt;_Ty&gt; &#123; <span class="hljs-comment">// class for pointer to reference counted resource</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// When a constructor is converting from weak_ptr&lt;_Ty2&gt; to weak_ptr&lt;_Ty&gt;, the below type trait intentionally asks</span><br>    <span class="hljs-comment">// whether it would be possible to static_cast from _Ty* to const _Ty2*; see N4901 [expr.static.cast]/11.</span><br><br>    <span class="hljs-comment">// Primary template, the value is used when the substitution fails.</span><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>, <span class="hljs-keyword">class</span> = <span class="hljs-type">const</span> _Ty2*&gt;<br>    <span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> _Must_avoid_expired_conversions_from = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-comment">// Template specialization, the value is used when the substitution succeeds.</span><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    <span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span><br>        _Must_avoid_expired_conversions_from&lt;_Ty2, <span class="hljs-keyword">decltype</span>(<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">const</span> _Ty2*&gt;(<span class="hljs-built_in">static_cast</span>&lt;_Ty*&gt;(<span class="hljs-literal">nullptr</span>)))&gt; =<br>            <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">weak_ptr</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123;&#125;<br><br>    <span class="hljs-built_in">weak_ptr</span>(<span class="hljs-type">const</span> weak_ptr&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">this</span>-&gt;_Weakly_construct_from(_Other); <span class="hljs-comment">// same type, no conversion</span><br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>, <span class="hljs-type">enable_if_t</span>&lt;_SP_pointer_compatible&lt;_Ty2, _Ty&gt;::value, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">weak_ptr</span>(<span class="hljs-type">const</span> shared_ptr&lt;_Ty2&gt;&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">this</span>-&gt;_Weakly_construct_from(_Other); <span class="hljs-comment">// shared_ptr keeps resource alive during conversion</span><br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>, <span class="hljs-type">enable_if_t</span>&lt;_SP_pointer_compatible&lt;_Ty2, _Ty&gt;::value, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">weak_ptr</span>(<span class="hljs-type">const</span> weak_ptr&lt;_Ty2&gt;&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> _Avoid_expired_conversions = _Must_avoid_expired_conversions_from&lt;_Ty2&gt;;<br><br>        <span class="hljs-function"><span class="hljs-keyword">if</span> <span class="hljs-title">constexpr</span> <span class="hljs-params">(_Avoid_expired_conversions)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>-&gt;_Weakly_convert_lvalue_avoiding_expired_conversions(_Other);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">this</span>-&gt;_Weakly_construct_from(_Other);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">weak_ptr</span>(weak_ptr&amp;&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">this</span>-&gt;_Move_construct_from(_STD <span class="hljs-built_in">move</span>(_Other));<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>, <span class="hljs-type">enable_if_t</span>&lt;_SP_pointer_compatible&lt;_Ty2, _Ty&gt;::value, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">weak_ptr</span>(weak_ptr&lt;_Ty2&gt;&amp;&amp; _Other) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> _Avoid_expired_conversions = _Must_avoid_expired_conversions_from&lt;_Ty2&gt;;<br><br>        <span class="hljs-function"><span class="hljs-keyword">if</span> <span class="hljs-title">constexpr</span> <span class="hljs-params">(_Avoid_expired_conversions)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>-&gt;_Weakly_convert_rvalue_avoiding_expired_conversions(_STD <span class="hljs-built_in">move</span>(_Other));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">this</span>-&gt;_Move_construct_from(_STD <span class="hljs-built_in">move</span>(_Other));<br>        &#125;<br>    &#125;<br><br>    ~<span class="hljs-built_in">weak_ptr</span>() <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">this</span>-&gt;_Decwref();<br>    &#125;<br><br>    weak_ptr&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> weak_ptr&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-built_in">weak_ptr</span>(_Right).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    weak_ptr&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> weak_ptr&lt;_Ty2&gt;&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-built_in">weak_ptr</span>(_Right).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    weak_ptr&amp; <span class="hljs-keyword">operator</span>=(weak_ptr&amp;&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-built_in">weak_ptr</span>(_STD <span class="hljs-built_in">move</span>(_Right)).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    weak_ptr&amp; <span class="hljs-keyword">operator</span>=(weak_ptr&lt;_Ty2&gt;&amp;&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-built_in">weak_ptr</span>(_STD <span class="hljs-built_in">move</span>(_Right)).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br>    weak_ptr&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> shared_ptr&lt;_Ty2&gt;&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-built_in">weak_ptr</span>(_Right).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reset</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123; <span class="hljs-comment">// release resource, convert to null weak_ptr object</span><br>        weak_ptr&#123;&#125;.<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(weak_ptr&amp; _Other)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>-&gt;_Swap(_Other);<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD <span class="hljs-type">bool</span> <span class="hljs-title">expired</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">use_count</span>() == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD shared_ptr&lt;_Ty&gt; <span class="hljs-title">lock</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123; <span class="hljs-comment">// convert to shared_ptr</span><br>        shared_ptr&lt;_Ty&gt; _Ret;<br>        (<span class="hljs-type">void</span>) _Ret._Construct_from_weak(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> _Ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>cpp</category>
      
      <category>stl</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>stl</tag>
      
      <tag>cpp11</tag>
      
      <tag>pointer</tag>
      
      <tag>smart_pointer</tag>
      
      <tag>shared_ptr</tag>
      
      <tag>enable_shared_from_this</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>What is std::unique_ptr</title>
    <link href="/2023/04/01/What-is-std-unique-ptr/"/>
    <url>/2023/04/01/What-is-std-unique-ptr/</url>
    
    <content type="html"><![CDATA[<h2 id="Smart-Pointer"><a href="#Smart-Pointer" class="headerlink" title="Smart Pointer"></a>Smart Pointer</h2><p>As we know, using raw pointer has the opportunity to reault in memory leak if we forget to delete it or delete it with a wrong way. Therefore, there are potential risks.</p><p>In traditional C++, there is <code>std::auto_ptr</code> but it will transfer the ownership of the target object after copying <code>std::auto_ptr</code>. It means that the original auto_ptr is deprecated and it couldn’t be used anymore, but we don’t have methods to avoid actually. It depends to programmers’ self-consciousness. It is also a risk.</p><h2 id="std-unique-ptr"><a href="#std-unique-ptr" class="headerlink" title="std::unique_ptr"></a>std::unique_ptr</h2><p>After C++11, <code>std::unique_ptr</code> is used widely and it’s often a best practice for controlling the life cycle of an object. It means the unique handler leveraging the ownership of the target object. The ownership can’t be copied it can only be transformed by <code>std::move</code>.</p><h3 id="The-declaration-of-std-unique-ptr"><a href="#The-declaration-of-std-unique-ptr" class="headerlink" title="The declaration of std::unique_ptr"></a>The declaration of <code>std::unique_ptr</code></h3><p>The design philosophy of <code>std::unique_ptr</code> is simple. It’s just a wrapper of a raw pointer and it controls the life cycle of the target object by RAII (especially within its destructor).</p><div class="note note-info">            <p>The implementation of <code>std::unique_ptr</code> shown in this page is from MSVC STL.</p>          </div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx</span> = default_delete&lt;_Ty&gt;&gt;<br><span class="hljs-keyword">class</span> unique_ptr;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">default_delete</span> &#123; <span class="hljs-comment">// default deleter for unique_ptr</span><br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">default_delete</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>= <span class="hljs-keyword">default</span>;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>, <span class="hljs-type">enable_if_t</span>&lt;is_convertible_v&lt;_Ty2*, _Ty*&gt;, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">default_delete</span>(<span class="hljs-type">const</span> default_delete&lt;_Ty2&gt;&amp;) <span class="hljs-keyword">noexcept</span> &#123;&#125;<br><br>    <span class="hljs-type">void</span> <span class="hljs-built_in">operator</span>()(_Ty* _Ptr) <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> <span class="hljs-comment">/* strengthened */</span> &#123; <span class="hljs-comment">// delete a pointer</span><br>        <span class="hljs-built_in">static_assert</span>(<span class="hljs-number">0</span> &lt; <span class="hljs-built_in">sizeof</span>(_Ty), <span class="hljs-string">&quot;can&#x27;t delete an incomplete type&quot;</span>);<br>        <span class="hljs-keyword">delete</span> _Ptr;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><code>default_delete</code> is a default deleter for the target type <code>_Ty</code>.</p><div class="note note-primary">            <p>There is an interesting point here:<br>The deleter is set in the template argument list instead of as a member variable of <code>unique_ptr</code>. The purpose of this kind of implementation is to save abstraction overhead as far as possible. It indicates the idea of <strong>zero overhead abstraction</strong> in C++.</p>          </div><h3 id="The-implementation-of-std-unique-ptr"><a href="#The-implementation-of-std-unique-ptr" class="headerlink" title="The implementation of std::unique_ptr"></a>The implementation of <code>std::unique_ptr</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx</span> <span class="hljs-comment">/* = default_delete&lt;_Ty&gt; */</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">unique_ptr</span> &#123; <span class="hljs-comment">// non-copyable pointer to an object</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">using</span> pointer      = <span class="hljs-keyword">typename</span> _Get_deleter_pointer_type&lt;_Ty, <span class="hljs-type">remove_reference_t</span>&lt;_Dx&gt;&gt;::type; <span class="hljs-comment">// `_Ty*` in most situations</span><br>    <span class="hljs-keyword">using</span> element_type = _Ty;<br>    <span class="hljs-keyword">using</span> deleter_type = _Dx;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx2</span> = _Dx, _Unique_ptr_enable_default_t&lt;_Dx2&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-keyword">constexpr</span> <span class="hljs-built_in">unique_ptr</span>() <span class="hljs-keyword">noexcept</span> : _Mypair(_Zero_then_variadic_args_t&#123;&#125;) &#123;&#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> _Dx2 = _Dx, _Unique_ptr_enable_default_t&lt;_Dx2&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-keyword">constexpr</span> <span class="hljs-built_in">unique_ptr</span>(<span class="hljs-type">nullptr_t</span>) <span class="hljs-keyword">noexcept</span> : _Mypair(_Zero_then_variadic_args_t&#123;&#125;) &#123;&#125;<br><br>    unique_ptr&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">nullptr_t</span>) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-built_in">reset</span>();<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// The Standard depicts these constructors that accept pointer as taking type_identity_t&lt;pointer&gt; to inhibit CTAD.</span><br>    <span class="hljs-comment">// Since pointer is an opaque type alias in our implementation, it inhibits CTAD without extra decoration.</span><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx2</span> = _Dx, _Unique_ptr_enable_default_t&lt;_Dx2&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-keyword">explicit</span> <span class="hljs-built_in">unique_ptr</span>(pointer _Ptr) <span class="hljs-keyword">noexcept</span> : _Mypair(_Zero_then_variadic_args_t&#123;&#125;, _Ptr) &#123;&#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> _Dx2 = _Dx, <span class="hljs-type">enable_if_t</span>&lt;is_constructible_v&lt;_Dx2, <span class="hljs-type">const</span> _Dx2&amp;&gt;, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">unique_ptr</span>(pointer _Ptr, <span class="hljs-type">const</span> _Dx&amp; _Dt) <span class="hljs-keyword">noexcept</span> : _Mypair(_One_then_variadic_args_t&#123;&#125;, _Dt, _Ptr) &#123;&#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> _Dx2                                                                            = _Dx,<br>        <span class="hljs-type">enable_if_t</span>&lt;conjunction_v&lt;negation&lt;is_reference&lt;_Dx2&gt;&gt;, is_constructible&lt;_Dx2, _Dx2&gt;&gt;, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">unique_ptr</span>(pointer _Ptr, _Dx&amp;&amp; _Dt) <span class="hljs-keyword">noexcept</span> : _Mypair(_One_then_variadic_args_t&#123;&#125;, _STD <span class="hljs-built_in">move</span>(_Dt), _Ptr) &#123;&#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> _Dx2                                                                                      = _Dx,<br>        <span class="hljs-type">enable_if_t</span>&lt;conjunction_v&lt;is_reference&lt;_Dx2&gt;, is_constructible&lt;_Dx2, <span class="hljs-type">remove_reference_t</span>&lt;_Dx2&gt;&gt;&gt;, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">unique_ptr</span>(pointer, <span class="hljs-type">remove_reference_t</span>&lt;_Dx&gt;&amp;&amp;) = <span class="hljs-keyword">delete</span>;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx2</span> = _Dx, <span class="hljs-type">enable_if_t</span>&lt;is_move_constructible_v&lt;_Dx2&gt;, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">unique_ptr</span>(unique_ptr&amp;&amp; _Right) <span class="hljs-keyword">noexcept</span><br>        : _Mypair(_One_then_variadic_args_t&#123;&#125;, _STD forward&lt;_Dx&gt;(_Right.<span class="hljs-built_in">get_deleter</span>()), _Right.<span class="hljs-built_in">release</span>()) &#123;&#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> _Ty2, <span class="hljs-keyword">class</span> _Dx2,<br>        <span class="hljs-type">enable_if_t</span>&lt;<br>            conjunction_v&lt;negation&lt;is_array&lt;_Ty2&gt;&gt;, is_convertible&lt;<span class="hljs-keyword">typename</span> unique_ptr&lt;_Ty2, _Dx2&gt;::pointer, pointer&gt;,<br>                <span class="hljs-type">conditional_t</span>&lt;is_reference_v&lt;_Dx&gt;, is_same&lt;_Dx2, _Dx&gt;, is_convertible&lt;_Dx2, _Dx&gt;&gt;&gt;,<br>            <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-built_in">unique_ptr</span>(unique_ptr&lt;_Ty2, _Dx2&gt;&amp;&amp; _Right) <span class="hljs-keyword">noexcept</span><br>        : _Mypair(_One_then_variadic_args_t&#123;&#125;, _STD forward&lt;_Dx2&gt;(_Right.<span class="hljs-built_in">get_deleter</span>()), _Right.<span class="hljs-built_in">release</span>()) &#123;&#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> _Ty2, <span class="hljs-keyword">class</span> _Dx2,<br>        <span class="hljs-type">enable_if_t</span>&lt;conjunction_v&lt;negation&lt;is_array&lt;_Ty2&gt;&gt;, is_assignable&lt;_Dx&amp;, _Dx2&gt;,<br>                        is_convertible&lt;<span class="hljs-keyword">typename</span> unique_ptr&lt;_Ty2, _Dx2&gt;::pointer, pointer&gt;&gt;,<br>            <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    unique_ptr&amp; <span class="hljs-keyword">operator</span>=(unique_ptr&lt;_Ty2, _Dx2&gt;&amp;&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-built_in">reset</span>(_Right.<span class="hljs-built_in">release</span>());<br>        _Mypair._Get_first() = _STD forward&lt;_Dx2&gt;(_Right._Mypair._Get_first());<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Dx2</span> = _Dx, <span class="hljs-type">enable_if_t</span>&lt;is_move_assignable_v&lt;_Dx2&gt;, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>    unique_ptr&amp; <span class="hljs-keyword">operator</span>=(unique_ptr&amp;&amp; _Right) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> != _STD <span class="hljs-built_in">addressof</span>(_Right)) &#123;<br>            <span class="hljs-built_in">reset</span>(_Right.<span class="hljs-built_in">release</span>());<br>            _Mypair._Get_first() = _STD forward&lt;_Dx&gt;(_Right._Mypair._Get_first());<br>        &#125;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(unique_ptr&amp; _Right)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        _Swap_adl(_Mypair._Myval2, _Right._Mypair._Myval2);<br>        _Swap_adl(_Mypair._Get_first(), _Right._Mypair._Get_first());<br>    &#125;<br><br>    ~<span class="hljs-built_in">unique_ptr</span>() <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">if</span> (_Mypair._Myval2) &#123;<br>            _Mypair._Get_first()(_Mypair._Myval2);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD _Dx&amp; <span class="hljs-title">get_deleter</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _Mypair._Get_first();<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD <span class="hljs-type">const</span> _Dx&amp; <span class="hljs-title">get_deleter</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _Mypair._Get_first();<br>    &#125;<br><br>    _NODISCARD <span class="hljs-type">add_lvalue_reference_t</span>&lt;_Ty&gt; <span class="hljs-keyword">operator</span>*() <span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-title">noexcept</span><span class="hljs-params">(<span class="hljs-keyword">noexcept</span>(*_STD declval&lt;pointer&gt;()))</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> *_Mypair._Myval2;<br>    &#125;<br><br>    _NODISCARD pointer <span class="hljs-keyword">operator</span>-&gt;() <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">return</span> _Mypair._Myval2;<br>    &#125;<br><br>    <span class="hljs-function">_NODISCARD pointer <span class="hljs-title">get</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _Mypair._Myval2;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">bool</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">bool</span>&gt;(_Mypair._Myval2);<br>    &#125;<br><br>    <span class="hljs-function">pointer <span class="hljs-title">release</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _STD <span class="hljs-built_in">exchange</span>(_Mypair._Myval2, <span class="hljs-literal">nullptr</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reset</span><span class="hljs-params">(pointer _Ptr = <span class="hljs-literal">nullptr</span>)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        pointer _Old = _STD <span class="hljs-built_in">exchange</span>(_Mypair._Myval2, _Ptr);<br>        <span class="hljs-keyword">if</span> (_Old) &#123;<br>            _Mypair._Get_first()(_Old);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">unique_ptr</span>(<span class="hljs-type">const</span> unique_ptr&amp;) = <span class="hljs-keyword">delete</span>;<br>    unique_ptr&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> unique_ptr&amp;) = <span class="hljs-keyword">delete</span>;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span>, <span class="hljs-keyword">class</span>&gt;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">unique_ptr</span>;<br><br>    _Compressed_pair&lt;_Dx, pointer&gt; _Mypair; <span class="hljs-comment">// A pair of (deleter, _Ty*)</span><br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>Ignore the implementation of <code>template &lt;class _Ty, class _Dx&gt; class unique_ptr&lt;_Ty[], _Dx&gt;</code>.</p></blockquote><h3 id="The-implementation-of-Compressed-pair"><a href="#The-implementation-of-Compressed-pair" class="headerlink" title="The implementation of _Compressed_pair"></a>The implementation of <code>_Compressed_pair</code></h3><ul><li><code>_Zero_then_variadic_args_t</code> indicates it will all used to construct <code>_Ty2</code> object with all given arguments.</li><li><code>_One_then_variadic_args_t</code> indicates that the <code>_Ty1</code> object is constructed with the first argument and the <code>_Ty2</code> object is constructed with the rest arguments.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>, <span class="hljs-type">bool</span> = is_empty_v&lt;_Ty1&gt; &amp;&amp; !is_final_v&lt;_Ty1&gt;&gt;<br><span class="hljs-keyword">class</span> _Compressed_pair <span class="hljs-keyword">final</span> : <span class="hljs-keyword">private</span> _Ty1 &#123; <span class="hljs-comment">// store a pair of values, deriving from empty first</span><br><span class="hljs-keyword">public</span>:<br>    _Ty2 _Myval2;<br><br>    <span class="hljs-keyword">using</span> _Mybase = _Ty1; <span class="hljs-comment">// for visualization</span><br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span>... _Other2&gt;<br>    <span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">explicit</span> _Compressed_pair(_Zero_then_variadic_args_t, _Other2&amp;&amp;... _Val2) <span class="hljs-built_in">noexcept</span>(<br>        conjunction_v&lt;is_nothrow_default_constructible&lt;_Ty1&gt;, is_nothrow_constructible&lt;_Ty2, _Other2...&gt;&gt;)<br>        : _Ty1(), _Myval2(_STD forward&lt;_Other2&gt;(_Val2)...) &#123;&#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Other1</span>, <span class="hljs-keyword">class</span>... _Other2&gt;<br>    <span class="hljs-keyword">constexpr</span> _Compressed_pair(_One_then_variadic_args_t, _Other1&amp;&amp; _Val1, _Other2&amp;&amp;... _Val2) <span class="hljs-built_in">noexcept</span>(<br>        conjunction_v&lt;is_nothrow_constructible&lt;_Ty1, _Other1&gt;, is_nothrow_constructible&lt;_Ty2, _Other2...&gt;&gt;)<br>        : _Ty1(_STD forward&lt;_Other1&gt;(_Val1)), _Myval2(_STD forward&lt;_Other2&gt;(_Val2)...) &#123;&#125;<br><br>    <span class="hljs-keyword">constexpr</span> _Ty1&amp; _Get_first() <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">constexpr</span> <span class="hljs-type">const</span> _Ty1&amp; _Get_first() <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty2</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">_Compressed_pair</span>&lt;_Ty1, _Ty2, <span class="hljs-literal">false</span>&gt; <span class="hljs-keyword">final</span> &#123; <span class="hljs-comment">// store a pair of values, not deriving from first</span><br><span class="hljs-keyword">public</span>:<br>    _Ty1 _Myval1;<br>    _Ty2 _Myval2;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span>... _Other2&gt;<br>    <span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">explicit</span> _Compressed_pair(_Zero_then_variadic_args_t, _Other2&amp;&amp;... _Val2) <span class="hljs-built_in">noexcept</span>(<br>        conjunction_v&lt;is_nothrow_default_constructible&lt;_Ty1&gt;, is_nothrow_constructible&lt;_Ty2, _Other2...&gt;&gt;)<br>        : _Myval1(), _Myval2(_STD forward&lt;_Other2&gt;(_Val2)...) &#123;&#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Other1</span>, <span class="hljs-keyword">class</span>... _Other2&gt;<br>    <span class="hljs-keyword">constexpr</span> _Compressed_pair(_One_then_variadic_args_t, _Other1&amp;&amp; _Val1, _Other2&amp;&amp;... _Val2) <span class="hljs-built_in">noexcept</span>(<br>        conjunction_v&lt;is_nothrow_constructible&lt;_Ty1, _Other1&gt;, is_nothrow_constructible&lt;_Ty2, _Other2...&gt;&gt;)<br>        : _Myval1(_STD forward&lt;_Other1&gt;(_Val1)), _Myval2(_STD forward&lt;_Other2&gt;(_Val2)...) &#123;&#125;<br><br>    <span class="hljs-keyword">constexpr</span> _Ty1&amp; _Get_first() <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">return</span> _Myval1;<br>    &#125;<br><br>    <span class="hljs-keyword">constexpr</span> <span class="hljs-type">const</span> _Ty1&amp; _Get_first() <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-keyword">return</span> _Myval1;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>Note that</strong> <code>_Compressed_pair&lt;_Ty1, _Ty2, true&gt;</code> is used for empty base class optimization. It indicates we don’t have to allocate a memory space for it.</p><p>How to understand <code>template &lt;class _Ty1, class _Ty2, bool = is_empty_v&lt;_Ty1&gt; &amp;&amp; !is_final_v&lt;_Ty1&gt;&gt;</code>?</p><ul><li>If <code>is_empty_v&lt;_Ty1&gt;</code> is false, we have to allocate a memory space for <code>_Ty1</code> (deleter) in <code>_Compressed_pair&lt;_Ty1, _Ty2, false&gt;</code>.</li><li>If <code>is_final_v&lt;_Ty1&gt;</code> is true, <code>_Compressed_pair</code> cann’t inherit from <code>_Ty1</code> hence we have to allocate a memory space for it in <code>_Compressed_pair&lt;_Ty1, _Ty2, false&gt;</code>.</li></ul><h2 id="The-implementation-of-std-make-unique"><a href="#The-implementation-of-std-make-unique" class="headerlink" title="The implementation of std::make_unique"></a>The implementation of <code>std::make_unique</code></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>, <span class="hljs-keyword">class</span>... _Types, <span class="hljs-type">enable_if_t</span>&lt;!is_array_v&lt;_Ty&gt;, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>_NODISCARD unique_ptr&lt;_Ty&gt; <span class="hljs-built_in">make_unique</span>(_Types&amp;&amp;... _Args) &#123; <span class="hljs-comment">// make a unique_ptr</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">unique_ptr</span>&lt;_Ty&gt;(<span class="hljs-keyword">new</span> _Ty(_STD forward&lt;_Types&gt;(_Args)...));<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>, <span class="hljs-type">enable_if_t</span>&lt;is_array_v&lt;_Ty&gt; &amp;&amp; extent_v&lt;_Ty&gt; == <span class="hljs-number">0</span>, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br>_NODISCARD unique_ptr&lt;_Ty&gt; <span class="hljs-built_in">make_unique</span>(<span class="hljs-type">const</span> <span class="hljs-type">size_t</span> _Size) &#123; <span class="hljs-comment">// make a unique_ptr</span><br>    <span class="hljs-keyword">using</span> _Elem = <span class="hljs-type">remove_extent_t</span>&lt;_Ty&gt;;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">unique_ptr</span>&lt;_Ty&gt;(<span class="hljs-keyword">new</span> _Elem[_Size]());<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>, <span class="hljs-keyword">class</span>... _Types, <span class="hljs-type">enable_if_t</span>&lt;extent_v&lt;_Ty&gt; != <span class="hljs-number">0</span>, <span class="hljs-type">int</span>&gt; = <span class="hljs-number">0</span>&gt;<br><span class="hljs-type">void</span> <span class="hljs-built_in">make_unique</span>(_Types&amp;&amp;...) = <span class="hljs-keyword">delete</span>;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> _Ix = <span class="hljs-number">0</span>&gt;<br>_INLINE_VAR <span class="hljs-keyword">constexpr</span> <span class="hljs-type">size_t</span> extent_v = <span class="hljs-number">0</span>; <span class="hljs-comment">// determine extent of dimension _Ix of array _Ty</span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>, <span class="hljs-type">size_t</span> _Nx&gt;<br>_INLINE_VAR <span class="hljs-keyword">constexpr</span> <span class="hljs-type">size_t</span> extent_v&lt;_Ty[_Nx], <span class="hljs-number">0</span>&gt; = _Nx;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> _Ix, <span class="hljs-type">size_t</span> _Nx&gt;<br>_INLINE_VAR <span class="hljs-keyword">constexpr</span> <span class="hljs-type">size_t</span> extent_v&lt;_Ty[_Nx], _Ix&gt; = extent_v&lt;_Ty, _Ix - <span class="hljs-number">1</span>&gt;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">_Ty</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> _Ix&gt;<br>_INLINE_VAR <span class="hljs-keyword">constexpr</span> <span class="hljs-type">size_t</span> extent_v&lt;_Ty[], _Ix&gt; = extent_v&lt;_Ty, _Ix - <span class="hljs-number">1</span>&gt;;<br></code></pre></td></tr></table></figure><p>It indicates that it’s available to write below code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">auto</span> p1 = std::<span class="hljs-built_in">make_unique</span>&lt;<span class="hljs-type">int</span>&gt;();<br><span class="hljs-keyword">auto</span> p2 = std::<span class="hljs-built_in">make_unique</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">5</span>);<br><span class="hljs-keyword">auto</span> p3 = std::<span class="hljs-built_in">make_unique</span>&lt;<span class="hljs-type">int</span>[]&gt;(<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><p>But it’s not allowed that:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">auto</span> p4 = std::<span class="hljs-built_in">make_unique</span>&lt;<span class="hljs-type">int</span>[<span class="hljs-number">5</span>]&gt;();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>cpp</category>
      
      <category>stl</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>stl</tag>
      
      <tag>cpp11</tag>
      
      <tag>pointer</tag>
      
      <tag>smart_pointer</tag>
      
      <tag>unique_ptr</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Configurate Cmake</title>
    <link href="/2023/03/31/Configurate-Cmake/"/>
    <url>/2023/03/31/Configurate-Cmake/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p>A basic <code>CmakeLists.txt</code> example from <a href="https://github.com/wasPrime/WebServer">a WebServer library</a>.<br>Help to quickly start a project.</p>          </div><h2 id="Basic-file-tree"><a href="#Basic-file-tree" class="headerlink" title="Basic file tree"></a>Basic file tree</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs log">.<br>├── CMakeLists.txt<br>├── src<br>│   ├── CMakeLists.txt<br>│   ├── Implementation.cc<br>│   └── include<br>│       ├── Header1.h<br>│       └── Header2.h<br>└── test<br>    ├── CMakeLists.txt<br>    └── Test.cc<br></code></pre></td></tr></table></figure><h2 id="Cmake-lists"><a href="#Cmake-lists" class="headerlink" title="Cmake lists"></a>Cmake lists</h2><h3 id="CmakeLists-txt-in-the-root-path"><a href="#CmakeLists-txt-in-the-root-path" class="headerlink" title="CmakeLists.txt in the root path"></a><code>CmakeLists.txt</code> in the root path</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># CMake configuration file of WebServer</span><br><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.10</span>)<br><br><span class="hljs-comment"># set language std</span><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">20</span>)<br><span class="hljs-comment"># set language std and disable fallback to a previous version</span><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="hljs-keyword">ON</span>)<br><span class="hljs-comment"># Disable CXX Syntax EXTENSIONS</span><br><span class="hljs-keyword">set</span>(CMAKE_CXX_EXTENSIONS <span class="hljs-keyword">OFF</span>)<br><span class="hljs-keyword">set</span>(CMAKE_EXPORT_COMPILE_COMMANDS <span class="hljs-keyword">ON</span>)<br><br><span class="hljs-keyword">project</span>(WebServer<br>        VERSION <span class="hljs-number">0.1</span><br>        DESCRIPTION <span class="hljs-string">&quot;WebServer&quot;</span><br>        LANGUAGES CXX<br>        )<br><br><span class="hljs-comment"># People keep running CMake in the wrong folder, completely nuking their project or creating weird bugs.</span><br><span class="hljs-comment"># This checks if you&#x27;re running CMake from a folder that already has CMakeLists.txt.</span><br><span class="hljs-comment"># Importantly, this catches the common case of running it from the root directory.</span><br><span class="hljs-keyword">file</span>(TO_CMAKE_PATH <span class="hljs-string">&quot;$&#123;PROJECT_BINARY_DIR&#125;/CMakeLists.txt&quot;</span> PATH_TO_CMAKELISTS_TXT)<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">EXISTS</span> <span class="hljs-string">&quot;$&#123;PATH_TO_CMAKELISTS_TXT&#125;&quot;</span>)<br>    <span class="hljs-keyword">message</span>(FATAL_ERROR <span class="hljs-string">&quot;Run CMake from a build subdirectory! \&quot;mkdir build ; cd build ; cmake .. \&quot; \</span><br><span class="hljs-string">    Some junk files were created in this folder (CMakeCache.txt, CMakeFiles); you should delete those.&quot;</span>)<br><span class="hljs-keyword">endif</span> ()<br><br><span class="hljs-comment">######################################################################################################################</span><br><span class="hljs-comment"># COMPILER SETUP</span><br><span class="hljs-comment">######################################################################################################################</span><br><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-string">&quot;src/include&quot;</span>)<br><br><span class="hljs-keyword">set</span>(BASIC_CXXFLAGS <span class="hljs-string">&quot;-O2 -g -pipe -fPIC -Wall -Wextra -Werror -pedantic-errors -pthread&quot;</span>)<br><span class="hljs-keyword">set</span>(EXTRA_WARNINGS <span class="hljs-string">&quot;-Wnon-virtual-dtor -Wold-style-cast -Woverloaded-virtual -Wsign-promo -Wswitch-default -Wfloat-equal -Wshadow -Wcast-qual -Wextra-semi -Wno-unused-parameter -Wno-attributes&quot;</span>)<br><br><span class="hljs-comment"># Compiler flags.</span><br><span class="hljs-keyword">set</span>(CMAKE_CXX_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; $&#123;BASIC_CXXFLAGS&#125; $&#123;EXTRA_WARNINGS&#125;&quot;</span>)<br><span class="hljs-comment"># cmake -DCMAKE_BUILD_TYPE=DEBUG ..</span><br><span class="hljs-comment"># set(CMAKE_CXX_FLAGS_DEBUG &quot;$&#123;CMAKE_CXX_FLAGS_DEBUG&#125; -O0 -g -fno-omit-frame-pointer -fno-optimize-sibling-calls&quot;)</span><br><span class="hljs-keyword">set</span>(CMAKE_EXE_LINKER_FLAGS  <span class="hljs-string">&quot;$&#123;CMAKE_EXE_LINKER_FLAGS&#125; -fPIC&quot;</span>)<br><span class="hljs-keyword">set</span>(CMAKE_SHARED_LINKER_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_SHARED_LINKER_FLAGS&#125; -fPIC&quot;</span>)<br><span class="hljs-keyword">set</span>(CMAKE_STATIC_LINKER_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_STATIC_LINKER_FLAGS&#125; -fPIC&quot;</span>)<br><br><span class="hljs-keyword">set</span>(GCC_COVERAGE_LINK_FLAGS <span class="hljs-string">&quot;-fPIC&quot;</span>)<br><span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;CMAKE_CXX_FLAGS: $&#123;CMAKE_CXX_FLAGS&#125;&quot;</span>)<br><span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;CMAKE_CXX_FLAGS_DEBUG: $&#123;CMAKE_CXX_FLAGS_DEBUG&#125;&quot;</span>)<br><span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;CMAKE_EXE_LINKER_FLAGS: $&#123;CMAKE_EXE_LINKER_FLAGS&#125;&quot;</span>)<br><span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;CMAKE_SHARED_LINKER_FLAGS: $&#123;CMAKE_SHARED_LINKER_FLAGS&#125;&quot;</span>)<br><br><span class="hljs-keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY <span class="hljs-variable">$&#123;CMAKE_BINARY_DIR&#125;</span>/bin)<br><span class="hljs-keyword">set</span>(CMAKE_ARCHIVE_OUTPUT_DIRECTORY <span class="hljs-variable">$&#123;CMAKE_BINARY_DIR&#125;</span>/lib)<br><span class="hljs-keyword">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY <span class="hljs-variable">$&#123;CMAKE_BINARY_DIR&#125;</span>/lib)<br><br><span class="hljs-keyword">add_subdirectory</span>(src)<br><span class="hljs-keyword">add_subdirectory</span>(<span class="hljs-keyword">test</span>)<br><br><span class="hljs-comment">######################################################################################################################</span><br><span class="hljs-comment"># COMPILER END</span><br><span class="hljs-comment">######################################################################################################################</span><br></code></pre></td></tr></table></figure><h3 id="CmakeLists-txt-in-folder-src"><a href="#CmakeLists-txt-in-folder-src" class="headerlink" title="CmakeLists.txt in folder src"></a><code>CmakeLists.txt</code> in folder src</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">file</span>(GLOB resources *.cc)<br><span class="hljs-keyword">set</span>(server_shared_name server_shared)<br><span class="hljs-keyword">add_library</span>(<span class="hljs-variable">$&#123;server_shared_name&#125;</span> SHARED <span class="hljs-variable">$&#123;resources&#125;</span>)<br></code></pre></td></tr></table></figure><h3 id="CmakeLists-txt-in-folder-test"><a href="#CmakeLists-txt-in-folder-test" class="headerlink" title="CmakeLists.txt in folder test"></a><code>CmakeLists.txt</code> in folder test</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">file</span>(GLOB test_resources *.cc)<br><br><span class="hljs-keyword">foreach</span>(test_source <span class="hljs-variable">$&#123;test_resources&#125;</span>)<br>    <span class="hljs-comment"># Create binary names from filenames</span><br>    <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;test file path $&#123;test_source&#125;&quot;</span>)<br><br>    <span class="hljs-keyword">get_filename_component</span>(test_filename <span class="hljs-variable">$&#123;test_source&#125;</span> NAME)<br>    <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;test filename $&#123;test_filename&#125;&quot;</span>)<br><br>    <span class="hljs-keyword">string</span>(REPLACE <span class="hljs-string">&quot;.cc&quot;</span> <span class="hljs-string">&quot;&quot;</span> test_name <span class="hljs-variable">$&#123;test_filename&#125;</span>)<br>    <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;test name $&#123;test_name&#125;&quot;</span>)<br>    <br>    <span class="hljs-keyword">add_executable</span>(<span class="hljs-variable">$&#123;test_name&#125;</span> <span class="hljs-variable">$&#123;test_source&#125;</span>)<br>    <span class="hljs-keyword">target_link_libraries</span>(<span class="hljs-variable">$&#123;test_name&#125;</span> server_shared pthread)<br><span class="hljs-keyword">endforeach</span>(test_source <span class="hljs-variable">$&#123;test_resources&#125;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>configuration</category>
      
      <category>cmake</category>
      
    </categories>
    
    
    <tags>
      
      <tag>configuration</tag>
      
      <tag>cmake</tag>
      
      <tag>make</tag>
      
      <tag>cmakelists</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>What is pointer</title>
    <link href="/2023/03/30/What-is-pointer/"/>
    <url>/2023/03/30/What-is-pointer/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>A tutorial for C language beginners.</p>          </div><h2 id="Pointer-is-an-address"><a href="#Pointer-is-an-address" class="headerlink" title="Pointer is an address"></a>Pointer is an address</h2><p>As we all know, a variable or object always has a memory address, either on stack or on heap.</p><p>For example, we suppoese to write a demo1 program like this:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// demo1</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;value: %d, address: %p\n&quot;</span>, i, &amp;i);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>The result on my machine is:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs log">value: 1, address: 0x16fbe348c<br></code></pre></td></tr></table></figure><h3 id="Analysis-of-demo1"><a href="#Analysis-of-demo1" class="headerlink" title="Analysis of demo1"></a>Analysis of demo1</h3><p>The <code>&amp;i</code> is used to get the address of <code>i</code>, and <code>%p</code> is formatted in hexadecimal form.</p><p>So <code>0x16fbe348c</code> is the address of <code>i</code> on my machine in this execution, and it’s probably not going to be this address when I do another execution or when you do an execution. It doesn’t matter, as long as there is an output. :)</p><p>Then there is a relationship between a value and its address:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">        +-----------+<br>value   |   i = 1   |<br>        +-----------+<br>address  0x16fbe348c<br></code></pre></td></tr></table></figure><p>On the other hand, if we have a memory address, it’s easy to read and write the value on this address, as if we can accurately find the target building according to a particular street address.</p><p>Now we can bring in the concept of pointer.</p><p>We may frequently encounter something like <code>int* i_ptr = &amp;i</code>. That’s the pointer. However, we currently have at lease two questions to explain:</p><ol><li>How to understand it in our mind?</li><li>How does pointer relate to the example above？</li></ol><p>In order to clearly answer them, let’s take a look at another example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// demo2</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;value: %d, address: %p\n&quot;</span>, i, &amp;i);<br>    <span class="hljs-type">int</span>* i_ptr = &amp;i;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;value: %p, address: %p\n&quot;</span>, i_ptr, &amp;i_ptr);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>The result on my machine is:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">value: 1, address: 0x16db8f48c<br>value: 0x16db8f48c, address: 0x16db8f480<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p><strong>Tips:</strong></p><ol><li>At this time I did another run, the address of <code>i</code> is <code>0x16db8f48c</code> which is different with that as <code>0x16fbe348c</code> in demo1. It’s normal and I won’t repeat it later.</li><li>The purpose of using <code>%p</code> to output the value of <code>i_ptr</code> is to output the content in hexadecimal. It’s convenient to compare the address of <code>i</code> and the value of <code>i_ptr</code>.</li></ol>          </div><h3 id="Analysis-of-demo2"><a href="#Analysis-of-demo2" class="headerlink" title="Analysis of demo2"></a>Analysis of demo2</h3><p>It’s easy to find that the address of <code>i</code> and the value of <code>i_ptr</code> are the same, <code>0x16db8f48c</code>.</p><p>Based on current information, we can imagine a relationship like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">        +-----------+       +-------------------------+<br>value   |   i = 1   |   ----|   i_ptr = 0x16db8f48c   |<br>        +-----------+   |   +-------------------------+<br>address  0x16db8f48c  &lt;--           0x16db8f480<br></code></pre></td></tr></table></figure><p>What we have just mentioned above is that, if we have a memory address, we can easily access the value on this address. In that way, since the value of <code>i_ptr</code> is actually the address of <code>i</code>, we can access <code>i</code> by <code>*i_ptr</code>. In other words, is’s exactly equivalent between <code>*i_ptr = 2;</code> and <code>i = 2;</code>!</p><p>Now we are able to establish a connection between address and pointer.</p><h2 id="Pointer-is-also-a-value"><a href="#Pointer-is-also-a-value" class="headerlink" title="Pointer is also a value"></a>Pointer is also a value</h2><p>Have you found that a variable is essentially a value on a address either a normal integer <code>i</code> or a pointer <code>i_ptr</code>?</p><p>Every line of C language code would be compiled and transformed to assembly. Actually, there is no concept of data type in memory from assembly’s perspective. Only values one by one in memory space. That’s it.</p><p>We can say <code>int</code> is a value, <code>float</code> is a value, as well as that <code>int*</code> even <code>int**</code> is also a value. Anyway, it’s only a value on a address no matter how the data type changes.</p><p>Wait! Wait a moment! What is <code>int**</code> just mentioned?</p><p>Let’s see a new example before we explain that. It’s an example we may encount when learning the usage of functions in C language.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// demo3</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(<span class="hljs-type">int</span> i_in_change)</span> &#123; i_in_change = <span class="hljs-number">2</span>; &#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;before change, i=%d\n&quot;</span>, i);<br>    change(i);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;after change, i=%d\n&quot;</span>, i);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>The result is:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">before change, i=1<br>after change, i=1<br></code></pre></td></tr></table></figure><p>We would like to change the value of <code>i</code> within the function <code>change</code>, but unfortunately <code>i</code> weren’t changed…</p><p>The textbook would teach you to change it to something like demo4:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// demo4</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(<span class="hljs-type">int</span>* i_ptr)</span> &#123; *i_ptr = <span class="hljs-number">2</span>; &#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;before change, i=%d\n&quot;</span>, i);<br>    change(&amp;i);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;after change, i=%d\n&quot;</span>, i);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>The result would be as expected:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">before change, i=1<br>after change, i=2<br></code></pre></td></tr></table></figure><p>Could you find the exact reason?</p><p>Let’s take a quiz and see what demo5 outputs:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// demo5</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">(<span class="hljs-type">int</span>* i_ptr_in_func)</span> &#123; i_ptr_in_func = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)); &#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> &#123;<br>    <span class="hljs-type">int</span>* i_ptr = <span class="hljs-literal">NULL</span>;<br>    func(i_ptr);<br>    *i_ptr = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*i_ptr=%d\n&quot;</span>, *i_ptr);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>There is a memory leak in demo5. It’s just for demonstration reference.</p>          </div><div class="note note-info">            <p><strong>A little hint:</strong><br>Look back the memory model about value and address we learned just now.</p>          </div><p>The actual result is that a <code>segmentation fault</code> occured. If you could have foreseen this, you certainly had understood it and you wouldn’t have to read on. :)</p><h3 id="Analysis-of-demo3"><a href="#Analysis-of-demo3" class="headerlink" title="Analysis of demo3"></a>Analysis of demo3</h3><p>Firstly, let’s analyze demo3.</p><p>In memory, the <code>i</code> in <code>main</code> like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">        +-----------+<br>value   |   i = 1   |<br>        +-----------+<br>address       a<br></code></pre></td></tr></table></figure><p>When entering the function <code>change</code>, a copy of <code>i</code> is actually copied out as <code>i_in_change</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">        +---------------------+<br>value   |   i_in_change = 1   |<br>        +---------------------+<br>address            b<br></code></pre></td></tr></table></figure><p>Note that the address of <code>i_in_change</code> is <code>b</code> here and the address of <code>i</code> is <code>a</code>. It means they are different variable indeed. After we changed <code>i</code> by <code>i = 2;</code>, it became like:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">        +---------------------+<br>value   |   i_in_change = 2   |<br>        +---------------------+<br>address            b<br></code></pre></td></tr></table></figure><p>But the <code>i</code> in <code>main</code> hasn’t changed at all, so the effect of modifying <code>i</code> in <code>main</code> hasn’t been achieved.</p><h3 id="Analysis-of-demo4"><a href="#Analysis-of-demo4" class="headerlink" title="Analysis of demo4"></a>Analysis of demo4</h3><p>Let’s look at demo4 again.<br>At the beginning, it’s consistent with demo3. The memory space of i in main is as follows:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">        +-----------+<br>value   |   i = 1   |<br>        +-----------+<br>address       a<br></code></pre></td></tr></table></figure><p>When entering the function, <code>i_ptr</code> is as follows:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">        +---------------+        +-----------+<br>value   |   i_ptr = a   |----    |   i = 1   |<br>        +---------------+   |    +-----------+<br>address         b           ---------&gt; a<br></code></pre></td></tr></table></figure><p>Note that the value of <code>i_ptr</code> (<code>a</code>) is the address of <code>i</code>.</p><p>After <code>*i = 2;</code>, <code>i_ptr</code> didn’t change but <code>i</code> was modified:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">        +---------------+        +-----------+<br>value   |   i_ptr = a   |----    |   i = 2   |<br>        +---------------+   |    +-----------+<br>address         b           ---------&gt; a<br></code></pre></td></tr></table></figure><p>We modified <code>i</code> in <code>main</code> successfully by indirect access of the pointer!</p><h3 id="Analysis-of-demo5"><a href="#Analysis-of-demo5" class="headerlink" title="Analysis of demo5"></a>Analysis of demo5</h3><p>Then look at demo5.</p><p><code>i</code> in <code>main</code> is as follows:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">        +----------------------+<br>value   |  i_ptr = NULL (0x0)  |<br>        +----------------------+<br>address             a<br></code></pre></td></tr></table></figure><p><code>i_ptr_in_func</code> is a copy of <code>i_ptr</code> after entering the function <code>func</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">        +------------------------------+<br>value   |  i_ptr_in_func = NULL (0x0)  |<br>        +------------------------------+<br>address                 b<br></code></pre></td></tr></table></figure><p>After <code>i_ptr_in_func = (int*)malloc(sizeof(int));</code>, it became as follows:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">        +-----------------------+       +------------+<br>value   |   i_ptr_in_func = c   |----   |   buffer   |<br>        +-----------------------+   |   +------------+<br>address             b               --------&gt;  c (malloc_address)<br></code></pre></td></tr></table></figure><p><code>i_ptr_in_func</code> changed but <code>i_ptr</code> kept remains. Therefore, for <code>i_ptr</code> it’s equal to the code as follows:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span>* i_ptr = <span class="hljs-literal">NULL</span>;<br>*i_ptr = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>Obviously it’s unavailable.<br>We can find that after passed into a function, the pointer can only modify the value of the pointed object, and it does not make much sense to modify its own value.<br>What if we just want to allocate space for <code>int* i</code> in <code>main</code> in the function <code>func</code>? Check out demo6 below:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// demo6</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">(<span class="hljs-type">int</span>** i_ptr_ptr)</span> &#123; *i_ptr_ptr = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)); &#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> &#123;<br>    <span class="hljs-type">int</span>* i_ptr = <span class="hljs-literal">NULL</span>;<br>    func(&amp;i_ptr);<br>    *i_ptr = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*i_ptr=%d\n&quot;</span>, *i_ptr);<br>    <span class="hljs-built_in">free</span>(i_ptr);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>By analyzing the memory structure from demo1 to demo5, hope you can figure out why demo6 works properly. :)</p><h3 id="Analysis-of-demo6"><a href="#Analysis-of-demo6" class="headerlink" title="Analysis of demo6"></a>Analysis of demo6</h3><div class="note note-info">            <p><strong>Tips:</strong><br>Its transformation in memory model is almost entirely indentical to demo4.</p>          </div><h2 id="Pointer-and-Array"><a href="#Pointer-and-Array" class="headerlink" title="Pointer and Array"></a>Pointer and Array</h2><p>We all know an array is a contiguous amount of memory space. For example, <code>int arr[3];</code> is like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs log">        +---------+---------+---------+<br>value   |   int   |   int   |   int   |<br>        +---------+---------+---------+<br>address     arr      arr+1     arr+2<br></code></pre></td></tr></table></figure><p><code>arr</code> is actually an address. Based on it, we’ll quickly think of associating pointers with arrays in this way <code>int* p = arr;</code>. Further on, we can use this pointer <code>p</code> to read or modify a particular value of the array by <code>p[0]</code> <code>p[1]</code> <code>p[2]</code>. If <code>x</code> is an index, <code>p[x]</code> means the value offseting some units from the basic address. It’s equivalent to <code>*(p + x)</code> even <code>*((int*)((char*)p + x * sizeof(int)))</code>. That’s it. An arithmetic offset. No magic.</p><div class="note note-warning">            <p>Since <code>p[x]</code> is just the value based on the address accumulated by <code>p</code> and <code>x</code>, <code>x[p]</code> is also available. It’s supported by most compilers, but it’s a heresy, not a best practice. It’s best to know this, but it’s best not to use it. :)</p>          </div>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>c</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pointer</tag>
      
      <tag>c</tag>
      
      <tag>basic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Introduction to C++20 Concepts</title>
    <link href="/2023/03/29/Introduction-to-C-20-Concepts/"/>
    <url>/2023/03/29/Introduction-to-C-20-Concepts/</url>
    
    <content type="html"><![CDATA[<h2 id="Why-we-need-Concepts"><a href="#Why-we-need-Concepts" class="headerlink" title="Why we need Concepts?"></a>Why we need <code>Concepts</code>?</h2><p>If we declare multiple classes:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;...&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span> : <span class="hljs-keyword">public</span> Base &#123;...&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NotDerived</span> &#123;...&#125;;<br></code></pre></td></tr></table></figure><p>I ever met a situation where I would like to deserialize a string expression into an object which must be inherited from <code>Base</code>.</p><p>The original declaration of the parser:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">parse</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; input, std::shared_ptr&lt;T&gt;&amp; output)</span> </span>&#123;...&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">usage</span><span class="hljs-params">()</span> </span>&#123;<br>    std::shared_ptr&lt;Derived&gt; ptr;<br>    <span class="hljs-built_in">assert</span>(<span class="hljs-built_in">parse</span>(<span class="hljs-string">&quot;mock_string&quot;</span>, ptr) == <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>But how can we create an explicit constraint that <code>T</code> inherits from <code>Base</code>?</p><div class="note note-info">            <p>Of course, it’s sufficient to use native pointers.<br>Let’s assume we have to use smart pointers. :)</p>          </div><h2 id="Constraints-are-neccessary-actually"><a href="#Constraints-are-neccessary-actually" class="headerlink" title="Constraints are neccessary actually"></a>Constraints are neccessary actually</h2><p>For readability and debugging, it is necessary to express constaints explicitly.</p><p>Here is a kind of implmentation in C++11:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">typename</span> std::enable_if&lt;std::is_base_of&lt;Base, T&gt;::value, <span class="hljs-type">int</span>&gt;::<span class="hljs-function">type</span><br><span class="hljs-function">  <span class="hljs-title">parse</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; input, std::shared_ptr&lt;T&gt;&amp; output)</span> </span>&#123;...&#125;<br></code></pre></td></tr></table></figure><p>But it’s invasive! We had modified the appearance of the return type <code>int</code>.</p><h3 id="Rewrite-it"><a href="#Rewrite-it" class="headerlink" title="Rewrite it"></a>Rewrite it</h3><p>We can rewrite it in another form:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// `std::enable_if&lt;bool&gt;` is equivalent to `std::enable_if&lt;bool, void&gt;`</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> = <span class="hljs-keyword">typename</span> std::enable_if&lt;std::is_base_of&lt;Base, T&gt;::value&gt;::type&gt;<br><span class="hljs-type">int</span> <span class="hljs-built_in">parse</span>(<span class="hljs-type">const</span> std::string&amp; input, std::shared_ptr&lt;T&gt;&amp; output) &#123;...&#125;<br></code></pre></td></tr></table></figure><p>As our common feeling, it’s still ugly. :(</p><h3 id="Rewrite-it-again"><a href="#Rewrite-it-again" class="headerlink" title="Rewrite it again"></a>Rewrite it again</h3><div class="note note-info">            <p><strong>For type traits:</strong><br>After C++14 <code>xxx_t&lt;T&gt;</code> is available and it’s equivalent to <code>xxx&lt;T&gt;::type</code> (even <code>typename xxx&lt;T&gt;::type</code>)<br>After C++17 <code>xxx_v&lt;T&gt;</code> is available and it’s equivalent to <code>xxx&lt;T&gt;::value</code></p>          </div><p>The previous code can be rewrited as below:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> = std::<span class="hljs-type">enable_if_t</span>&lt;std::is_base_of_v&lt;Base, T&gt;&gt;&gt;<br><span class="hljs-type">int</span> <span class="hljs-built_in">parse</span>(<span class="hljs-type">const</span> std::string&amp; input, std::shared_ptr&lt;T&gt;&amp; output) &#123;...&#125;<br></code></pre></td></tr></table></figure><p>It’s still a little hard to read and understand, especially since the second argument looks strange in the template argument list. We clearly need a constraint but why we need to bring in a weird thing like <code>typename = ...</code>?</p><p>Besides, template hell is horrible when displaying compiling error messages. It particularly affects the efficency to debug.</p><h3 id="Concepts-is-coming"><a href="#Concepts-is-coming" class="headerlink" title="Concepts is coming"></a><code>Concepts</code> is coming</h3><p>At the end of this page, this example rewritten by <code>concepts</code> will be shown.</p><h2 id="The-simplest-concepts"><a href="#The-simplest-concepts" class="headerlink" title="The simplest concepts"></a>The simplest concepts</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> Any = <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> None = <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><p>It’s easy to understand that concepts are essentially compile-time constant booleans.</p><h2 id="Unite-concepts-and-constexpr-bool"><a href="#Unite-concepts-and-constexpr-bool" class="headerlink" title="Unite concepts and constexpr bool"></a>Unite concepts and constexpr bool</h2><p>Here provides a way to reuse constexpr bool so that we may have impression that concepts can be united with constexpr bool.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> is_any_v = <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> Any = is_any_v&lt;T&gt;;<br></code></pre></td></tr></table></figure><h2 id="Requirements-on-operations"><a href="#Requirements-on-operations" class="headerlink" title="Requirements on operations"></a>Requirements on operations</h2><p>Assume we had declared a concept named whose declaration like below:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> Addable = <span class="hljs-built_in">requires</span>(T x, T y) &#123; x + y; &#125;;<br></code></pre></td></tr></table></figure><p>The concept has at least these 3 ways to use:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">requires</span> Addable&lt;T&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add1</span><span class="hljs-params">(T x, T y)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;Addable T&gt; <span class="hljs-comment">// Equivalent to template &lt;Addable&lt;&gt; T&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add2</span><span class="hljs-params">(T x, T y)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add3</span><span class="hljs-params">(Addable <span class="hljs-keyword">auto</span> x, Addable <span class="hljs-keyword">auto</span> y)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Constraints-on-member-functions"><a href="#Constraints-on-member-functions" class="headerlink" title="Constraints on member functions"></a>Constraints on member functions</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PowerThing</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">power</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; &#125;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> HasPower = <span class="hljs-built_in">requires</span>(T t) &#123;<br>                     <span class="hljs-comment">// std::same_as&lt;decltype(t.power()), int&gt;;</span><br>                     &#123; t.<span class="hljs-built_in">power</span>() &#125; -&gt; std::same_as&lt;<span class="hljs-type">int</span>&gt;;<br>                   &#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">usage</span><span class="hljs-params">()</span> </span>&#123;<br>  HasPower <span class="hljs-keyword">auto</span> something_has_power = <span class="hljs-built_in">PowerThing</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>In this case, I would like to show two places to notice:</p><ol><li>The uncommented line is exactly equivalent to the commented out line although their forms have something different. The uncommented forms is a <strong>syntactic sugar</strong>. It means the return type of <code>t.power()</code> is filled in the first parameter position of <code>std::same_as</code>, and the type <code>int</code> is actually the second parameter.</li><li>To decorate <code>auto</code>, or more precise saying is to constrain it, we can use a concept before <code>auto</code>. It’s a new usage.</li></ol><h2 id="Constraints-on-member-variables"><a href="#Constraints-on-member-variables" class="headerlink" title="Constraints on member variables"></a>Constraints on member variables</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PowerThing</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-type">int</span> power;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> HasPower = <span class="hljs-built_in">requires</span>(T t) &#123;<br>    <span class="hljs-comment">// Bad case:</span><br>    <span class="hljs-comment">// &#123; t.power &#125; -&gt; std::same_as&lt;int&gt;;</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Compiler complains:</span><br>    <span class="hljs-comment">// Deduced type &#x27;PowerThing&#x27; does not satisfy &#x27;HasPower&#x27;</span><br>    <span class="hljs-comment">// Because type constraint &#x27;std::same_as&lt;int &amp;, int&gt;&#x27; was not satisfied</span><br><br>    <span class="hljs-comment">// Good case:</span><br>    <span class="hljs-keyword">requires</span> std::same_as&lt;<span class="hljs-keyword">decltype</span>(t.power), <span class="hljs-type">int</span>&gt;; <span class="hljs-comment">// `requires` can be omitted</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">usage</span><span class="hljs-params">()</span> </span>&#123;<br>  HasPower <span class="hljs-keyword">auto</span> something_has_power = <span class="hljs-built_in">PowerThing</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>Here we need to notice that <code>t.power</code> is actually a lvalue so the use of <code>std::same_as</code> should be done carefully.</p><h2 id="Multiple-typenames"><a href="#Multiple-typenames" class="headerlink" title="Multiple typenames"></a>Multiple typenames</h2><p>I’ve introduced how to write a concept that indicates a single type is addable. How do we want to write a concept that indicates multiple types are addable?</p><p>It’s not really hard and we can quickly make it:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> Y&gt;<br><span class="hljs-keyword">concept</span> Addable = <span class="hljs-built_in">requires</span>(T t, Y y) &#123; t + y; &#125;;<br></code></pre></td></tr></table></figure><p>And we can also summarize its usage with 3 forms corresponding to the single type concept.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> Y&gt;<br>  <span class="hljs-function"><span class="hljs-keyword">requires</span> Addable&lt;T, Y&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add1</span><span class="hljs-params">(T t, Y y)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> t + y;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Y, Addable&lt;Y&gt; T&gt;<br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add2</span><span class="hljs-params">(T t, Y y)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> t + y;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add3</span><span class="hljs-params">(<span class="hljs-keyword">auto</span> y, Addable&lt;<span class="hljs-keyword">decltype</span>(y)&gt; <span class="hljs-keyword">auto</span> t)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> t + y;<br>&#125;<br></code></pre></td></tr></table></figure><p>The second and the third look weird. They are similar to the syntactic sugar just mentioned. <code>T</code> is the first parameter and <code>Y</code> is the second. In order to declare <code>T</code> (or <code>auto t</code>), we have to swap they positions and declare <code>Y</code> (or <code>auto y</code>) in advance. It likes a trick and there may be some difficulty to understand. Therefore, we have to  take some tradeoffs between readability and writability.</p><h2 id="Constraints-on-return-values"><a href="#Constraints-on-return-values" class="headerlink" title="Constraints on return values"></a>Constraints on return values</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">Addable <span class="hljs-keyword">auto</span> <span class="hljs-title">add</span><span class="hljs-params">(Addable <span class="hljs-keyword">auto</span> x, Addable <span class="hljs-keyword">auto</span> y)</span> </span>&#123; <span class="hljs-keyword">return</span> x + y; &#125;<br><br><span class="hljs-comment">// Bad case:</span><br><span class="hljs-keyword">auto</span> sum = <span class="hljs-built_in">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><span class="hljs-comment">// Good case:</span><br>Addable <span class="hljs-keyword">auto</span> sum = <span class="hljs-built_in">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h3 id="Best-Pratice-Prefer-concept-names-over-auto-for-local-variables-1"><a href="#Best-Pratice-Prefer-concept-names-over-auto-for-local-variables-1" class="headerlink" title="Best Pratice: Prefer concept names over auto for local variables[1]"></a>Best Pratice: Prefer concept names over <code>auto</code> for local variables<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[ISOCPP C++ Core Guidelines T.12](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#t12-prefer-concept-names-over-auto-for-local-variables)">[1]</span></a></sup></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> Sequence = <span class="hljs-built_in">requires</span>(T t) &#123;<br>                     t.<span class="hljs-built_in">begin</span>()++;<br>                     t.<span class="hljs-built_in">begin</span>() != t.<span class="hljs-built_in">end</span>();<br>                     &#123; *t.<span class="hljs-built_in">begin</span>() &#125; -&gt; std::same_as&lt;<span class="hljs-keyword">typename</span> T::reference&gt;;<br>                   &#125;;<br><br>Sequence <span class="hljs-keyword">auto</span> container = std::vector&lt;<span class="hljs-type">int</span>&gt;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Association-static-interface-x2F-polymorphism"><a href="#Association-static-interface-x2F-polymorphism" class="headerlink" title="Association: static interface&#x2F;polymorphism"></a>Association: static interface&#x2F;polymorphism</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> Sequence = <span class="hljs-built_in">requires</span>(T t) &#123;...&#125;;<br><br><span class="hljs-keyword">enum class</span> <span class="hljs-title class_">SequenceType</span> &#123; VECTOR, LIST, OTHER &#125;;<br><br><span class="hljs-comment">// Type Factory</span><br><span class="hljs-keyword">template</span> &lt;SequenceType&gt;<br><span class="hljs-function">Sequence <span class="hljs-keyword">auto</span> <span class="hljs-title">get_sequence</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;&gt;<br>Sequence <span class="hljs-keyword">auto</span> <span class="hljs-built_in">get_sequence</span>&lt;SequenceType::VECTOR&gt;() &#123; <span class="hljs-keyword">return</span> std::vector&lt;<span class="hljs-type">int</span>&gt;&#123;&#125;; &#125;<br><br><span class="hljs-keyword">template</span> &lt;&gt;<br>Sequence <span class="hljs-keyword">auto</span> <span class="hljs-built_in">get_sequence</span>&lt;SequenceType::LIST&gt;() &#123; <span class="hljs-keyword">return</span> std::list&lt;<span class="hljs-type">int</span>&gt;&#123;&#125;; &#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">usage</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-comment">// `Sequence` can be omitted</span><br>  Sequence <span class="hljs-keyword">auto</span> sequence = <span class="hljs-built_in">get_sequence</span>&lt;SequenceType::VECTOR&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><p>It seems it implements a simple factory pattern by type enumeration values.<br>From another perspective, concept also looks like interface though it’s static context.<br>Most importantly, it’s readable compared with a single <code>auto</code>.</p><h2 id="Anonymous-Concept"><a href="#Anonymous-Concept" class="headerlink" title="Anonymous Concept"></a>Anonymous Concept</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Container&gt;<br>  <span class="hljs-keyword">requires</span><br>    <span class="hljs-comment">/* Anonymous concept begin */</span><br>    <span class="hljs-built_in">requires</span>(Container container) &#123;<br>      &#123; container.<span class="hljs-built_in">size</span>() &#125; -&gt; std::same_as&lt;std::<span class="hljs-type">size_t</span>&gt;;<br>    &#125;<br>    <span class="hljs-comment">/* Anonymous concept end */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_container_size</span><span class="hljs-params">(Container container)</span> </span>&#123;<br>  std::cout &lt;&lt; container.<span class="hljs-built_in">size</span>() &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>The <code>requires</code> written twice isn’t a typo. It means it’s a anonymous concept used just here.</p><h2 id="Merge-multiple-statements-as-far-as-possible"><a href="#Merge-multiple-statements-as-far-as-possible" class="headerlink" title="Merge multiple statements as far as possible"></a>Merge multiple statements as far as possible</h2><div class="note note-info">            <p>I summarize it as a best practice.</p>          </div><h3 id="The-Duplicative-Form"><a href="#The-Duplicative-Form" class="headerlink" title="The Duplicative Form"></a>The Duplicative Form</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> C&gt;<br><span class="hljs-keyword">concept</span> Clonable = <span class="hljs-built_in">requires</span> (C clonable) &#123;<br>  clonable.<span class="hljs-built_in">clone</span>();<br>  <span class="hljs-keyword">requires</span> std::same_as&lt;<span class="hljs-keyword">decltype</span>(clonable.<span class="hljs-built_in">clone</span>()), C&gt;; <span class="hljs-comment">// `requires` can be omitted</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="The-Concise-Form"><a href="#The-Concise-Form" class="headerlink" title="The Concise Form"></a>The Concise Form</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> C&gt;<br><span class="hljs-keyword">concept</span> Clonable = <span class="hljs-built_in">requires</span> (C clonable) &#123;<br>  &#123; clonable.<span class="hljs-built_in">clone</span>() &#125; -&gt; std::same_as&lt;C&gt;;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Rewrite-the-previous-example-by-Concepts"><a href="#Rewrite-the-previous-example-by-Concepts" class="headerlink" title="Rewrite the previous example by Concepts"></a>Rewrite the previous example by <code>Concepts</code></h2><p>It’s time to rewrite the previous example by <code>Concepts</code>!</p><p>Let’s review the previous form:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> = std::<span class="hljs-type">enable_if_t</span>&lt;std::is_base_of_v&lt;Base, T&gt;&gt;&gt;<br><span class="hljs-type">int</span> <span class="hljs-built_in">parse</span>(<span class="hljs-type">const</span> std::string&amp; input, std::shared_ptr&lt;T&gt;&amp; output) &#123;...&#125;<br></code></pre></td></tr></table></figure><p>And rewrite it to a new form:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> Base&gt;<br><span class="hljs-keyword">concept</span> InheriteFrom = std::is_base_of_v&lt;Base, T&gt;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br>  <span class="hljs-function"><span class="hljs-keyword">requires</span> InheriteFrom&lt;T, Base&gt;</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">parse</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; input, std::shared_ptr&lt;T&gt;&amp; output)</span> </span>&#123;...&#125;<br></code></pre></td></tr></table></figure><p>As we see, the readability of the form rewritten by <code>concepts</code> is undoubtedly better than the previous form. It directly points out the concept is a constraint by keyword <code>requires</code>. It’s great.</p><section class="footnotes"><h2>References</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#t12-prefer-concept-names-over-auto-for-local-variables">ISOCPP C++ Core Guidelines T.12</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
      <category>cpp</category>
      
      <category>stl</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>cpp20</tag>
      
      <tag>stl</tag>
      
      <tag>concepts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Configurate Vim</title>
    <link href="/2023/03/28/Configurate-Vim/"/>
    <url>/2023/03/28/Configurate-Vim/</url>
    
    <content type="html"><![CDATA[<h2 id="Install-plug-vim-file"><a href="#Install-plug-vim-file" class="headerlink" title="Install plug.vim file"></a>Install <code>plug.vim</code> file</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim &gt; ~/.vim/autoload<br></code></pre></td></tr></table></figure><h2 id="Configurate-vimrc-file"><a href="#Configurate-vimrc-file" class="headerlink" title="Configurate .vimrc file"></a>Configurate <code>.vimrc</code> file</h2><div class="note note-success">            <p>Copy the below configuration to <code>~/.vimrc</code>.</p>          </div><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">call</span> plug#begin(<span class="hljs-string">&#x27;~/.vim/plugged&#x27;</span>)<br><span class="hljs-string">&quot;在这里使用 Plug &quot;</span>github用户/项目名<span class="hljs-comment">&quot; 的方式引入插件</span><br><span class="hljs-string">&quot;Import plugin by using Plug &quot;</span>github_username/project_name<span class="hljs-comment">&quot;</span><br><br><span class="hljs-comment">&quot;彩虹括号</span><br><span class="hljs-comment">&quot;Rainbow bracket</span><br>Plug <span class="hljs-string">&#x27;luochen1990/rainbow&#x27;</span><br><br><span class="hljs-comment">&quot;历史记录</span><br><span class="hljs-comment">&quot;History record</span><br><span class="hljs-comment">&quot;Plug &#x27;mhinz/vim-startify&#x27;</span><br><br><span class="hljs-comment">&quot;One Dark Theme</span><br>Plug <span class="hljs-string">&#x27;joshdick/onedark.vim&#x27;</span><br><span class="hljs-keyword">call</span> plug#end()<br><br><br><span class="hljs-comment">&quot;设置配色，这里选择的是 desert，也有其他方案，在 vim 中输入 :color 再敲 tab 键可以查看</span><br><span class="hljs-comment">&quot;Set color. Here is desert by default. Type :color in vim and press tab to view other options</span><br><span class="hljs-comment">&quot;color desert</span><br>color onedark<br><br><span class="hljs-comment">&quot;设置背景色，每种配色有两种方案，一个 light、一个 dark</span><br><span class="hljs-comment">&quot;Set background each of which has two mode, light and dark</span><br><span class="hljs-keyword">set</span> background=dark<br><br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:rainbow_active</span> = <span class="hljs-number">1</span> <span class="hljs-comment">&quot;0 if you want to enable it later via :RainbowToggle</span><br><br><span class="hljs-comment">&quot;传说中的去掉边框用下边这一句</span><br><span class="hljs-comment">&quot;Remove border</span><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">go</span>=<br><br><span class="hljs-comment">&quot;打开语法高亮</span><br><span class="hljs-comment">&quot;Turn on syntax highlighting</span><br><span class="hljs-keyword">syntax</span> <span class="hljs-keyword">on</span><br><br><span class="hljs-comment">&quot;显示行号</span><br><span class="hljs-comment">&quot;Show line number</span><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">number</span><br><br><span class="hljs-comment">&quot;设置缩进有三个取值 cindent(C 风格)、smartindent(智能模式，其实不觉得有什么智能)、autoindent(简单的与上一行保持一致)</span><br><span class="hljs-comment">&quot;Set Indent with three values: cindent/、smartindent/、autoindent</span><br><span class="hljs-keyword">set</span> <span class="hljs-built_in">cindent</span><br><br><span class="hljs-comment">&quot;用空格键替换制表符</span><br><span class="hljs-comment">&quot;Replace tabs with the space bar</span><br>:<span class="hljs-keyword">set</span> expandtab<br><br><span class="hljs-comment">&quot;制表符占 4 个空格</span><br><span class="hljs-comment">&quot;Tabs take up 4 spaces</span><br><span class="hljs-keyword">set</span> tabstop=<span class="hljs-number">4</span><br><br><span class="hljs-comment">&quot;默认缩进 4 个空格大小</span><br><span class="hljs-comment">&quot;The default indent size is 4 spaces</span><br><span class="hljs-keyword">set</span> <span class="hljs-built_in">shiftwidth</span>=<span class="hljs-number">4</span><br><br><span class="hljs-comment">&quot;增量式搜索</span><br><span class="hljs-comment">&quot;Incremental search</span><br><span class="hljs-keyword">set</span> incsearch<br><br><span class="hljs-comment">&quot;高亮搜索</span><br><span class="hljs-comment">&quot;Highlight search</span><br><span class="hljs-keyword">set</span> hlsearch<br><br><span class="hljs-comment">&quot;有时中文会显示乱码，用一下几条命令解决</span><br><span class="hljs-comment">&quot;Solve Chinese garbled code</span><br><span class="hljs-keyword">let</span> &amp;termencoding=&amp;encoding<br><span class="hljs-keyword">set</span> fileencodings=utf-<span class="hljs-number">8</span>,gbk<br><br><span class="hljs-comment">&quot;很多插件都会要求的配置检测文件类型</span><br><span class="hljs-comment">&quot;Check file type</span><br>:<span class="hljs-keyword">filetype</span> <span class="hljs-keyword">on</span><br>:<span class="hljs-keyword">filetype</span> plugin <span class="hljs-keyword">on</span><br>:<span class="hljs-keyword">filetype</span> <span class="hljs-built_in">indent</span> <span class="hljs-keyword">on</span><br><br><span class="hljs-comment">&quot;下边这个很有用可以根据不同的文件类型执行不同的命令</span><br><span class="hljs-comment">&quot;Run different commands based on different file types</span><br><span class="hljs-comment">&quot;例如：如果是 C/C++ 类型</span><br><span class="hljs-comment">&quot;For example, if for C/C++</span><br>:<span class="hljs-keyword">autocmd</span> FileType <span class="hljs-keyword">c</span>,cpp :<span class="hljs-keyword">set</span> foldmethod=<span class="hljs-keyword">syntax</span><br>:<span class="hljs-keyword">autocmd</span> FileType <span class="hljs-keyword">c</span>,cpp :<span class="hljs-keyword">set</span> <span class="hljs-keyword">number</span><br>:<span class="hljs-keyword">autocmd</span> FileType <span class="hljs-keyword">c</span>,cpp :<span class="hljs-keyword">set</span> <span class="hljs-built_in">cindent</span><br><br><span class="hljs-comment">&quot;例如：如果是 Python 类型</span><br><span class="hljs-comment">&quot;For example, if for Python</span><br>:<span class="hljs-keyword">autocmd</span> FileType <span class="hljs-keyword">python</span> :<span class="hljs-keyword">set</span> <span class="hljs-keyword">number</span><br>:<span class="hljs-keyword">autocmd</span> FileType <span class="hljs-keyword">python</span> :<span class="hljs-keyword">set</span> foldmethod=<span class="hljs-keyword">syntax</span><br>:<span class="hljs-keyword">autocmd</span> FileType <span class="hljs-keyword">python</span> :<span class="hljs-keyword">set</span> smartindent<br></code></pre></td></tr></table></figure><h2 id="Vim-Plugin-Commands"><a href="#Vim-Plugin-Commands" class="headerlink" title="Vim Plugin Commands"></a>Vim Plugin Commands</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vim">&lt;!-- Install specific plugin such <span class="hljs-keyword">as</span>  --&gt;<br>&lt;!-- :PlugInstall gist-<span class="hljs-keyword">vim</span> --&gt;<br>:PlugInstall <span class="hljs-symbol">&lt;plugin_name&gt;</span><br>&lt;!-- Install <span class="hljs-keyword">all</span> plugins specified in .vimrc --&gt;<br>:PlugInstall<br><br>&lt;!-- Remove plugin --&gt;<br>&lt;!-- Note that <span class="hljs-built_in">remove</span> <span class="hljs-built_in">or</span> comment out plugin configuration in .vimrc in advance --&gt;<br>:PlugClean <span class="hljs-symbol">&lt;plugin_name&gt;</span><br><br>&lt;!-- Udgrade <span class="hljs-keyword">vim</span>-plug itself --&gt;<br>:PlugUpgrade<br><br>&lt;!-- Update <span class="hljs-keyword">all</span> plugins --&gt;<br>:PlugUpdate<br><br>&lt;!-- Review the infomation of installed plugin --&gt;<br>:PlugStatus <span class="hljs-symbol">&lt;plugin_name&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>configuration</category>
      
      <category>vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>configuration</tag>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TODO</title>
    <link href="/2023/03/27/TODO/"/>
    <url>/2023/03/27/TODO/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p>List what category of articles would be written.</p>          </div><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><ul><li><input checked="" disabled="" type="checkbox"> <del>Deleter in <code>std::shared_ptr</code></del></li><li><input checked="" disabled="" type="checkbox"> <del>What is <code>enable_shared_from_this</code></del></li><li><input checked="" disabled="" type="checkbox"> <del>Concepts</del></li><li><input checked="" disabled="" type="checkbox"> <del>jthread</del></li><li><input checked="" disabled="" type="checkbox"> <del>RTTI</del></li><li><input disabled="" type="checkbox"> std::string_view, std::span</li><li><input checked="" disabled="" type="checkbox"> <del>promise, future, packaged_task, shared_future</del></li><li><input disabled="" type="checkbox"> Coroutines</li><li><input disabled="" type="checkbox"> Ranges</li><li><input disabled="" type="checkbox"> Modules</li><li><input disabled="" type="checkbox"> muduo</li><li><input disabled="" type="checkbox"> bthread</li><li><input disabled="" type="checkbox"> bvar</li><li><input disabled="" type="checkbox"> bRPC</li></ul><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><ul><li><input disabled="" type="checkbox"> goroutines</li><li><input disabled="" type="checkbox"> M:N scheduling models</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>todo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
