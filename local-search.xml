<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>蓝桥杯校内模拟赛复盘</title>
    <link href="/2020/03/15/%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A0%A1%E5%86%85%E6%A8%A1%E6%8B%9F%E8%B5%9B%E5%A4%8D%E7%9B%98/"/>
    <url>/2020/03/15/%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A0%A1%E5%86%85%E6%A8%A1%E6%8B%9F%E8%B5%9B%E5%A4%8D%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>2020年3月15日蓝桥杯校内模拟赛，难度较为简单。</p></blockquote><a id="more"></a><h2 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h2><p>本人报的是 <code>C/C++</code> 类型的比赛，在填空题时为了快速得出结果采用的是 <code>Python</code>。</p><h3 id="1-1200000-有多少个约数？（只计算正约数）"><a href="#1-1200000-有多少个约数？（只计算正约数）" class="headerlink" title="1. 1200000 有多少个约数？（只计算正约数）"></a>1. <code>1200000</code> 有多少个约数？（只计算正约数）</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>本题从 $[1, 1200000]$ 遍历即可，结果为 <code>96</code>。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><ul><li><p>Python</p><ul><li>法1（常规做法）</li></ul><pre><code class="lang-Python">res = 0for i in range(1, 1200001):    if 1200000 % i == 0:        res += 1print(res)</code></pre><ul><li>法2（列表生成式）</li></ul><pre><code class="lang-Python">print(sum([1200000 % i == 0 for i in range(1, 1200001)]))</code></pre></li><li><p>C++</p><pre><code class="lang-C++">#include &lt;iostream&gt;using namespace std;int main(){    int res = 0;    for (int i = 1; i &lt;= 1200000; i++)    {        if (1200000 % i == 0)        {            res++;        }    }    cout &lt;&lt; res &lt;&lt; endl;    return 0;}</code></pre></li></ul><h3 id="2-在计算机存储中，15-125GB是多少MB"><a href="#2-在计算机存储中，15-125GB是多少MB" class="headerlink" title="2. 在计算机存储中，15.125GB是多少MB"></a>2. 在计算机存储中，15.125GB是多少MB</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>根据进制换算 $1GB = 2 ^ {10} MB = 1024MB$，进行简单乘法 $15.125 * 1024 = 15488$。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre><code class="lang-C++">#include &lt;iostream&gt;using namespace std;int main(){    cout &lt;&lt; (15.125 * 1024) &lt;&lt; endl;    return 0;}</code></pre><h3 id="3-一棵包含有-2019-个结点的树，最多包含多少个叶结点"><a href="#3-一棵包含有-2019-个结点的树，最多包含多少个叶结点" class="headerlink" title="3. 一棵包含有 2019 个结点的树，最多包含多少个叶结点"></a>3. 一棵包含有 <code>2019</code> 个结点的树，最多包含多少个叶结点</h3><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>在总结点数一定时，完全二叉树中有最多的叶子结点。<br>我在做题时忘了具体的计算公式，是在纸上画图算的，思路是算出每一层的二叉树结点数：</p><div class="table-container"><table><thead><tr><th style="text-align:center">第几层</th><th style="text-align:center">结点数</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">512</td></tr></tbody></table></div><p>可看出当层数为 $n$ 时每一层的结点数为 $2 ^ {n -1}$，那么前 $n$ 层的结点总数为 $1 + 2 + 3 + … + 2 ^ {n - 1} = 2 ^ n - 1$，采取快速逼近的思想，要使结点总数最接近 <code>2019</code>，当 $n = 10$ 时结点总数为 <code>1023</code>，与 <code>2019</code> 相差 <code>996</code>，故最后一层有 <code>996</code> 个结点，占用了倒数第2层 <code>498</code> 个结点的子结点位置，使得倒数第2层减少了 <code>498</code> 个叶子结点（倒数第2层总共有 <code>512</code> 个结点）而剩下 <code>14</code> 个叶子结点。所以叶子结点总共有 最后一层 <code>996</code> + 倒数第2层 <code>14</code> = <code>1010</code> 个结点。</p><hr><p>后来看到有<a href="https://blog.csdn.net/weixin_42449444/article/details/104823371" target="_blank" rel="noopener">大佬的博客</a>提到由结点总数推出叶子结点数的公式。</p><blockquote><p>太长不看版<br>叶子结点最多的个数与结点总数的奇偶有关，奇数个则有 $\frac{n + 1}{2}$个，偶数个则有 $\frac{n}{2}$ 个。</p></blockquote><p><strong>具体分析：</strong></p><p>叶子结点就是出度为 <code>0</code> 的结点，即没有子结点的结点。</p><ol><li><p>假设 $n$ 为完全二叉树的结点总数，$n_0$ 是度为0的结点总数（即叶子结点数），$n_1$ 是度为1的结点总数，$n_2$ 是度为2的结点总数，边数为b。</p></li><li><p>由<a href="https://blog.csdn.net/TinnCHEN/article/details/84023083" target="_blank" rel="noopener">二叉树的性质</a>可知：<script type="math/tex">n = n_0 + n_1 + n_2\tag{1}</script> <script type="math/tex">b = n - 1(二叉树是最小连通图)\tag{2}</script><br>联立两式得<script type="math/tex">b = n_0 + n_1 + n_2 - 1</script><br>另有 <script type="math/tex">b = n_1 + 2n_2</script><br>则有 <script type="math/tex">n_0 + n_1 + n_2 - 1 = n_1 + 2n_2</script><br>即 <script type="math/tex">n_2 = n_0 - 1\tag{3}</script></p></li><li><p>将上述 <code>(1)</code> <code>(3)</code> 把 $n_2$ 消去可得：<script type="math/tex">n = 2n_0 + n_1 - 1</script></p></li><li><p>由于完全二叉树中度为1的结点数 $n_1$ 只有两种可能 <code>0</code> 或 <code>1</code>：<br>当 $n_1 = 0$ 时 <script type="math/tex">n_0 = \frac{n + 1}{2}\tag{4}</script><br>当 $n_1 = 1$ 时 <script type="math/tex">n_0 = \frac{n}{2}\tag{5}</script></p></li><li><p>完全二叉树中除去最后一层的结点总数有 $(2 ^ n - 1)$ 个，为奇数，根据完全二叉树的结点总数 $n = 2019$ 可以知道最后一层结点数为偶数（奇数 - 奇数 = 偶数），故度为1的结点数 $n_1 = 0$，利用公式 <code>(4)</code> 求出叶子结点数 $n_0 = \frac{n + 1}{2} = \frac{2019 + 1}{2}= 1010$。</p></li></ol><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><pre><code class="lang-C++">#include &lt;iostream&gt;using namespace std;int main(){    int n = 2019;    if (n % 2 == 1) //若结点总数为奇数，则n1 = 0    {        cout &lt;&lt; (n + 1) / 2 &lt;&lt; endl;    }    else //若结点总数为偶数，则n1 = 1    {        cout &lt;&lt; n / 2 &lt;&lt; endl;    }    return 0;}</code></pre><h3 id="4-在-1-至-2019-中，有多少个数的数位中包含数字-9"><a href="#4-在-1-至-2019-中，有多少个数的数位中包含数字-9" class="headerlink" title="4. 在 1 至 2019 中，有多少个数的数位中包含数字 9"></a>4. 在 <code>1</code> 至 <code>2019</code> 中，有多少个数的数位中包含数字 <code>9</code></h3><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>本题从 $[1, 2019]$ 遍历即可，结果为 <code>544</code>。</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><ul><li><p>Python</p><ul><li>法1（常规做法）</li></ul><pre><code class="lang-Python">res = 0for num in range(1, 2020):    # 在循环体内修改循环变量不会影响循环条件中的循环变量    while num != 0:        if num % 10 == 9:            res += 1            break        else:            num //= 10print(res)</code></pre><ul><li>法2（列表生成式）</li></ul><pre><code class="lang-Python">print(sum([&#39;9&#39; in str(num) for num in range(1, 2020)]))</code></pre></li><li><p>C++</p></li></ul><pre><code class="lang-C++">#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main(){    int res = 0;    for (int num = 1; num &lt;= 2019; num++)    {        string s = to_string(num);        if (s.find(&#39;9&#39;) != -1)        {            res++;        }    }    cout &lt;&lt; res &lt;&lt; endl;    return 0;}</code></pre><h2 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h2><h3 id="5-给定一个数列，请问数列中有多少个元素可能是递增三元组的中心"><a href="#5-给定一个数列，请问数列中有多少个元素可能是递增三元组的中心" class="headerlink" title="5. 给定一个数列，请问数列中有多少个元素可能是递增三元组的中心"></a>5. 给定一个数列，请问数列中有多少个元素可能是递增三元组的中心</h3><blockquote><p><strong>问题描述：</strong> 在数列 $a[1], a[2], …, a[n]$ 中，如果对于下标 $i, j, k$ 满足 $0 &lt; i &lt; j &lt; k &lt; n + 1$ 且 $a[i] &lt; a[j] &lt; a[k]$，则称 $a[i], a[j], a[k]$ 为一组递增三元组，$a[j]$ 为递增三元组的中心。</p></blockquote><p><strong>输入格式：</strong> 输入的第一行包含一个整数 <code>n</code>。第二行包含 <code>n</code> 个整数 <code>a[1]</code>, <code>a[2]</code>, …, <code>a[n]</code>，相邻的整数间用空格分隔，表示给定的数列。<br><strong>输出格式：</strong> 输出一行包含一个整数，表示答案。</p><blockquote><p><strong>样例输入：</strong><br>5<br>1 2 5 3 5<br><strong>样例输出：</strong><br>2<br><strong>样例说明：</strong> <code>a[2]</code> 和 <code>a[4]</code> 可能是三元组的中心。</p></blockquote><p><strong>评测用例规模与约定：</strong> 对于 <code>50%</code> 的评测用例，<code>2 &lt;= n &lt;= 100</code>，<code>0 &lt;= 数列中的数 &lt;= 1000</code>。对于 <code>所有</code> 评测用例，<code>2 &lt;= n &lt;= 1000</code>，<code>0 &lt;= 数列中的数 &lt;= 10000</code>。</p><h4 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h4><p>三层循环暴力遍历，时间复杂度为 $O(n ^ 3)$，在实际评测时可能会超时。</p><pre><code class="lang-C++">#include &lt;iostream&gt;#include &lt;set&gt;using namespace std;int main(){    int n;    cin &gt;&gt; n;    int a[n];    for (int i = 0; i &lt; n; i++)    {        cin &gt;&gt; a[i];    }    set&lt;int&gt; s;    for (int i = 0; i &lt; n - 2; i++)    {        for (int j = i + 1; j &lt; n - 1; j++)        {            for (int k = j + 1; k &lt; n; k++)            {                if (a[i] &lt; a[j] &amp;&amp; a[j] &lt; a[k])                {                    /* 注意，对于[1, 2, 2, 3]之类有重复连续元素的特殊数组                    此处如果是s.insert(a[j])，则结果会偏小 */                    s.insert(j);                    break; // 提前结束内层循环，节省时间                }            }        }    }    cout &lt;&lt; s.size() &lt;&lt; endl;    return 0;}</code></pre><h4 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h4><p>正序遍历一次数组，<code>max</code> 数组记录满足 <code>a[i] &lt; a[j](i &lt; j)</code> 的下标元素 <code>j</code>；逆序遍历一次数组，<code>min</code> 数组记录满足 <code>a[j] &lt; a[k](j &lt; k)</code> 的下标元素 <code>j</code>，最后求 <code>max</code> 数组和 <code>min</code> 数组的交集数目。时间复杂度为 $O(n)$。</p><pre><code class="lang-C++">#include &lt;iostream&gt;using namespace std;int main(){    int n;    cin &gt;&gt; n;    int a[n];    bool max[n] = {false}, min[n] = {false};    for (int i = 0; i &lt; n; i++)    {        cin &gt;&gt; a[i];    }    int bottom = a[0];    for (int i = 1; i &lt; n - 1; i++)    {        if (a[i] &gt; bottom)        {            max[i] = true;        }        else if (a[i] &lt; bottom)        {            bottom = a[i];        }    }    int top = a[n - 1];    int res = 0;    for (int i = n - 2; i &gt;= 1; i--)    {        if (a[i] &lt; top)        {            min[i] = true;        }        else if (a[i] &gt; top)        {            top = a[i];        }    }    for (int i = 1; i &lt; n - 1; i++)    {        if (max[i] &amp;&amp; min[i])        {            res++;        }    }    cout &lt;&lt; res &lt;&lt; endl;    return 0;}</code></pre><p>而在逆序遍历时其实已经可以直接进行比较，去掉 <code>min</code> 数组以及省去最后一次遍历过程，节省时间。</p><pre><code class="lang-C++">#include &lt;iostream&gt;using namespace std;int main(){    int n;    cin &gt;&gt; n;    int a[n];    bool max[n] = {false};    for (int i = 0; i &lt; n; i++)    {        cin &gt;&gt; a[i];    }    int bottom = a[0];    for (int i = 1; i &lt; n - 1; i++)    {        if (a[i] &gt; bottom)        {            max[i] = true;        }        else if (a[i] &lt; bottom)        {            bottom = a[i];        }    }    int top = a[n - 1];    int res = 0;    for (int i = n - 2; i &gt;= 1; i--)    {        if (a[i] &lt; top &amp;&amp; max[i])        {            res++;        }        else if (a[i] &gt; top)        {            top = a[i];        }    }    cout &lt;&lt; res &lt;&lt; endl;    return 0;}</code></pre><h3 id="6-给定正整数-n，请问在整数-1-至-n-中有多少个数位递增的数"><a href="#6-给定正整数-n，请问在整数-1-至-n-中有多少个数位递增的数" class="headerlink" title="6. 给定正整数 n，请问在整数 1 至 n 中有多少个数位递增的数"></a>6. 给定正整数 <code>n</code>，请问在整数 <code>1</code> 至 <code>n</code> 中有多少个数位递增的数</h3><blockquote><p><strong>问题描述：</strong> 一个正整数如果任何一个数位不大于右边相邻的数位，则称为一个数位递增的数，例如1135是一个数位递增的数，而1024不是一个数位递增的数。</p></blockquote><p><strong>输入格式：</strong> 输入的第一行包含一个整数 n。<br><strong>输出格式：</strong> 输出一行包含一个整数，表示答案。</p><blockquote><p><strong>样例输入：</strong> 30<br><strong>样例输出：</strong> 26</p></blockquote><p><strong>评测用例规模与约定：</strong> 对于 <code>40%</code> 的评测用例，<code>1 &lt;= n &lt;= 1000</code>。对于 <code>80%</code> 的评测用例，<code>1 &lt;= n &lt;= 100000</code>。对于 <code>所有</code> 评测用例，<code>1 &lt;= n &lt;= 1000000</code>。</p><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p>本题从 $[1, n]$ 遍历即可。</p><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><pre><code class="lang-C++">#include &lt;iostream&gt;using namespace std;int main(){    int n;    cin &gt;&gt; n;    int res = 0;    for (int i = 1; i &lt;= n; i++)    {        int tmp = i, max = 9;        while (tmp)        {            if (tmp % 10 &lt;= max)            {                max = tmp % 10;            }            else            {                break;            }            tmp /= 10;        }        // 当tmp归零时说明该数已完全遍历        if (tmp == 0)        {            res++;        }    }    cout &lt;&lt; res &lt;&lt; endl;    return 0;}</code></pre><h3 id="7-特殊单词"><a href="#7-特殊单词" class="headerlink" title="7. 特殊单词"></a>7. 特殊单词</h3><p><strong>问题描述：</strong> 小明对类似于 <code>hello</code> 这种单词非常感兴趣，这种单词可以正好分为四段，第一段由一个或多个辅音字母组成，第二段由一个或多个元音字母组成，第三段由一个或多个辅音字母组成，第四段由一个或多个元音字母组成。给定一个单词，请判断这个单词是否也是这种单词，如果是请输出 <code>yes</code>，否则请输出 <code>no</code>。（元音字母包括 <code>a</code>, <code>e</code>, <code>i</code>, <code>o</code>, <code>u</code>，共五个，其他均为辅音字母。）</p><p><strong>输入格式：</strong> 输入一行，包含一个单词，单词中只包含小写英文字母。<br><strong>输出格式：</strong> 输出答案，或者为yes，或者为no。</p><blockquote><p><strong>样例输入：</strong> lanqiao<br><strong>样例输出：</strong> yes</p><p><strong>样例输入：</strong> world<br><strong>样例输出：</strong> no</p></blockquote><p><strong>评测用例规模与约定：</strong> 对于 <code>所有</code> 评测用例，单词中的字母个数不超过 <code>100</code>。</p><h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><p>因为状态只有 <code>空 -&gt; 辅音 -&gt; 元音 -&gt; 辅音 -&gt; 元音</code> 五种状态，状态空间并不大，所以可以由 <code>0</code> 到 <code>4</code>列举出来。</p><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><pre><code class="lang-C++">#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;// 判断是否是元音bool isVowel(char ch){    return ch == &#39;a&#39; || ch == &#39;e&#39; || ch == &#39;i&#39; || ch == &#39;o&#39; || ch == &#39;u&#39;;}int main(){    string word;    cin &gt;&gt; word;    int state = 0;    for (int i = 0; i &lt; word.size(); i++)    {        if (state == 0)        {            if (!isVowel(word[i]))            {                state = 1;            }            else            {                break;            }        }        else if (state == 1)        {            if (isVowel(word[i]))            {                state = 2;            }        }        else if (state == 2)        {            if (!isVowel(word[i]))            {                state = 3;            }        }        else if (state == 3)        {            if (isVowel(word[i]))            {                state = 4;            }        }        else if (state == 4)        {            if (!isVowel(word[i]))            {                state = 5;                break; // 已超过题目要求，继续遍历无意义，可直接退出循环            }        }    }    cout &lt;&lt; ((state == 4) ? &quot;yes&quot; : &quot;no&quot;) &lt;&lt; endl;    return 0;}</code></pre><h4 id="延伸思考"><a href="#延伸思考" class="headerlink" title="延伸思考"></a>延伸思考</h4><p>原题是单词中辅音和元音状态转换 <code>4</code> 次，倘若改成转换 <code>n</code> 次，则不能一一列举，需要根据奇偶状态进行判断，将状态抽象出来。</p><p>抽象出函数如下：</p><pre><code class="lang-C++">bool isMatch(string word, int n){    if (n &lt;= 0)    {        return false;    }    int state = 0;    for (int i = 0; i &lt; word.size(); i++)    {        /*        注意，空状态state = 0和元音状态 state % 2 == 0是有区别的        空状态只能接辅音，而元音状态辅音元音都能接        */        if (state == 0)        {            if (!isVowel(word[i]))            {                state++;            }            else            {                break;            }        }        else if (state &gt; n)        {            break;        }        else        {            // 如果当前状态与下一个字母类型相反状态才变化            if ((state % 2 == 1 &amp;&amp; isVowel(word[i])) || (state % 2 == 0 &amp;&amp; !isVowel(word[i])))            {                state++;            }        }    }    return state == n;}</code></pre><h3 id="8-神奇序列"><a href="#8-神奇序列" class="headerlink" title="8. 神奇序列"></a>8. 神奇序列</h3><p><strong>问题描述：</strong> 小明想知道，满足以下条件的正整数序列的数量：</p><ol><li>第一项为 <code>n</code>；</li><li>第二项不超过 <code>n</code>；</li><li>从第三项开始，每一项小于前两项的差的绝对值。</li></ol><p>请计算，对于给定的 <code>n</code>，有多少种满足条件的序列。</p><p><strong>输入格式：</strong> 输入一行包含一个整数 <code>n</code>。<br><strong>输出格式：</strong> 输出一个整数，表示答案。答案可能很大，请输出答案除以 <code>10000</code> 的余数。</p><blockquote><p><strong>样例输入：</strong> 4<br><strong>样例输出：</strong> 7<br><strong>样例说明：</strong><br>以下是满足条件的序列：<br>4 1<br>4 1 1<br>4 1 2<br>4 2<br>4 2 1<br>4 3<br>4 4</p></blockquote><p><strong>评测用例规模与约定：</strong> 对于 <code>20%</code> 的评测用例，<code>1 &lt;= n &lt;= 5</code>；对于 <code>50%</code> 的评测用例，<code>1 &lt;= n &lt;= 10</code>；对于 <code>80%</code> 的评测用例，<code>1 &lt;= n &lt;= 100</code>；对于 <code>所有</code> 评测用例，<code>1 &lt;= n &lt;= 1000</code>。</p><h4 id="思路1-1"><a href="#思路1-1" class="headerlink" title="思路1"></a>思路1</h4><p>对于层层深入，我首先采用的是深度优先遍历（DFS）的算法，思路非常简单。</p><pre><code class="lang-C++">#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int res = 0;void DFS(int first, int second){    for (int i = 1; i &lt; abs(first - second); i++)    {        res = (res + 1) % 10000;        DFS(second, i);    }}int main(){    int n;    cin &gt;&gt; n;    for (int second = 1; second &lt;= n; second++)    {        res++;        DFS(n, second);    }    cout &lt;&lt; res &lt;&lt; endl;    return 0;}</code></pre><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>对于思路1的算法，在 <code>n</code> 取到 <code>30</code> 时，耗费时间就已经是肉眼可见的慢了，对于 <code>n</code> 上限为 <code>1000</code> 的测试用例，这样的效率显然是无法接受的。</p><p>分析后猜想低效原因主要有两个，一个是调用 <code>DFS</code> 层数太深、次数太多，二是在前一部分搜索过的内容可能之后还会多次搜索（比如对于 <code>131</code> 来说，<code>13</code> 和 <code>31</code> 本质是一样的，但是前后搜索了两次）冗余程度较高。</p><p>从上面的分析可以联想到斐波那契数列（Fibonacci sequence），这两道题目有很高的相似性，想通了提高斐波那契数列时间效率对于本题或许就能迎刃而解。</p><p>斐波那契数列的定义如下：</p><script type="math/tex; mode=display">fib(x)=\left\{\begin{aligned}1, \quad & x = 1 & or && x = 2\\fib(x - 1) + fib(x - 2), \quad & {x \ge 2}\\\end{aligned}\right.</script><p>最直接的算法依然是 <code>DFS</code>。</p><pre><code class="lang-C++">int Fibonacci(int n){    return (n == 1 || n == 2) ? 1 : Fibonacci(n - 1) + Fibonacci(n - 2);}</code></pre><p><code>Fibonacci(40) = 102334155</code>，这个数字已经很大了，计算速度也非常慢。</p><p>此时可以进行优化，将已经搜索过的数字保存起来。保存数字最直接想到用数组，但是 <code>Fibonacci(n)</code> 只与前两项有关，故用两个常量保存即可。</p><pre><code class="lang-C++">int Fibonacci(int n){    if (n == 1 || n == 2)    {        return 1;    }    int a = 1, b = 1;    for (int i = 3; i &lt;= n; i++)    {        // 实现a = b, b = a + b        b += a;        a = b - a;    }    return b;}</code></pre><h4 id="思路2-1"><a href="#思路2-1" class="headerlink" title="思路2"></a>思路2</h4><p>回到本题中来，设置二维数组v，<code>v[first][second]</code> 表示本位置前两个数为 <code>first</code> 和 <code>second</code> 时的序列数量。将搜索过的内容记录下来，后续需要时只需要调用即可。当 <code>n = 1000</code> 时得到结果比思路一要快得多。</p><pre><code class="lang-C++">#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;cmath&gt;using namespace std;int DFS(vector&lt;vector&lt;int&gt; &gt; &amp;v, int first, int second){    int tmp = abs(first - second);    if (tmp &lt;= 1)    {        return 0;    }    if (v[first][second] != 0)    {        return v[first][second];    }    else    {        int res = 0;        for (int i = 1; i &lt; tmp; i++)        {            res = (res + 1 + DFS(v, second, i)) % 10000;        }        v[first][second] = v[second][first] = res;        return res;    }}int main(){    int n;    cin &gt;&gt; n;    vector&lt;vector&lt;int&gt; &gt; v(n + 1, vector&lt;int&gt;(n + 1, 0));    int res = 0;    for (int i = 1; i &lt;= n; i++)    {        res = (res + 1 + DFS(v, n, i)) % 10000;    }    cout &lt;&lt; res &lt;&lt; endl;    return 0;}</code></pre><h3 id="9-草地延伸"><a href="#9-草地延伸" class="headerlink" title="9. 草地延伸"></a>9. 草地延伸</h3><p><strong>问题描述：</strong> 小明有一块空地，他将这块空地划分为 <code>n</code> 行 <code>m</code> 列的小块，每行和每列的长度都为 <code>1</code>。小明选了其中的一些小块空地，种上了草，其他小块仍然保持是空地。这些草长得很快，每个月，草都会向外长出一些，如果一个小块种了草，则它将向自己的上、下、左、右四小块空地扩展，这四小块空地都将变为有草的小块。请告诉小明，<code>k</code> 个月后空地上哪些地方有草。</p><p><strong>输入格式：</strong> 输入的第一行包含两个整数 <code>n</code>, <code>m</code>。接下来 <code>n</code> 行，每行包含 <code>m</code> 个字母，表示初始的空地状态，字母之间没有空格。如果为小数点，表示为空地，如果字母为 <code>g</code>，表示种了草。接下来包含一个整数 <code>k</code>。<br><strong>输出格式：</strong> 输出 <code>n</code> 行，每行包含 <code>m</code> 个字母，表示 <code>k</code> 个月后空地的状态。如果为小数点，表示为空地，如果字母为 <code>g</code>，表示长了草。</p><blockquote><p><strong>样例输入：</strong><br>4 5<br>.g…<br>…..<br>..g..<br>…..<br>2<br><strong>样例输出：</strong><br>gggg.<br>gggg.<br>ggggg<br>.ggg.</p></blockquote><p><strong>评测用例规模与约定：</strong>对于 <code>30%</code> 的评测用例，<code>2 &lt;= n</code>, <code>m &lt;= 20</code>。对于 <code>70%</code> 的评测用例，<code>2 &lt;= n</code>, <code>m &lt;= 100</code>。对于 <code>所有</code> 评测用例，<code>2 &lt;= n</code>, <code>m &lt;= 1000</code>，<code>1 &lt;= k &lt;= 1000</code>。</p><h4 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h4><p>广度优先遍历（BFS）一圈圈向外延展即可。</p><h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><pre><code class="lang-C++">#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;vector&gt;using namespace std;int main(){    int n, m;    cin &gt;&gt; n &gt;&gt; m;    char grass[n][m];    vector&lt;pair&lt;int, int&gt;&gt; v;    for (int i = 0; i &lt; n; i++)    {        string s;        cin &gt;&gt; s;        for (int j = 0; j &lt; m; j++)        {            grass[i][j] = s[j];            if (s[j] == &#39;g&#39;)            {                v.push_back(make_pair(i, j));            }        }    }    int k;    cin &gt;&gt; k;    // 当到达截止时间或无草可长时停止循环    for (int time = 0; time &lt; k &amp;&amp; !v.empty(); time++)    {        vector&lt;pair&lt;int, int&gt;&gt; next;        for (vector&lt;pair&lt;int, int&gt;&gt;::iterator it = v.begin(); it != v.end(); it++)        {            int i = it-&gt;first, j = it-&gt;second;            if (i &gt;= 1 &amp;&amp; grass[i - 1][j] != &#39;g&#39;)            {                next.push_back(make_pair(i - 1, j));            }            if (i &lt;= n - 2 &amp;&amp; grass[i + 1][j] != &#39;g&#39;)            {                next.push_back(make_pair(i + 1, j));            }            if (j &gt;= 1 &amp;&amp; grass[i][j - 1] != &#39;g&#39;)            {                next.push_back(make_pair(i, j - 1));            }            if (j &lt;= m - 2 &amp;&amp; grass[i][j + 1] != &#39;g&#39;)            {                next.push_back(make_pair(i, j + 1));            }        }        for (vector&lt;pair&lt;int, int&gt;&gt;::iterator it = next.begin(); it != next.end(); it++)        {            grass[it-&gt;first][it-&gt;second] = &#39;g&#39;;        }        v = next; // 更新最外圈位置    }    for (int i = 0; i &lt; n; i++)    {        for (int j = 0; j &lt; m; j++)        {            cout &lt;&lt; grass[i][j];        }        cout &lt;&lt; endl;    }    return 0;}</code></pre><h3 id="10-好看晚会"><a href="#10-好看晚会" class="headerlink" title="10. 好看晚会"></a>10. 好看晚会</h3><p><strong>问题描述：</strong> 小明要组织一台晚会，总共准备了 <code>n</code> 个节目。然后晚会的时间有限，他只能最终选择其中的 <code>m</code> 个节目。这 <code>n</code> 个节目是按照小明设想的顺序给定的，顺序不能改变。小明发现，观众对于晚上的喜欢程度与前几个节目的好看程度有非常大的关系，他希望选出的第一个节目尽可能好看，在此前提下希望第二个节目尽可能好看，依次类推。小明给每个节目定义了一个好看值，请你帮助小明选择出 <code>m</code> 个节目，满足他的要求。</p><p><strong>输入格式：</strong> 输入的第一行包含两个整数 <code>n</code>, <code>m</code> ，表示节目的数量和要选择的数量。第二行包含 <code>n</code> 个整数，依次为每个节目的好看值。<br><strong>输出格式：</strong> 输出一行包含 <code>m</code> 个整数，为选出的节目的好看值。</p><blockquote><p><strong>样例输入：</strong><br>5 3<br>3 1 2 5 4<br><strong>样例输出：</strong><br>3 5 4<br><strong>样例说明：</strong> 选择了第1, 4, 5个节目。</p></blockquote><p><strong>评测用例规模与约定：</strong> 对于 <code>30%</code> 的评测用例，<code>1 &lt;= n &lt;= 20</code>；对于 <code>60%</code> 的评测用例，<code>1 &lt;= n &lt;= 100</code>；对于 <code>所有</code> 评测用例，<code>1 &lt;= n &lt;= 100000</code>，<code>0 &lt;= 节目的好看值 &lt;= 100000</code>。</p><h4 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h4><p>题目并不难，先将 <code>n</code> 个节目按好看程度排序，再将最好看的 <code>m</code> 个节目里按序号排序，输出前 <code>m</code> 个节目好看程度即可。</p><h4 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h4><pre><code class="lang-C++">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;struct node{    int number, look;    // 按好看程度排序函数    bool operator&lt;(const node &amp;y) const    {        if (look == y.look)            return number &lt;= y.number;        return look &gt; y.look;    }};// 最好看的m个节目里按序号排序函数bool cmp(const node &amp;x, const node &amp;y){    return x.number &lt; y.number;}int main(){    int n, m;    cin &gt;&gt; n &gt;&gt; m;    node a[n];    for (int i = 0; i &lt; n; i++)    {        int look;        cin &gt;&gt; look;        a[i].number = i + 1;        a[i].look = look;    }    sort(a, a + n);      // 按好看程度排序    sort(a, a + m, cmp); // 最好看的m个节目里按序号排序    for (int i = 0; i &lt; m; i++)    {        cout &lt;&lt; a[i].look &lt;&lt; &quot; &quot;;    }    return 0;}</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>蓝桥杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>A Test article</title>
    <link href="/2020/03/12/Test/"/>
    <url>/2020/03/12/Test/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Here is a test blog, but also my first blog</p></blockquote><a id="more"></a><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p><strong>粗体:</strong></p><p><em>斜体:</em></p><ul><li>无序列表1<ul><li>无序列表1.1<ul><li>无序列表1.1.1</li></ul></li></ul></li><li>无序列表2</li><li>无序列表3</li></ul><ol><li>有序列表1<ol><li>有序列表1.1<ol><li>有序列表1.1.1</li></ol></li></ol></li><li>有序列表2</li><li>有序列表3</li></ol><p>来一张表格:</p><div class="table-container"><table><thead><tr><th style="text-align:center">表头</th><th style="text-align:center">条目一</th><th style="text-align:center">条目二</th></tr></thead><tbody><tr><td style="text-align:center">项目</td><td style="text-align:center">项目一</td><td style="text-align:center">项目二</td></tr><tr><td style="text-align:center">谢谢</td><td style="text-align:center">哈哈哈</td><td style="text-align:center">呵</td></tr></tbody></table></div><pre><code class="lang-mermaid">graph TD;A--&gt;B;A--&gt;C;B--&gt;D;C--&gt;D;</code></pre><p>中划线:<del>I LOVE YOU</del></p><p>LaTex:<br>质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。</p><p>代码显示测试:</p><pre><code class="lang-C++">#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;int main(){    vector&lt;int&gt; v;    v.push_back(1);    v.push_back(1);    v.push_back(1);    cout &lt;&lt; v.size();    return 0;}</code></pre>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>the first tag</tag>
      
      <tag>the second tag</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/03/12/hello-world/"/>
    <url>/2020/03/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="lang-bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="lang-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="lang-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="lang-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
